// q_sys_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.1 670

`timescale 1 ps / 1 ps
module q_sys_mm_interconnect_1 (
		input  wire        ddr3_ram_afi_clk_clk,                                      //                                    ddr3_ram_afi_clk.clk
		input  wire        ext_flash_clock_bridge_out_clk_clk,                        //                      ext_flash_clock_bridge_out_clk.clk
		input  wire        sys_clk_clk_clk,                                           //                                         sys_clk_clk.clk
		input  wire        cpu_reset_reset_bridge_in_reset_reset,                     //                     cpu_reset_reset_bridge_in_reset.reset
		input  wire        ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset, // ddr3_ram_avl_translator_reset_reset_bridge_in_reset.reset
		input  wire        ddr3_ram_soft_reset_reset_bridge_in_reset_reset,           //           ddr3_ram_soft_reset_reset_bridge_in_reset.reset
		input  wire        eth_tse_reset_connection_reset_bridge_in_reset_reset,      //      eth_tse_reset_connection_reset_bridge_in_reset.reset
		input  wire        ext_flash_reset_reset_bridge_in_reset_reset,               //               ext_flash_reset_reset_bridge_in_reset.reset
		input  wire [28:0] cpu_data_master_address,                                   //                                     cpu_data_master.address
		output wire        cpu_data_master_waitrequest,                               //                                                    .waitrequest
		input  wire [3:0]  cpu_data_master_byteenable,                                //                                                    .byteenable
		input  wire        cpu_data_master_read,                                      //                                                    .read
		output wire [31:0] cpu_data_master_readdata,                                  //                                                    .readdata
		output wire        cpu_data_master_readdatavalid,                             //                                                    .readdatavalid
		input  wire        cpu_data_master_write,                                     //                                                    .write
		input  wire [31:0] cpu_data_master_writedata,                                 //                                                    .writedata
		input  wire        cpu_data_master_debugaccess,                               //                                                    .debugaccess
		input  wire [28:0] cpu_instruction_master_address,                            //                              cpu_instruction_master.address
		output wire        cpu_instruction_master_waitrequest,                        //                                                    .waitrequest
		input  wire        cpu_instruction_master_read,                               //                                                    .read
		output wire [31:0] cpu_instruction_master_readdata,                           //                                                    .readdata
		output wire        cpu_instruction_master_readdatavalid,                      //                                                    .readdatavalid
		input  wire [28:0] msgdma_rx_descriptor_read_master_address,                  //                    msgdma_rx_descriptor_read_master.address
		output wire        msgdma_rx_descriptor_read_master_waitrequest,              //                                                    .waitrequest
		input  wire        msgdma_rx_descriptor_read_master_read,                     //                                                    .read
		output wire [31:0] msgdma_rx_descriptor_read_master_readdata,                 //                                                    .readdata
		output wire        msgdma_rx_descriptor_read_master_readdatavalid,            //                                                    .readdatavalid
		input  wire [28:0] msgdma_rx_descriptor_write_master_address,                 //                   msgdma_rx_descriptor_write_master.address
		output wire        msgdma_rx_descriptor_write_master_waitrequest,             //                                                    .waitrequest
		input  wire [3:0]  msgdma_rx_descriptor_write_master_byteenable,              //                                                    .byteenable
		input  wire        msgdma_rx_descriptor_write_master_write,                   //                                                    .write
		input  wire [31:0] msgdma_rx_descriptor_write_master_writedata,               //                                                    .writedata
		output wire [1:0]  msgdma_rx_descriptor_write_master_response,                //                                                    .response
		output wire        msgdma_rx_descriptor_write_master_writeresponsevalid,      //                                                    .writeresponsevalid
		input  wire [27:0] msgdma_rx_mm_write_address,                                //                                  msgdma_rx_mm_write.address
		output wire        msgdma_rx_mm_write_waitrequest,                            //                                                    .waitrequest
		input  wire [3:0]  msgdma_rx_mm_write_byteenable,                             //                                                    .byteenable
		input  wire        msgdma_rx_mm_write_write,                                  //                                                    .write
		input  wire [31:0] msgdma_rx_mm_write_writedata,                              //                                                    .writedata
		input  wire [28:0] msgdma_tx_descriptor_read_master_address,                  //                    msgdma_tx_descriptor_read_master.address
		output wire        msgdma_tx_descriptor_read_master_waitrequest,              //                                                    .waitrequest
		input  wire        msgdma_tx_descriptor_read_master_read,                     //                                                    .read
		output wire [31:0] msgdma_tx_descriptor_read_master_readdata,                 //                                                    .readdata
		output wire        msgdma_tx_descriptor_read_master_readdatavalid,            //                                                    .readdatavalid
		input  wire [28:0] msgdma_tx_descriptor_write_master_address,                 //                   msgdma_tx_descriptor_write_master.address
		output wire        msgdma_tx_descriptor_write_master_waitrequest,             //                                                    .waitrequest
		input  wire [3:0]  msgdma_tx_descriptor_write_master_byteenable,              //                                                    .byteenable
		input  wire        msgdma_tx_descriptor_write_master_write,                   //                                                    .write
		input  wire [31:0] msgdma_tx_descriptor_write_master_writedata,               //                                                    .writedata
		output wire [1:0]  msgdma_tx_descriptor_write_master_response,                //                                                    .response
		output wire        msgdma_tx_descriptor_write_master_writeresponsevalid,      //                                                    .writeresponsevalid
		input  wire [27:0] msgdma_tx_mm_read_address,                                 //                                   msgdma_tx_mm_read.address
		output wire        msgdma_tx_mm_read_waitrequest,                             //                                                    .waitrequest
		input  wire [3:0]  msgdma_tx_mm_read_byteenable,                              //                                                    .byteenable
		input  wire        msgdma_tx_mm_read_read,                                    //                                                    .read
		output wire [31:0] msgdma_tx_mm_read_readdata,                                //                                                    .readdata
		output wire        msgdma_tx_mm_read_readdatavalid,                           //                                                    .readdatavalid
		output wire [1:0]  button_pio_s1_address,                                     //                                       button_pio_s1.address
		input  wire [31:0] button_pio_s1_readdata,                                    //                                                    .readdata
		output wire [8:0]  calibration_ram_s1_address,                                //                                  calibration_ram_s1.address
		output wire        calibration_ram_s1_write,                                  //                                                    .write
		input  wire [15:0] calibration_ram_s1_readdata,                               //                                                    .readdata
		output wire [15:0] calibration_ram_s1_writedata,                              //                                                    .writedata
		output wire [1:0]  calibration_ram_s1_byteenable,                             //                                                    .byteenable
		output wire        calibration_ram_s1_chipselect,                             //                                                    .chipselect
		output wire        calibration_ram_s1_clken,                                  //                                                    .clken
		output wire [8:0]  cpu_debug_mem_slave_address,                               //                                 cpu_debug_mem_slave.address
		output wire        cpu_debug_mem_slave_write,                                 //                                                    .write
		output wire        cpu_debug_mem_slave_read,                                  //                                                    .read
		input  wire [31:0] cpu_debug_mem_slave_readdata,                              //                                                    .readdata
		output wire [31:0] cpu_debug_mem_slave_writedata,                             //                                                    .writedata
		output wire [3:0]  cpu_debug_mem_slave_byteenable,                            //                                                    .byteenable
		input  wire        cpu_debug_mem_slave_waitrequest,                           //                                                    .waitrequest
		output wire        cpu_debug_mem_slave_debugaccess,                           //                                                    .debugaccess
		output wire [24:0] ddr3_ram_avl_address,                                      //                                        ddr3_ram_avl.address
		output wire        ddr3_ram_avl_write,                                        //                                                    .write
		output wire        ddr3_ram_avl_read,                                         //                                                    .read
		input  wire [31:0] ddr3_ram_avl_readdata,                                     //                                                    .readdata
		output wire [31:0] ddr3_ram_avl_writedata,                                    //                                                    .writedata
		output wire        ddr3_ram_avl_beginbursttransfer,                           //                                                    .beginbursttransfer
		output wire [2:0]  ddr3_ram_avl_burstcount,                                   //                                                    .burstcount
		output wire [3:0]  ddr3_ram_avl_byteenable,                                   //                                                    .byteenable
		input  wire        ddr3_ram_avl_readdatavalid,                                //                                                    .readdatavalid
		input  wire        ddr3_ram_avl_waitrequest,                                  //                                                    .waitrequest
		output wire [2:0]  debug_uart_s1_address,                                     //                                       debug_uart_s1.address
		output wire        debug_uart_s1_write,                                       //                                                    .write
		output wire        debug_uart_s1_read,                                        //                                                    .read
		input  wire [15:0] debug_uart_s1_readdata,                                    //                                                    .readdata
		output wire [15:0] debug_uart_s1_writedata,                                   //                                                    .writedata
		output wire        debug_uart_s1_begintransfer,                               //                                                    .begintransfer
		output wire        debug_uart_s1_chipselect,                                  //                                                    .chipselect
		output wire [10:0] descriptor_memory_s1_address,                              //                                descriptor_memory_s1.address
		output wire        descriptor_memory_s1_write,                                //                                                    .write
		input  wire [31:0] descriptor_memory_s1_readdata,                             //                                                    .readdata
		output wire [31:0] descriptor_memory_s1_writedata,                            //                                                    .writedata
		output wire [3:0]  descriptor_memory_s1_byteenable,                           //                                                    .byteenable
		output wire        descriptor_memory_s1_chipselect,                           //                                                    .chipselect
		output wire        descriptor_memory_s1_clken,                                //                                                    .clken
		output wire [7:0]  eth_tse_control_port_address,                              //                                eth_tse_control_port.address
		output wire        eth_tse_control_port_write,                                //                                                    .write
		output wire        eth_tse_control_port_read,                                 //                                                    .read
		input  wire [31:0] eth_tse_control_port_readdata,                             //                                                    .readdata
		output wire [31:0] eth_tse_control_port_writedata,                            //                                                    .writedata
		input  wire        eth_tse_control_port_waitrequest,                          //                                                    .waitrequest
		output wire [2:0]  ext_flash_avl_csr_address,                                 //                                   ext_flash_avl_csr.address
		output wire        ext_flash_avl_csr_write,                                   //                                                    .write
		output wire        ext_flash_avl_csr_read,                                    //                                                    .read
		input  wire [31:0] ext_flash_avl_csr_readdata,                                //                                                    .readdata
		output wire [31:0] ext_flash_avl_csr_writedata,                               //                                                    .writedata
		input  wire        ext_flash_avl_csr_readdatavalid,                           //                                                    .readdatavalid
		input  wire        ext_flash_avl_csr_waitrequest,                             //                                                    .waitrequest
		output wire [23:0] ext_flash_avl_mem_address,                                 //                                   ext_flash_avl_mem.address
		output wire        ext_flash_avl_mem_write,                                   //                                                    .write
		output wire        ext_flash_avl_mem_read,                                    //                                                    .read
		input  wire [31:0] ext_flash_avl_mem_readdata,                                //                                                    .readdata
		output wire [31:0] ext_flash_avl_mem_writedata,                               //                                                    .writedata
		output wire [6:0]  ext_flash_avl_mem_burstcount,                              //                                                    .burstcount
		output wire [3:0]  ext_flash_avl_mem_byteenable,                              //                                                    .byteenable
		input  wire        ext_flash_avl_mem_readdatavalid,                           //                                                    .readdatavalid
		input  wire        ext_flash_avl_mem_waitrequest,                             //                                                    .waitrequest
		output wire [2:0]  frame_timer_s1_address,                                    //                                      frame_timer_s1.address
		output wire        frame_timer_s1_write,                                      //                                                    .write
		input  wire [15:0] frame_timer_s1_readdata,                                   //                                                    .readdata
		output wire [15:0] frame_timer_s1_writedata,                                  //                                                    .writedata
		output wire        frame_timer_s1_chipselect,                                 //                                                    .chipselect
		output wire [2:0]  msgdma_rx_csr_address,                                     //                                       msgdma_rx_csr.address
		output wire        msgdma_rx_csr_write,                                       //                                                    .write
		output wire        msgdma_rx_csr_read,                                        //                                                    .read
		input  wire [31:0] msgdma_rx_csr_readdata,                                    //                                                    .readdata
		output wire [31:0] msgdma_rx_csr_writedata,                                   //                                                    .writedata
		output wire [3:0]  msgdma_rx_csr_byteenable,                                  //                                                    .byteenable
		output wire [2:0]  msgdma_rx_prefetcher_csr_address,                          //                            msgdma_rx_prefetcher_csr.address
		output wire        msgdma_rx_prefetcher_csr_write,                            //                                                    .write
		output wire        msgdma_rx_prefetcher_csr_read,                             //                                                    .read
		input  wire [31:0] msgdma_rx_prefetcher_csr_readdata,                         //                                                    .readdata
		output wire [31:0] msgdma_rx_prefetcher_csr_writedata,                        //                                                    .writedata
		output wire [2:0]  msgdma_tx_csr_address,                                     //                                       msgdma_tx_csr.address
		output wire        msgdma_tx_csr_write,                                       //                                                    .write
		output wire        msgdma_tx_csr_read,                                        //                                                    .read
		input  wire [31:0] msgdma_tx_csr_readdata,                                    //                                                    .readdata
		output wire [31:0] msgdma_tx_csr_writedata,                                   //                                                    .writedata
		output wire [3:0]  msgdma_tx_csr_byteenable,                                  //                                                    .byteenable
		output wire [2:0]  msgdma_tx_prefetcher_csr_address,                          //                            msgdma_tx_prefetcher_csr.address
		output wire        msgdma_tx_prefetcher_csr_write,                            //                                                    .write
		output wire        msgdma_tx_prefetcher_csr_read,                             //                                                    .read
		input  wire [31:0] msgdma_tx_prefetcher_csr_readdata,                         //                                                    .readdata
		output wire [31:0] msgdma_tx_prefetcher_csr_writedata,                        //                                                    .writedata
		output wire [0:0]  onchip_flash_csr_address,                                  //                                    onchip_flash_csr.address
		output wire        onchip_flash_csr_write,                                    //                                                    .write
		output wire        onchip_flash_csr_read,                                     //                                                    .read
		input  wire [31:0] onchip_flash_csr_readdata,                                 //                                                    .readdata
		output wire [31:0] onchip_flash_csr_writedata,                                //                                                    .writedata
		output wire [18:0] onchip_flash_data_address,                                 //                                   onchip_flash_data.address
		output wire        onchip_flash_data_write,                                   //                                                    .write
		output wire        onchip_flash_data_read,                                    //                                                    .read
		input  wire [31:0] onchip_flash_data_readdata,                                //                                                    .readdata
		output wire [31:0] onchip_flash_data_writedata,                               //                                                    .writedata
		output wire [3:0]  onchip_flash_data_burstcount,                              //                                                    .burstcount
		input  wire        onchip_flash_data_readdatavalid,                           //                                                    .readdatavalid
		input  wire        onchip_flash_data_waitrequest,                             //                                                    .waitrequest
		output wire [2:0]  output_pio_s1_address,                                     //                                       output_pio_s1.address
		output wire        output_pio_s1_write,                                       //                                                    .write
		input  wire [31:0] output_pio_s1_readdata,                                    //                                                    .readdata
		output wire [31:0] output_pio_s1_writedata,                                   //                                                    .writedata
		output wire        output_pio_s1_chipselect,                                  //                                                    .chipselect
		output wire [1:0]  sensor_interface_csr_address,                              //                                sensor_interface_csr.address
		output wire        sensor_interface_csr_write,                                //                                                    .write
		output wire        sensor_interface_csr_read,                                 //                                                    .read
		input  wire [31:0] sensor_interface_csr_readdata,                             //                                                    .readdata
		output wire [31:0] sensor_interface_csr_writedata,                            //                                                    .writedata
		output wire [3:0]  sensor_interface_csr_byteenable,                           //                                                    .byteenable
		output wire [2:0]  sys_clk_timer_s1_address,                                  //                                    sys_clk_timer_s1.address
		output wire        sys_clk_timer_s1_write,                                    //                                                    .write
		input  wire [15:0] sys_clk_timer_s1_readdata,                                 //                                                    .readdata
		output wire [15:0] sys_clk_timer_s1_writedata,                                //                                                    .writedata
		output wire        sys_clk_timer_s1_chipselect,                               //                                                    .chipselect
		output wire [0:0]  sysid_control_slave_address,                               //                                 sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata,                              //                                                    .readdata
		output wire [2:0]  udp_generator_csr_address,                                 //                                   udp_generator_csr.address
		output wire        udp_generator_csr_write,                                   //                                                    .write
		output wire        udp_generator_csr_read,                                    //                                                    .read
		input  wire [31:0] udp_generator_csr_readdata,                                //                                                    .readdata
		output wire [31:0] udp_generator_csr_writedata,                               //                                                    .writedata
		output wire [3:0]  udp_generator_csr_byteenable                               //                                                    .byteenable
	);

	wire          cpu_data_master_translator_avalon_universal_master_0_waitrequest;                          // cpu_data_master_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;                             // cpu_data_master_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	wire          cpu_data_master_translator_avalon_universal_master_0_debugaccess;                          // cpu_data_master_translator:uav_debugaccess -> cpu_data_master_agent:av_debugaccess
	wire   [28:0] cpu_data_master_translator_avalon_universal_master_0_address;                              // cpu_data_master_translator:uav_address -> cpu_data_master_agent:av_address
	wire          cpu_data_master_translator_avalon_universal_master_0_read;                                 // cpu_data_master_translator:uav_read -> cpu_data_master_agent:av_read
	wire    [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;                           // cpu_data_master_translator:uav_byteenable -> cpu_data_master_agent:av_byteenable
	wire          cpu_data_master_translator_avalon_universal_master_0_readdatavalid;                        // cpu_data_master_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	wire          cpu_data_master_translator_avalon_universal_master_0_lock;                                 // cpu_data_master_translator:uav_lock -> cpu_data_master_agent:av_lock
	wire          cpu_data_master_translator_avalon_universal_master_0_write;                                // cpu_data_master_translator:uav_write -> cpu_data_master_agent:av_write
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;                            // cpu_data_master_translator:uav_writedata -> cpu_data_master_agent:av_writedata
	wire    [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;                           // cpu_data_master_translator:uav_burstcount -> cpu_data_master_agent:av_burstcount
	wire          cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;                   // cpu_instruction_master_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;                      // cpu_instruction_master_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	wire          cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;                   // cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_agent:av_debugaccess
	wire   [28:0] cpu_instruction_master_translator_avalon_universal_master_0_address;                       // cpu_instruction_master_translator:uav_address -> cpu_instruction_master_agent:av_address
	wire          cpu_instruction_master_translator_avalon_universal_master_0_read;                          // cpu_instruction_master_translator:uav_read -> cpu_instruction_master_agent:av_read
	wire    [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;                    // cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_agent:av_byteenable
	wire          cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid;                 // cpu_instruction_master_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	wire          cpu_instruction_master_translator_avalon_universal_master_0_lock;                          // cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_agent:av_lock
	wire          cpu_instruction_master_translator_avalon_universal_master_0_write;                         // cpu_instruction_master_translator:uav_write -> cpu_instruction_master_agent:av_write
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;                     // cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_agent:av_writedata
	wire    [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;                    // cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_agent:av_burstcount
	wire          msgdma_tx_mm_read_translator_avalon_universal_master_0_waitrequest;                        // msgdma_tx_mm_read_agent:av_waitrequest -> msgdma_tx_mm_read_translator:uav_waitrequest
	wire   [31:0] msgdma_tx_mm_read_translator_avalon_universal_master_0_readdata;                           // msgdma_tx_mm_read_agent:av_readdata -> msgdma_tx_mm_read_translator:uav_readdata
	wire          msgdma_tx_mm_read_translator_avalon_universal_master_0_debugaccess;                        // msgdma_tx_mm_read_translator:uav_debugaccess -> msgdma_tx_mm_read_agent:av_debugaccess
	wire   [28:0] msgdma_tx_mm_read_translator_avalon_universal_master_0_address;                            // msgdma_tx_mm_read_translator:uav_address -> msgdma_tx_mm_read_agent:av_address
	wire          msgdma_tx_mm_read_translator_avalon_universal_master_0_read;                               // msgdma_tx_mm_read_translator:uav_read -> msgdma_tx_mm_read_agent:av_read
	wire    [3:0] msgdma_tx_mm_read_translator_avalon_universal_master_0_byteenable;                         // msgdma_tx_mm_read_translator:uav_byteenable -> msgdma_tx_mm_read_agent:av_byteenable
	wire          msgdma_tx_mm_read_translator_avalon_universal_master_0_readdatavalid;                      // msgdma_tx_mm_read_agent:av_readdatavalid -> msgdma_tx_mm_read_translator:uav_readdatavalid
	wire          msgdma_tx_mm_read_translator_avalon_universal_master_0_lock;                               // msgdma_tx_mm_read_translator:uav_lock -> msgdma_tx_mm_read_agent:av_lock
	wire          msgdma_tx_mm_read_translator_avalon_universal_master_0_write;                              // msgdma_tx_mm_read_translator:uav_write -> msgdma_tx_mm_read_agent:av_write
	wire   [31:0] msgdma_tx_mm_read_translator_avalon_universal_master_0_writedata;                          // msgdma_tx_mm_read_translator:uav_writedata -> msgdma_tx_mm_read_agent:av_writedata
	wire    [2:0] msgdma_tx_mm_read_translator_avalon_universal_master_0_burstcount;                         // msgdma_tx_mm_read_translator:uav_burstcount -> msgdma_tx_mm_read_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                     // rsp_mux_002:src_valid -> msgdma_tx_mm_read_agent:rp_valid
	wire  [120:0] rsp_mux_002_src_data;                                                                      // rsp_mux_002:src_data -> msgdma_tx_mm_read_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                     // msgdma_tx_mm_read_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [20:0] rsp_mux_002_src_channel;                                                                   // rsp_mux_002:src_channel -> msgdma_tx_mm_read_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                             // rsp_mux_002:src_startofpacket -> msgdma_tx_mm_read_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                               // rsp_mux_002:src_endofpacket -> msgdma_tx_mm_read_agent:rp_endofpacket
	wire          msgdma_rx_mm_write_translator_avalon_universal_master_0_waitrequest;                       // msgdma_rx_mm_write_agent:av_waitrequest -> msgdma_rx_mm_write_translator:uav_waitrequest
	wire   [31:0] msgdma_rx_mm_write_translator_avalon_universal_master_0_readdata;                          // msgdma_rx_mm_write_agent:av_readdata -> msgdma_rx_mm_write_translator:uav_readdata
	wire          msgdma_rx_mm_write_translator_avalon_universal_master_0_debugaccess;                       // msgdma_rx_mm_write_translator:uav_debugaccess -> msgdma_rx_mm_write_agent:av_debugaccess
	wire   [28:0] msgdma_rx_mm_write_translator_avalon_universal_master_0_address;                           // msgdma_rx_mm_write_translator:uav_address -> msgdma_rx_mm_write_agent:av_address
	wire          msgdma_rx_mm_write_translator_avalon_universal_master_0_read;                              // msgdma_rx_mm_write_translator:uav_read -> msgdma_rx_mm_write_agent:av_read
	wire    [3:0] msgdma_rx_mm_write_translator_avalon_universal_master_0_byteenable;                        // msgdma_rx_mm_write_translator:uav_byteenable -> msgdma_rx_mm_write_agent:av_byteenable
	wire          msgdma_rx_mm_write_translator_avalon_universal_master_0_readdatavalid;                     // msgdma_rx_mm_write_agent:av_readdatavalid -> msgdma_rx_mm_write_translator:uav_readdatavalid
	wire          msgdma_rx_mm_write_translator_avalon_universal_master_0_lock;                              // msgdma_rx_mm_write_translator:uav_lock -> msgdma_rx_mm_write_agent:av_lock
	wire          msgdma_rx_mm_write_translator_avalon_universal_master_0_write;                             // msgdma_rx_mm_write_translator:uav_write -> msgdma_rx_mm_write_agent:av_write
	wire   [31:0] msgdma_rx_mm_write_translator_avalon_universal_master_0_writedata;                         // msgdma_rx_mm_write_translator:uav_writedata -> msgdma_rx_mm_write_agent:av_writedata
	wire    [2:0] msgdma_rx_mm_write_translator_avalon_universal_master_0_burstcount;                        // msgdma_rx_mm_write_translator:uav_burstcount -> msgdma_rx_mm_write_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                                     // rsp_mux_003:src_valid -> msgdma_rx_mm_write_agent:rp_valid
	wire  [120:0] rsp_mux_003_src_data;                                                                      // rsp_mux_003:src_data -> msgdma_rx_mm_write_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                                     // msgdma_rx_mm_write_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [20:0] rsp_mux_003_src_channel;                                                                   // rsp_mux_003:src_channel -> msgdma_rx_mm_write_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                             // rsp_mux_003:src_startofpacket -> msgdma_rx_mm_write_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                               // rsp_mux_003:src_endofpacket -> msgdma_rx_mm_write_agent:rp_endofpacket
	wire          msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_waitrequest;         // msgdma_tx_descriptor_read_master_agent:av_waitrequest -> msgdma_tx_descriptor_read_master_translator:uav_waitrequest
	wire   [31:0] msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_readdata;            // msgdma_tx_descriptor_read_master_agent:av_readdata -> msgdma_tx_descriptor_read_master_translator:uav_readdata
	wire          msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_debugaccess;         // msgdma_tx_descriptor_read_master_translator:uav_debugaccess -> msgdma_tx_descriptor_read_master_agent:av_debugaccess
	wire   [28:0] msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_address;             // msgdma_tx_descriptor_read_master_translator:uav_address -> msgdma_tx_descriptor_read_master_agent:av_address
	wire          msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_read;                // msgdma_tx_descriptor_read_master_translator:uav_read -> msgdma_tx_descriptor_read_master_agent:av_read
	wire    [3:0] msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_byteenable;          // msgdma_tx_descriptor_read_master_translator:uav_byteenable -> msgdma_tx_descriptor_read_master_agent:av_byteenable
	wire          msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_readdatavalid;       // msgdma_tx_descriptor_read_master_agent:av_readdatavalid -> msgdma_tx_descriptor_read_master_translator:uav_readdatavalid
	wire          msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_lock;                // msgdma_tx_descriptor_read_master_translator:uav_lock -> msgdma_tx_descriptor_read_master_agent:av_lock
	wire          msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_write;               // msgdma_tx_descriptor_read_master_translator:uav_write -> msgdma_tx_descriptor_read_master_agent:av_write
	wire   [31:0] msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_writedata;           // msgdma_tx_descriptor_read_master_translator:uav_writedata -> msgdma_tx_descriptor_read_master_agent:av_writedata
	wire    [2:0] msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_burstcount;          // msgdma_tx_descriptor_read_master_translator:uav_burstcount -> msgdma_tx_descriptor_read_master_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                                     // rsp_mux_004:src_valid -> msgdma_tx_descriptor_read_master_agent:rp_valid
	wire  [120:0] rsp_mux_004_src_data;                                                                      // rsp_mux_004:src_data -> msgdma_tx_descriptor_read_master_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                                     // msgdma_tx_descriptor_read_master_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [20:0] rsp_mux_004_src_channel;                                                                   // rsp_mux_004:src_channel -> msgdma_tx_descriptor_read_master_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                             // rsp_mux_004:src_startofpacket -> msgdma_tx_descriptor_read_master_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                               // rsp_mux_004:src_endofpacket -> msgdma_tx_descriptor_read_master_agent:rp_endofpacket
	wire          msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_waitrequest;         // msgdma_rx_descriptor_read_master_agent:av_waitrequest -> msgdma_rx_descriptor_read_master_translator:uav_waitrequest
	wire   [31:0] msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_readdata;            // msgdma_rx_descriptor_read_master_agent:av_readdata -> msgdma_rx_descriptor_read_master_translator:uav_readdata
	wire          msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_debugaccess;         // msgdma_rx_descriptor_read_master_translator:uav_debugaccess -> msgdma_rx_descriptor_read_master_agent:av_debugaccess
	wire   [28:0] msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_address;             // msgdma_rx_descriptor_read_master_translator:uav_address -> msgdma_rx_descriptor_read_master_agent:av_address
	wire          msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_read;                // msgdma_rx_descriptor_read_master_translator:uav_read -> msgdma_rx_descriptor_read_master_agent:av_read
	wire    [3:0] msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_byteenable;          // msgdma_rx_descriptor_read_master_translator:uav_byteenable -> msgdma_rx_descriptor_read_master_agent:av_byteenable
	wire          msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_readdatavalid;       // msgdma_rx_descriptor_read_master_agent:av_readdatavalid -> msgdma_rx_descriptor_read_master_translator:uav_readdatavalid
	wire          msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_lock;                // msgdma_rx_descriptor_read_master_translator:uav_lock -> msgdma_rx_descriptor_read_master_agent:av_lock
	wire          msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_write;               // msgdma_rx_descriptor_read_master_translator:uav_write -> msgdma_rx_descriptor_read_master_agent:av_write
	wire   [31:0] msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_writedata;           // msgdma_rx_descriptor_read_master_translator:uav_writedata -> msgdma_rx_descriptor_read_master_agent:av_writedata
	wire    [2:0] msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_burstcount;          // msgdma_rx_descriptor_read_master_translator:uav_burstcount -> msgdma_rx_descriptor_read_master_agent:av_burstcount
	wire          rsp_mux_005_src_valid;                                                                     // rsp_mux_005:src_valid -> msgdma_rx_descriptor_read_master_agent:rp_valid
	wire  [120:0] rsp_mux_005_src_data;                                                                      // rsp_mux_005:src_data -> msgdma_rx_descriptor_read_master_agent:rp_data
	wire          rsp_mux_005_src_ready;                                                                     // msgdma_rx_descriptor_read_master_agent:rp_ready -> rsp_mux_005:src_ready
	wire   [20:0] rsp_mux_005_src_channel;                                                                   // rsp_mux_005:src_channel -> msgdma_rx_descriptor_read_master_agent:rp_channel
	wire          rsp_mux_005_src_startofpacket;                                                             // rsp_mux_005:src_startofpacket -> msgdma_rx_descriptor_read_master_agent:rp_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                               // rsp_mux_005:src_endofpacket -> msgdma_rx_descriptor_read_master_agent:rp_endofpacket
	wire          msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_debugaccess;        // msgdma_tx_descriptor_write_master_translator:uav_debugaccess -> msgdma_tx_descriptor_write_master_agent:av_debugaccess
	wire   [28:0] msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_address;            // msgdma_tx_descriptor_write_master_translator:uav_address -> msgdma_tx_descriptor_write_master_agent:av_address
	wire          msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_read;               // msgdma_tx_descriptor_write_master_translator:uav_read -> msgdma_tx_descriptor_write_master_agent:av_read
	wire    [3:0] msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_byteenable;         // msgdma_tx_descriptor_write_master_translator:uav_byteenable -> msgdma_tx_descriptor_write_master_agent:av_byteenable
	wire          msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_readdatavalid;      // msgdma_tx_descriptor_write_master_agent:av_readdatavalid -> msgdma_tx_descriptor_write_master_translator:uav_readdatavalid
	wire          msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_waitrequest;        // msgdma_tx_descriptor_write_master_agent:av_waitrequest -> msgdma_tx_descriptor_write_master_translator:uav_waitrequest
	wire   [31:0] msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_readdata;           // msgdma_tx_descriptor_write_master_agent:av_readdata -> msgdma_tx_descriptor_write_master_translator:uav_readdata
	wire    [1:0] msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_response;           // msgdma_tx_descriptor_write_master_agent:av_response -> msgdma_tx_descriptor_write_master_translator:uav_response
	wire          msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_lock;               // msgdma_tx_descriptor_write_master_translator:uav_lock -> msgdma_tx_descriptor_write_master_agent:av_lock
	wire          msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_write;              // msgdma_tx_descriptor_write_master_translator:uav_write -> msgdma_tx_descriptor_write_master_agent:av_write
	wire   [31:0] msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_writedata;          // msgdma_tx_descriptor_write_master_translator:uav_writedata -> msgdma_tx_descriptor_write_master_agent:av_writedata
	wire          msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_writeresponsevalid; // msgdma_tx_descriptor_write_master_agent:av_writeresponsevalid -> msgdma_tx_descriptor_write_master_translator:uav_writeresponsevalid
	wire    [2:0] msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_burstcount;         // msgdma_tx_descriptor_write_master_translator:uav_burstcount -> msgdma_tx_descriptor_write_master_agent:av_burstcount
	wire          rsp_mux_006_src_valid;                                                                     // rsp_mux_006:src_valid -> msgdma_tx_descriptor_write_master_agent:rp_valid
	wire  [120:0] rsp_mux_006_src_data;                                                                      // rsp_mux_006:src_data -> msgdma_tx_descriptor_write_master_agent:rp_data
	wire          rsp_mux_006_src_ready;                                                                     // msgdma_tx_descriptor_write_master_agent:rp_ready -> rsp_mux_006:src_ready
	wire   [20:0] rsp_mux_006_src_channel;                                                                   // rsp_mux_006:src_channel -> msgdma_tx_descriptor_write_master_agent:rp_channel
	wire          rsp_mux_006_src_startofpacket;                                                             // rsp_mux_006:src_startofpacket -> msgdma_tx_descriptor_write_master_agent:rp_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                               // rsp_mux_006:src_endofpacket -> msgdma_tx_descriptor_write_master_agent:rp_endofpacket
	wire          msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_debugaccess;        // msgdma_rx_descriptor_write_master_translator:uav_debugaccess -> msgdma_rx_descriptor_write_master_agent:av_debugaccess
	wire   [28:0] msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_address;            // msgdma_rx_descriptor_write_master_translator:uav_address -> msgdma_rx_descriptor_write_master_agent:av_address
	wire          msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_read;               // msgdma_rx_descriptor_write_master_translator:uav_read -> msgdma_rx_descriptor_write_master_agent:av_read
	wire    [3:0] msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_byteenable;         // msgdma_rx_descriptor_write_master_translator:uav_byteenable -> msgdma_rx_descriptor_write_master_agent:av_byteenable
	wire          msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_readdatavalid;      // msgdma_rx_descriptor_write_master_agent:av_readdatavalid -> msgdma_rx_descriptor_write_master_translator:uav_readdatavalid
	wire          msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_waitrequest;        // msgdma_rx_descriptor_write_master_agent:av_waitrequest -> msgdma_rx_descriptor_write_master_translator:uav_waitrequest
	wire   [31:0] msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_readdata;           // msgdma_rx_descriptor_write_master_agent:av_readdata -> msgdma_rx_descriptor_write_master_translator:uav_readdata
	wire    [1:0] msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_response;           // msgdma_rx_descriptor_write_master_agent:av_response -> msgdma_rx_descriptor_write_master_translator:uav_response
	wire          msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_lock;               // msgdma_rx_descriptor_write_master_translator:uav_lock -> msgdma_rx_descriptor_write_master_agent:av_lock
	wire          msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_write;              // msgdma_rx_descriptor_write_master_translator:uav_write -> msgdma_rx_descriptor_write_master_agent:av_write
	wire   [31:0] msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_writedata;          // msgdma_rx_descriptor_write_master_translator:uav_writedata -> msgdma_rx_descriptor_write_master_agent:av_writedata
	wire          msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_writeresponsevalid; // msgdma_rx_descriptor_write_master_agent:av_writeresponsevalid -> msgdma_rx_descriptor_write_master_translator:uav_writeresponsevalid
	wire    [2:0] msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_burstcount;         // msgdma_rx_descriptor_write_master_translator:uav_burstcount -> msgdma_rx_descriptor_write_master_agent:av_burstcount
	wire          rsp_mux_007_src_valid;                                                                     // rsp_mux_007:src_valid -> msgdma_rx_descriptor_write_master_agent:rp_valid
	wire  [120:0] rsp_mux_007_src_data;                                                                      // rsp_mux_007:src_data -> msgdma_rx_descriptor_write_master_agent:rp_data
	wire          rsp_mux_007_src_ready;                                                                     // msgdma_rx_descriptor_write_master_agent:rp_ready -> rsp_mux_007:src_ready
	wire   [20:0] rsp_mux_007_src_channel;                                                                   // rsp_mux_007:src_channel -> msgdma_rx_descriptor_write_master_agent:rp_channel
	wire          rsp_mux_007_src_startofpacket;                                                             // rsp_mux_007:src_startofpacket -> msgdma_rx_descriptor_write_master_agent:rp_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                               // rsp_mux_007:src_endofpacket -> msgdma_rx_descriptor_write_master_agent:rp_endofpacket
	wire   [31:0] ddr3_ram_avl_agent_m0_readdata;                                                            // ddr3_ram_avl_translator:uav_readdata -> ddr3_ram_avl_agent:m0_readdata
	wire          ddr3_ram_avl_agent_m0_waitrequest;                                                         // ddr3_ram_avl_translator:uav_waitrequest -> ddr3_ram_avl_agent:m0_waitrequest
	wire          ddr3_ram_avl_agent_m0_debugaccess;                                                         // ddr3_ram_avl_agent:m0_debugaccess -> ddr3_ram_avl_translator:uav_debugaccess
	wire   [28:0] ddr3_ram_avl_agent_m0_address;                                                             // ddr3_ram_avl_agent:m0_address -> ddr3_ram_avl_translator:uav_address
	wire    [3:0] ddr3_ram_avl_agent_m0_byteenable;                                                          // ddr3_ram_avl_agent:m0_byteenable -> ddr3_ram_avl_translator:uav_byteenable
	wire          ddr3_ram_avl_agent_m0_read;                                                                // ddr3_ram_avl_agent:m0_read -> ddr3_ram_avl_translator:uav_read
	wire          ddr3_ram_avl_agent_m0_readdatavalid;                                                       // ddr3_ram_avl_translator:uav_readdatavalid -> ddr3_ram_avl_agent:m0_readdatavalid
	wire          ddr3_ram_avl_agent_m0_lock;                                                                // ddr3_ram_avl_agent:m0_lock -> ddr3_ram_avl_translator:uav_lock
	wire   [31:0] ddr3_ram_avl_agent_m0_writedata;                                                           // ddr3_ram_avl_agent:m0_writedata -> ddr3_ram_avl_translator:uav_writedata
	wire          ddr3_ram_avl_agent_m0_write;                                                               // ddr3_ram_avl_agent:m0_write -> ddr3_ram_avl_translator:uav_write
	wire    [4:0] ddr3_ram_avl_agent_m0_burstcount;                                                          // ddr3_ram_avl_agent:m0_burstcount -> ddr3_ram_avl_translator:uav_burstcount
	wire          ddr3_ram_avl_agent_rf_source_valid;                                                        // ddr3_ram_avl_agent:rf_source_valid -> ddr3_ram_avl_agent_rsp_fifo:in_valid
	wire  [121:0] ddr3_ram_avl_agent_rf_source_data;                                                         // ddr3_ram_avl_agent:rf_source_data -> ddr3_ram_avl_agent_rsp_fifo:in_data
	wire          ddr3_ram_avl_agent_rf_source_ready;                                                        // ddr3_ram_avl_agent_rsp_fifo:in_ready -> ddr3_ram_avl_agent:rf_source_ready
	wire          ddr3_ram_avl_agent_rf_source_startofpacket;                                                // ddr3_ram_avl_agent:rf_source_startofpacket -> ddr3_ram_avl_agent_rsp_fifo:in_startofpacket
	wire          ddr3_ram_avl_agent_rf_source_endofpacket;                                                  // ddr3_ram_avl_agent:rf_source_endofpacket -> ddr3_ram_avl_agent_rsp_fifo:in_endofpacket
	wire          ddr3_ram_avl_agent_rsp_fifo_out_valid;                                                     // ddr3_ram_avl_agent_rsp_fifo:out_valid -> ddr3_ram_avl_agent:rf_sink_valid
	wire  [121:0] ddr3_ram_avl_agent_rsp_fifo_out_data;                                                      // ddr3_ram_avl_agent_rsp_fifo:out_data -> ddr3_ram_avl_agent:rf_sink_data
	wire          ddr3_ram_avl_agent_rsp_fifo_out_ready;                                                     // ddr3_ram_avl_agent:rf_sink_ready -> ddr3_ram_avl_agent_rsp_fifo:out_ready
	wire          ddr3_ram_avl_agent_rsp_fifo_out_startofpacket;                                             // ddr3_ram_avl_agent_rsp_fifo:out_startofpacket -> ddr3_ram_avl_agent:rf_sink_startofpacket
	wire          ddr3_ram_avl_agent_rsp_fifo_out_endofpacket;                                               // ddr3_ram_avl_agent_rsp_fifo:out_endofpacket -> ddr3_ram_avl_agent:rf_sink_endofpacket
	wire          ddr3_ram_avl_agent_rdata_fifo_src_valid;                                                   // ddr3_ram_avl_agent:rdata_fifo_src_valid -> ddr3_ram_avl_agent_rdata_fifo:in_valid
	wire   [33:0] ddr3_ram_avl_agent_rdata_fifo_src_data;                                                    // ddr3_ram_avl_agent:rdata_fifo_src_data -> ddr3_ram_avl_agent_rdata_fifo:in_data
	wire          ddr3_ram_avl_agent_rdata_fifo_src_ready;                                                   // ddr3_ram_avl_agent_rdata_fifo:in_ready -> ddr3_ram_avl_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                         // cmd_mux:src_valid -> ddr3_ram_avl_agent:cp_valid
	wire  [120:0] cmd_mux_src_data;                                                                          // cmd_mux:src_data -> ddr3_ram_avl_agent:cp_data
	wire          cmd_mux_src_ready;                                                                         // ddr3_ram_avl_agent:cp_ready -> cmd_mux:src_ready
	wire   [20:0] cmd_mux_src_channel;                                                                       // cmd_mux:src_channel -> ddr3_ram_avl_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                                 // cmd_mux:src_startofpacket -> ddr3_ram_avl_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                   // cmd_mux:src_endofpacket -> ddr3_ram_avl_agent:cp_endofpacket
	wire   [31:0] ext_flash_avl_csr_agent_m0_readdata;                                                       // ext_flash_avl_csr_translator:uav_readdata -> ext_flash_avl_csr_agent:m0_readdata
	wire          ext_flash_avl_csr_agent_m0_waitrequest;                                                    // ext_flash_avl_csr_translator:uav_waitrequest -> ext_flash_avl_csr_agent:m0_waitrequest
	wire          ext_flash_avl_csr_agent_m0_debugaccess;                                                    // ext_flash_avl_csr_agent:m0_debugaccess -> ext_flash_avl_csr_translator:uav_debugaccess
	wire   [28:0] ext_flash_avl_csr_agent_m0_address;                                                        // ext_flash_avl_csr_agent:m0_address -> ext_flash_avl_csr_translator:uav_address
	wire    [3:0] ext_flash_avl_csr_agent_m0_byteenable;                                                     // ext_flash_avl_csr_agent:m0_byteenable -> ext_flash_avl_csr_translator:uav_byteenable
	wire          ext_flash_avl_csr_agent_m0_read;                                                           // ext_flash_avl_csr_agent:m0_read -> ext_flash_avl_csr_translator:uav_read
	wire          ext_flash_avl_csr_agent_m0_readdatavalid;                                                  // ext_flash_avl_csr_translator:uav_readdatavalid -> ext_flash_avl_csr_agent:m0_readdatavalid
	wire          ext_flash_avl_csr_agent_m0_lock;                                                           // ext_flash_avl_csr_agent:m0_lock -> ext_flash_avl_csr_translator:uav_lock
	wire   [31:0] ext_flash_avl_csr_agent_m0_writedata;                                                      // ext_flash_avl_csr_agent:m0_writedata -> ext_flash_avl_csr_translator:uav_writedata
	wire          ext_flash_avl_csr_agent_m0_write;                                                          // ext_flash_avl_csr_agent:m0_write -> ext_flash_avl_csr_translator:uav_write
	wire    [2:0] ext_flash_avl_csr_agent_m0_burstcount;                                                     // ext_flash_avl_csr_agent:m0_burstcount -> ext_flash_avl_csr_translator:uav_burstcount
	wire          ext_flash_avl_csr_agent_rf_source_valid;                                                   // ext_flash_avl_csr_agent:rf_source_valid -> ext_flash_avl_csr_agent_rsp_fifo:in_valid
	wire  [121:0] ext_flash_avl_csr_agent_rf_source_data;                                                    // ext_flash_avl_csr_agent:rf_source_data -> ext_flash_avl_csr_agent_rsp_fifo:in_data
	wire          ext_flash_avl_csr_agent_rf_source_ready;                                                   // ext_flash_avl_csr_agent_rsp_fifo:in_ready -> ext_flash_avl_csr_agent:rf_source_ready
	wire          ext_flash_avl_csr_agent_rf_source_startofpacket;                                           // ext_flash_avl_csr_agent:rf_source_startofpacket -> ext_flash_avl_csr_agent_rsp_fifo:in_startofpacket
	wire          ext_flash_avl_csr_agent_rf_source_endofpacket;                                             // ext_flash_avl_csr_agent:rf_source_endofpacket -> ext_flash_avl_csr_agent_rsp_fifo:in_endofpacket
	wire          ext_flash_avl_csr_agent_rsp_fifo_out_valid;                                                // ext_flash_avl_csr_agent_rsp_fifo:out_valid -> ext_flash_avl_csr_agent:rf_sink_valid
	wire  [121:0] ext_flash_avl_csr_agent_rsp_fifo_out_data;                                                 // ext_flash_avl_csr_agent_rsp_fifo:out_data -> ext_flash_avl_csr_agent:rf_sink_data
	wire          ext_flash_avl_csr_agent_rsp_fifo_out_ready;                                                // ext_flash_avl_csr_agent:rf_sink_ready -> ext_flash_avl_csr_agent_rsp_fifo:out_ready
	wire          ext_flash_avl_csr_agent_rsp_fifo_out_startofpacket;                                        // ext_flash_avl_csr_agent_rsp_fifo:out_startofpacket -> ext_flash_avl_csr_agent:rf_sink_startofpacket
	wire          ext_flash_avl_csr_agent_rsp_fifo_out_endofpacket;                                          // ext_flash_avl_csr_agent_rsp_fifo:out_endofpacket -> ext_flash_avl_csr_agent:rf_sink_endofpacket
	wire          ext_flash_avl_csr_agent_rdata_fifo_src_valid;                                              // ext_flash_avl_csr_agent:rdata_fifo_src_valid -> ext_flash_avl_csr_agent_rdata_fifo:in_valid
	wire   [33:0] ext_flash_avl_csr_agent_rdata_fifo_src_data;                                               // ext_flash_avl_csr_agent:rdata_fifo_src_data -> ext_flash_avl_csr_agent_rdata_fifo:in_data
	wire          ext_flash_avl_csr_agent_rdata_fifo_src_ready;                                              // ext_flash_avl_csr_agent_rdata_fifo:in_ready -> ext_flash_avl_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                                     // cmd_mux_001:src_valid -> ext_flash_avl_csr_agent:cp_valid
	wire  [120:0] cmd_mux_001_src_data;                                                                      // cmd_mux_001:src_data -> ext_flash_avl_csr_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                     // ext_flash_avl_csr_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [20:0] cmd_mux_001_src_channel;                                                                   // cmd_mux_001:src_channel -> ext_flash_avl_csr_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                             // cmd_mux_001:src_startofpacket -> ext_flash_avl_csr_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                               // cmd_mux_001:src_endofpacket -> ext_flash_avl_csr_agent:cp_endofpacket
	wire   [31:0] ext_flash_avl_mem_agent_m0_readdata;                                                       // ext_flash_avl_mem_translator:uav_readdata -> ext_flash_avl_mem_agent:m0_readdata
	wire          ext_flash_avl_mem_agent_m0_waitrequest;                                                    // ext_flash_avl_mem_translator:uav_waitrequest -> ext_flash_avl_mem_agent:m0_waitrequest
	wire          ext_flash_avl_mem_agent_m0_debugaccess;                                                    // ext_flash_avl_mem_agent:m0_debugaccess -> ext_flash_avl_mem_translator:uav_debugaccess
	wire   [28:0] ext_flash_avl_mem_agent_m0_address;                                                        // ext_flash_avl_mem_agent:m0_address -> ext_flash_avl_mem_translator:uav_address
	wire    [3:0] ext_flash_avl_mem_agent_m0_byteenable;                                                     // ext_flash_avl_mem_agent:m0_byteenable -> ext_flash_avl_mem_translator:uav_byteenable
	wire          ext_flash_avl_mem_agent_m0_read;                                                           // ext_flash_avl_mem_agent:m0_read -> ext_flash_avl_mem_translator:uav_read
	wire          ext_flash_avl_mem_agent_m0_readdatavalid;                                                  // ext_flash_avl_mem_translator:uav_readdatavalid -> ext_flash_avl_mem_agent:m0_readdatavalid
	wire          ext_flash_avl_mem_agent_m0_lock;                                                           // ext_flash_avl_mem_agent:m0_lock -> ext_flash_avl_mem_translator:uav_lock
	wire   [31:0] ext_flash_avl_mem_agent_m0_writedata;                                                      // ext_flash_avl_mem_agent:m0_writedata -> ext_flash_avl_mem_translator:uav_writedata
	wire          ext_flash_avl_mem_agent_m0_write;                                                          // ext_flash_avl_mem_agent:m0_write -> ext_flash_avl_mem_translator:uav_write
	wire    [8:0] ext_flash_avl_mem_agent_m0_burstcount;                                                     // ext_flash_avl_mem_agent:m0_burstcount -> ext_flash_avl_mem_translator:uav_burstcount
	wire          ext_flash_avl_mem_agent_rf_source_valid;                                                   // ext_flash_avl_mem_agent:rf_source_valid -> ext_flash_avl_mem_agent_rsp_fifo:in_valid
	wire  [121:0] ext_flash_avl_mem_agent_rf_source_data;                                                    // ext_flash_avl_mem_agent:rf_source_data -> ext_flash_avl_mem_agent_rsp_fifo:in_data
	wire          ext_flash_avl_mem_agent_rf_source_ready;                                                   // ext_flash_avl_mem_agent_rsp_fifo:in_ready -> ext_flash_avl_mem_agent:rf_source_ready
	wire          ext_flash_avl_mem_agent_rf_source_startofpacket;                                           // ext_flash_avl_mem_agent:rf_source_startofpacket -> ext_flash_avl_mem_agent_rsp_fifo:in_startofpacket
	wire          ext_flash_avl_mem_agent_rf_source_endofpacket;                                             // ext_flash_avl_mem_agent:rf_source_endofpacket -> ext_flash_avl_mem_agent_rsp_fifo:in_endofpacket
	wire          ext_flash_avl_mem_agent_rsp_fifo_out_valid;                                                // ext_flash_avl_mem_agent_rsp_fifo:out_valid -> ext_flash_avl_mem_agent:rf_sink_valid
	wire  [121:0] ext_flash_avl_mem_agent_rsp_fifo_out_data;                                                 // ext_flash_avl_mem_agent_rsp_fifo:out_data -> ext_flash_avl_mem_agent:rf_sink_data
	wire          ext_flash_avl_mem_agent_rsp_fifo_out_ready;                                                // ext_flash_avl_mem_agent:rf_sink_ready -> ext_flash_avl_mem_agent_rsp_fifo:out_ready
	wire          ext_flash_avl_mem_agent_rsp_fifo_out_startofpacket;                                        // ext_flash_avl_mem_agent_rsp_fifo:out_startofpacket -> ext_flash_avl_mem_agent:rf_sink_startofpacket
	wire          ext_flash_avl_mem_agent_rsp_fifo_out_endofpacket;                                          // ext_flash_avl_mem_agent_rsp_fifo:out_endofpacket -> ext_flash_avl_mem_agent:rf_sink_endofpacket
	wire          ext_flash_avl_mem_agent_rdata_fifo_src_valid;                                              // ext_flash_avl_mem_agent:rdata_fifo_src_valid -> ext_flash_avl_mem_agent_rdata_fifo:in_valid
	wire   [33:0] ext_flash_avl_mem_agent_rdata_fifo_src_data;                                               // ext_flash_avl_mem_agent:rdata_fifo_src_data -> ext_flash_avl_mem_agent_rdata_fifo:in_data
	wire          ext_flash_avl_mem_agent_rdata_fifo_src_ready;                                              // ext_flash_avl_mem_agent_rdata_fifo:in_ready -> ext_flash_avl_mem_agent:rdata_fifo_src_ready
	wire   [31:0] eth_tse_control_port_agent_m0_readdata;                                                    // eth_tse_control_port_translator:uav_readdata -> eth_tse_control_port_agent:m0_readdata
	wire          eth_tse_control_port_agent_m0_waitrequest;                                                 // eth_tse_control_port_translator:uav_waitrequest -> eth_tse_control_port_agent:m0_waitrequest
	wire          eth_tse_control_port_agent_m0_debugaccess;                                                 // eth_tse_control_port_agent:m0_debugaccess -> eth_tse_control_port_translator:uav_debugaccess
	wire   [28:0] eth_tse_control_port_agent_m0_address;                                                     // eth_tse_control_port_agent:m0_address -> eth_tse_control_port_translator:uav_address
	wire    [3:0] eth_tse_control_port_agent_m0_byteenable;                                                  // eth_tse_control_port_agent:m0_byteenable -> eth_tse_control_port_translator:uav_byteenable
	wire          eth_tse_control_port_agent_m0_read;                                                        // eth_tse_control_port_agent:m0_read -> eth_tse_control_port_translator:uav_read
	wire          eth_tse_control_port_agent_m0_readdatavalid;                                               // eth_tse_control_port_translator:uav_readdatavalid -> eth_tse_control_port_agent:m0_readdatavalid
	wire          eth_tse_control_port_agent_m0_lock;                                                        // eth_tse_control_port_agent:m0_lock -> eth_tse_control_port_translator:uav_lock
	wire   [31:0] eth_tse_control_port_agent_m0_writedata;                                                   // eth_tse_control_port_agent:m0_writedata -> eth_tse_control_port_translator:uav_writedata
	wire          eth_tse_control_port_agent_m0_write;                                                       // eth_tse_control_port_agent:m0_write -> eth_tse_control_port_translator:uav_write
	wire    [2:0] eth_tse_control_port_agent_m0_burstcount;                                                  // eth_tse_control_port_agent:m0_burstcount -> eth_tse_control_port_translator:uav_burstcount
	wire          eth_tse_control_port_agent_rf_source_valid;                                                // eth_tse_control_port_agent:rf_source_valid -> eth_tse_control_port_agent_rsp_fifo:in_valid
	wire  [121:0] eth_tse_control_port_agent_rf_source_data;                                                 // eth_tse_control_port_agent:rf_source_data -> eth_tse_control_port_agent_rsp_fifo:in_data
	wire          eth_tse_control_port_agent_rf_source_ready;                                                // eth_tse_control_port_agent_rsp_fifo:in_ready -> eth_tse_control_port_agent:rf_source_ready
	wire          eth_tse_control_port_agent_rf_source_startofpacket;                                        // eth_tse_control_port_agent:rf_source_startofpacket -> eth_tse_control_port_agent_rsp_fifo:in_startofpacket
	wire          eth_tse_control_port_agent_rf_source_endofpacket;                                          // eth_tse_control_port_agent:rf_source_endofpacket -> eth_tse_control_port_agent_rsp_fifo:in_endofpacket
	wire          eth_tse_control_port_agent_rsp_fifo_out_valid;                                             // eth_tse_control_port_agent_rsp_fifo:out_valid -> eth_tse_control_port_agent:rf_sink_valid
	wire  [121:0] eth_tse_control_port_agent_rsp_fifo_out_data;                                              // eth_tse_control_port_agent_rsp_fifo:out_data -> eth_tse_control_port_agent:rf_sink_data
	wire          eth_tse_control_port_agent_rsp_fifo_out_ready;                                             // eth_tse_control_port_agent:rf_sink_ready -> eth_tse_control_port_agent_rsp_fifo:out_ready
	wire          eth_tse_control_port_agent_rsp_fifo_out_startofpacket;                                     // eth_tse_control_port_agent_rsp_fifo:out_startofpacket -> eth_tse_control_port_agent:rf_sink_startofpacket
	wire          eth_tse_control_port_agent_rsp_fifo_out_endofpacket;                                       // eth_tse_control_port_agent_rsp_fifo:out_endofpacket -> eth_tse_control_port_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                     // cmd_mux_003:src_valid -> eth_tse_control_port_agent:cp_valid
	wire  [120:0] cmd_mux_003_src_data;                                                                      // cmd_mux_003:src_data -> eth_tse_control_port_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                     // eth_tse_control_port_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [20:0] cmd_mux_003_src_channel;                                                                   // cmd_mux_003:src_channel -> eth_tse_control_port_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                             // cmd_mux_003:src_startofpacket -> eth_tse_control_port_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                               // cmd_mux_003:src_endofpacket -> eth_tse_control_port_agent:cp_endofpacket
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                                     // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                                  // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                                  // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [28:0] sysid_control_slave_agent_m0_address;                                                      // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                                   // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                                         // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                                // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                                         // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                                    // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                                        // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                                   // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                                 // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [121:0] sysid_control_slave_agent_rf_source_data;                                                  // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                                 // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                                         // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                           // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                              // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [121:0] sysid_control_slave_agent_rsp_fifo_out_data;                                               // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                              // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                                      // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                                        // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                     // cmd_mux_004:src_valid -> sysid_control_slave_agent:cp_valid
	wire  [120:0] cmd_mux_004_src_data;                                                                      // cmd_mux_004:src_data -> sysid_control_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                     // sysid_control_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [20:0] cmd_mux_004_src_channel;                                                                   // cmd_mux_004:src_channel -> sysid_control_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                             // cmd_mux_004:src_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                               // cmd_mux_004:src_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire   [31:0] msgdma_tx_csr_agent_m0_readdata;                                                           // msgdma_tx_csr_translator:uav_readdata -> msgdma_tx_csr_agent:m0_readdata
	wire          msgdma_tx_csr_agent_m0_waitrequest;                                                        // msgdma_tx_csr_translator:uav_waitrequest -> msgdma_tx_csr_agent:m0_waitrequest
	wire          msgdma_tx_csr_agent_m0_debugaccess;                                                        // msgdma_tx_csr_agent:m0_debugaccess -> msgdma_tx_csr_translator:uav_debugaccess
	wire   [28:0] msgdma_tx_csr_agent_m0_address;                                                            // msgdma_tx_csr_agent:m0_address -> msgdma_tx_csr_translator:uav_address
	wire    [3:0] msgdma_tx_csr_agent_m0_byteenable;                                                         // msgdma_tx_csr_agent:m0_byteenable -> msgdma_tx_csr_translator:uav_byteenable
	wire          msgdma_tx_csr_agent_m0_read;                                                               // msgdma_tx_csr_agent:m0_read -> msgdma_tx_csr_translator:uav_read
	wire          msgdma_tx_csr_agent_m0_readdatavalid;                                                      // msgdma_tx_csr_translator:uav_readdatavalid -> msgdma_tx_csr_agent:m0_readdatavalid
	wire          msgdma_tx_csr_agent_m0_lock;                                                               // msgdma_tx_csr_agent:m0_lock -> msgdma_tx_csr_translator:uav_lock
	wire   [31:0] msgdma_tx_csr_agent_m0_writedata;                                                          // msgdma_tx_csr_agent:m0_writedata -> msgdma_tx_csr_translator:uav_writedata
	wire          msgdma_tx_csr_agent_m0_write;                                                              // msgdma_tx_csr_agent:m0_write -> msgdma_tx_csr_translator:uav_write
	wire    [2:0] msgdma_tx_csr_agent_m0_burstcount;                                                         // msgdma_tx_csr_agent:m0_burstcount -> msgdma_tx_csr_translator:uav_burstcount
	wire          msgdma_tx_csr_agent_rf_source_valid;                                                       // msgdma_tx_csr_agent:rf_source_valid -> msgdma_tx_csr_agent_rsp_fifo:in_valid
	wire  [121:0] msgdma_tx_csr_agent_rf_source_data;                                                        // msgdma_tx_csr_agent:rf_source_data -> msgdma_tx_csr_agent_rsp_fifo:in_data
	wire          msgdma_tx_csr_agent_rf_source_ready;                                                       // msgdma_tx_csr_agent_rsp_fifo:in_ready -> msgdma_tx_csr_agent:rf_source_ready
	wire          msgdma_tx_csr_agent_rf_source_startofpacket;                                               // msgdma_tx_csr_agent:rf_source_startofpacket -> msgdma_tx_csr_agent_rsp_fifo:in_startofpacket
	wire          msgdma_tx_csr_agent_rf_source_endofpacket;                                                 // msgdma_tx_csr_agent:rf_source_endofpacket -> msgdma_tx_csr_agent_rsp_fifo:in_endofpacket
	wire          msgdma_tx_csr_agent_rsp_fifo_out_valid;                                                    // msgdma_tx_csr_agent_rsp_fifo:out_valid -> msgdma_tx_csr_agent:rf_sink_valid
	wire  [121:0] msgdma_tx_csr_agent_rsp_fifo_out_data;                                                     // msgdma_tx_csr_agent_rsp_fifo:out_data -> msgdma_tx_csr_agent:rf_sink_data
	wire          msgdma_tx_csr_agent_rsp_fifo_out_ready;                                                    // msgdma_tx_csr_agent:rf_sink_ready -> msgdma_tx_csr_agent_rsp_fifo:out_ready
	wire          msgdma_tx_csr_agent_rsp_fifo_out_startofpacket;                                            // msgdma_tx_csr_agent_rsp_fifo:out_startofpacket -> msgdma_tx_csr_agent:rf_sink_startofpacket
	wire          msgdma_tx_csr_agent_rsp_fifo_out_endofpacket;                                              // msgdma_tx_csr_agent_rsp_fifo:out_endofpacket -> msgdma_tx_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                     // cmd_mux_005:src_valid -> msgdma_tx_csr_agent:cp_valid
	wire  [120:0] cmd_mux_005_src_data;                                                                      // cmd_mux_005:src_data -> msgdma_tx_csr_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                     // msgdma_tx_csr_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [20:0] cmd_mux_005_src_channel;                                                                   // cmd_mux_005:src_channel -> msgdma_tx_csr_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                             // cmd_mux_005:src_startofpacket -> msgdma_tx_csr_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                               // cmd_mux_005:src_endofpacket -> msgdma_tx_csr_agent:cp_endofpacket
	wire   [31:0] msgdma_rx_csr_agent_m0_readdata;                                                           // msgdma_rx_csr_translator:uav_readdata -> msgdma_rx_csr_agent:m0_readdata
	wire          msgdma_rx_csr_agent_m0_waitrequest;                                                        // msgdma_rx_csr_translator:uav_waitrequest -> msgdma_rx_csr_agent:m0_waitrequest
	wire          msgdma_rx_csr_agent_m0_debugaccess;                                                        // msgdma_rx_csr_agent:m0_debugaccess -> msgdma_rx_csr_translator:uav_debugaccess
	wire   [28:0] msgdma_rx_csr_agent_m0_address;                                                            // msgdma_rx_csr_agent:m0_address -> msgdma_rx_csr_translator:uav_address
	wire    [3:0] msgdma_rx_csr_agent_m0_byteenable;                                                         // msgdma_rx_csr_agent:m0_byteenable -> msgdma_rx_csr_translator:uav_byteenable
	wire          msgdma_rx_csr_agent_m0_read;                                                               // msgdma_rx_csr_agent:m0_read -> msgdma_rx_csr_translator:uav_read
	wire          msgdma_rx_csr_agent_m0_readdatavalid;                                                      // msgdma_rx_csr_translator:uav_readdatavalid -> msgdma_rx_csr_agent:m0_readdatavalid
	wire          msgdma_rx_csr_agent_m0_lock;                                                               // msgdma_rx_csr_agent:m0_lock -> msgdma_rx_csr_translator:uav_lock
	wire   [31:0] msgdma_rx_csr_agent_m0_writedata;                                                          // msgdma_rx_csr_agent:m0_writedata -> msgdma_rx_csr_translator:uav_writedata
	wire          msgdma_rx_csr_agent_m0_write;                                                              // msgdma_rx_csr_agent:m0_write -> msgdma_rx_csr_translator:uav_write
	wire    [2:0] msgdma_rx_csr_agent_m0_burstcount;                                                         // msgdma_rx_csr_agent:m0_burstcount -> msgdma_rx_csr_translator:uav_burstcount
	wire          msgdma_rx_csr_agent_rf_source_valid;                                                       // msgdma_rx_csr_agent:rf_source_valid -> msgdma_rx_csr_agent_rsp_fifo:in_valid
	wire  [121:0] msgdma_rx_csr_agent_rf_source_data;                                                        // msgdma_rx_csr_agent:rf_source_data -> msgdma_rx_csr_agent_rsp_fifo:in_data
	wire          msgdma_rx_csr_agent_rf_source_ready;                                                       // msgdma_rx_csr_agent_rsp_fifo:in_ready -> msgdma_rx_csr_agent:rf_source_ready
	wire          msgdma_rx_csr_agent_rf_source_startofpacket;                                               // msgdma_rx_csr_agent:rf_source_startofpacket -> msgdma_rx_csr_agent_rsp_fifo:in_startofpacket
	wire          msgdma_rx_csr_agent_rf_source_endofpacket;                                                 // msgdma_rx_csr_agent:rf_source_endofpacket -> msgdma_rx_csr_agent_rsp_fifo:in_endofpacket
	wire          msgdma_rx_csr_agent_rsp_fifo_out_valid;                                                    // msgdma_rx_csr_agent_rsp_fifo:out_valid -> msgdma_rx_csr_agent:rf_sink_valid
	wire  [121:0] msgdma_rx_csr_agent_rsp_fifo_out_data;                                                     // msgdma_rx_csr_agent_rsp_fifo:out_data -> msgdma_rx_csr_agent:rf_sink_data
	wire          msgdma_rx_csr_agent_rsp_fifo_out_ready;                                                    // msgdma_rx_csr_agent:rf_sink_ready -> msgdma_rx_csr_agent_rsp_fifo:out_ready
	wire          msgdma_rx_csr_agent_rsp_fifo_out_startofpacket;                                            // msgdma_rx_csr_agent_rsp_fifo:out_startofpacket -> msgdma_rx_csr_agent:rf_sink_startofpacket
	wire          msgdma_rx_csr_agent_rsp_fifo_out_endofpacket;                                              // msgdma_rx_csr_agent_rsp_fifo:out_endofpacket -> msgdma_rx_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                     // cmd_mux_006:src_valid -> msgdma_rx_csr_agent:cp_valid
	wire  [120:0] cmd_mux_006_src_data;                                                                      // cmd_mux_006:src_data -> msgdma_rx_csr_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                     // msgdma_rx_csr_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [20:0] cmd_mux_006_src_channel;                                                                   // cmd_mux_006:src_channel -> msgdma_rx_csr_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                             // cmd_mux_006:src_startofpacket -> msgdma_rx_csr_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                               // cmd_mux_006:src_endofpacket -> msgdma_rx_csr_agent:cp_endofpacket
	wire   [31:0] onchip_flash_csr_agent_m0_readdata;                                                        // onchip_flash_csr_translator:uav_readdata -> onchip_flash_csr_agent:m0_readdata
	wire          onchip_flash_csr_agent_m0_waitrequest;                                                     // onchip_flash_csr_translator:uav_waitrequest -> onchip_flash_csr_agent:m0_waitrequest
	wire          onchip_flash_csr_agent_m0_debugaccess;                                                     // onchip_flash_csr_agent:m0_debugaccess -> onchip_flash_csr_translator:uav_debugaccess
	wire   [28:0] onchip_flash_csr_agent_m0_address;                                                         // onchip_flash_csr_agent:m0_address -> onchip_flash_csr_translator:uav_address
	wire    [3:0] onchip_flash_csr_agent_m0_byteenable;                                                      // onchip_flash_csr_agent:m0_byteenable -> onchip_flash_csr_translator:uav_byteenable
	wire          onchip_flash_csr_agent_m0_read;                                                            // onchip_flash_csr_agent:m0_read -> onchip_flash_csr_translator:uav_read
	wire          onchip_flash_csr_agent_m0_readdatavalid;                                                   // onchip_flash_csr_translator:uav_readdatavalid -> onchip_flash_csr_agent:m0_readdatavalid
	wire          onchip_flash_csr_agent_m0_lock;                                                            // onchip_flash_csr_agent:m0_lock -> onchip_flash_csr_translator:uav_lock
	wire   [31:0] onchip_flash_csr_agent_m0_writedata;                                                       // onchip_flash_csr_agent:m0_writedata -> onchip_flash_csr_translator:uav_writedata
	wire          onchip_flash_csr_agent_m0_write;                                                           // onchip_flash_csr_agent:m0_write -> onchip_flash_csr_translator:uav_write
	wire    [2:0] onchip_flash_csr_agent_m0_burstcount;                                                      // onchip_flash_csr_agent:m0_burstcount -> onchip_flash_csr_translator:uav_burstcount
	wire          onchip_flash_csr_agent_rf_source_valid;                                                    // onchip_flash_csr_agent:rf_source_valid -> onchip_flash_csr_agent_rsp_fifo:in_valid
	wire  [121:0] onchip_flash_csr_agent_rf_source_data;                                                     // onchip_flash_csr_agent:rf_source_data -> onchip_flash_csr_agent_rsp_fifo:in_data
	wire          onchip_flash_csr_agent_rf_source_ready;                                                    // onchip_flash_csr_agent_rsp_fifo:in_ready -> onchip_flash_csr_agent:rf_source_ready
	wire          onchip_flash_csr_agent_rf_source_startofpacket;                                            // onchip_flash_csr_agent:rf_source_startofpacket -> onchip_flash_csr_agent_rsp_fifo:in_startofpacket
	wire          onchip_flash_csr_agent_rf_source_endofpacket;                                              // onchip_flash_csr_agent:rf_source_endofpacket -> onchip_flash_csr_agent_rsp_fifo:in_endofpacket
	wire          onchip_flash_csr_agent_rsp_fifo_out_valid;                                                 // onchip_flash_csr_agent_rsp_fifo:out_valid -> onchip_flash_csr_agent:rf_sink_valid
	wire  [121:0] onchip_flash_csr_agent_rsp_fifo_out_data;                                                  // onchip_flash_csr_agent_rsp_fifo:out_data -> onchip_flash_csr_agent:rf_sink_data
	wire          onchip_flash_csr_agent_rsp_fifo_out_ready;                                                 // onchip_flash_csr_agent:rf_sink_ready -> onchip_flash_csr_agent_rsp_fifo:out_ready
	wire          onchip_flash_csr_agent_rsp_fifo_out_startofpacket;                                         // onchip_flash_csr_agent_rsp_fifo:out_startofpacket -> onchip_flash_csr_agent:rf_sink_startofpacket
	wire          onchip_flash_csr_agent_rsp_fifo_out_endofpacket;                                           // onchip_flash_csr_agent_rsp_fifo:out_endofpacket -> onchip_flash_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                     // cmd_mux_007:src_valid -> onchip_flash_csr_agent:cp_valid
	wire  [120:0] cmd_mux_007_src_data;                                                                      // cmd_mux_007:src_data -> onchip_flash_csr_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                     // onchip_flash_csr_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [20:0] cmd_mux_007_src_channel;                                                                   // cmd_mux_007:src_channel -> onchip_flash_csr_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                             // cmd_mux_007:src_startofpacket -> onchip_flash_csr_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                               // cmd_mux_007:src_endofpacket -> onchip_flash_csr_agent:cp_endofpacket
	wire   [31:0] udp_generator_csr_agent_m0_readdata;                                                       // udp_generator_csr_translator:uav_readdata -> udp_generator_csr_agent:m0_readdata
	wire          udp_generator_csr_agent_m0_waitrequest;                                                    // udp_generator_csr_translator:uav_waitrequest -> udp_generator_csr_agent:m0_waitrequest
	wire          udp_generator_csr_agent_m0_debugaccess;                                                    // udp_generator_csr_agent:m0_debugaccess -> udp_generator_csr_translator:uav_debugaccess
	wire   [28:0] udp_generator_csr_agent_m0_address;                                                        // udp_generator_csr_agent:m0_address -> udp_generator_csr_translator:uav_address
	wire    [3:0] udp_generator_csr_agent_m0_byteenable;                                                     // udp_generator_csr_agent:m0_byteenable -> udp_generator_csr_translator:uav_byteenable
	wire          udp_generator_csr_agent_m0_read;                                                           // udp_generator_csr_agent:m0_read -> udp_generator_csr_translator:uav_read
	wire          udp_generator_csr_agent_m0_readdatavalid;                                                  // udp_generator_csr_translator:uav_readdatavalid -> udp_generator_csr_agent:m0_readdatavalid
	wire          udp_generator_csr_agent_m0_lock;                                                           // udp_generator_csr_agent:m0_lock -> udp_generator_csr_translator:uav_lock
	wire   [31:0] udp_generator_csr_agent_m0_writedata;                                                      // udp_generator_csr_agent:m0_writedata -> udp_generator_csr_translator:uav_writedata
	wire          udp_generator_csr_agent_m0_write;                                                          // udp_generator_csr_agent:m0_write -> udp_generator_csr_translator:uav_write
	wire    [2:0] udp_generator_csr_agent_m0_burstcount;                                                     // udp_generator_csr_agent:m0_burstcount -> udp_generator_csr_translator:uav_burstcount
	wire          udp_generator_csr_agent_rf_source_valid;                                                   // udp_generator_csr_agent:rf_source_valid -> udp_generator_csr_agent_rsp_fifo:in_valid
	wire  [121:0] udp_generator_csr_agent_rf_source_data;                                                    // udp_generator_csr_agent:rf_source_data -> udp_generator_csr_agent_rsp_fifo:in_data
	wire          udp_generator_csr_agent_rf_source_ready;                                                   // udp_generator_csr_agent_rsp_fifo:in_ready -> udp_generator_csr_agent:rf_source_ready
	wire          udp_generator_csr_agent_rf_source_startofpacket;                                           // udp_generator_csr_agent:rf_source_startofpacket -> udp_generator_csr_agent_rsp_fifo:in_startofpacket
	wire          udp_generator_csr_agent_rf_source_endofpacket;                                             // udp_generator_csr_agent:rf_source_endofpacket -> udp_generator_csr_agent_rsp_fifo:in_endofpacket
	wire          udp_generator_csr_agent_rsp_fifo_out_valid;                                                // udp_generator_csr_agent_rsp_fifo:out_valid -> udp_generator_csr_agent:rf_sink_valid
	wire  [121:0] udp_generator_csr_agent_rsp_fifo_out_data;                                                 // udp_generator_csr_agent_rsp_fifo:out_data -> udp_generator_csr_agent:rf_sink_data
	wire          udp_generator_csr_agent_rsp_fifo_out_ready;                                                // udp_generator_csr_agent:rf_sink_ready -> udp_generator_csr_agent_rsp_fifo:out_ready
	wire          udp_generator_csr_agent_rsp_fifo_out_startofpacket;                                        // udp_generator_csr_agent_rsp_fifo:out_startofpacket -> udp_generator_csr_agent:rf_sink_startofpacket
	wire          udp_generator_csr_agent_rsp_fifo_out_endofpacket;                                          // udp_generator_csr_agent_rsp_fifo:out_endofpacket -> udp_generator_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                     // cmd_mux_008:src_valid -> udp_generator_csr_agent:cp_valid
	wire  [120:0] cmd_mux_008_src_data;                                                                      // cmd_mux_008:src_data -> udp_generator_csr_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                     // udp_generator_csr_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [20:0] cmd_mux_008_src_channel;                                                                   // cmd_mux_008:src_channel -> udp_generator_csr_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                             // cmd_mux_008:src_startofpacket -> udp_generator_csr_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                               // cmd_mux_008:src_endofpacket -> udp_generator_csr_agent:cp_endofpacket
	wire   [31:0] sensor_interface_csr_agent_m0_readdata;                                                    // sensor_interface_csr_translator:uav_readdata -> sensor_interface_csr_agent:m0_readdata
	wire          sensor_interface_csr_agent_m0_waitrequest;                                                 // sensor_interface_csr_translator:uav_waitrequest -> sensor_interface_csr_agent:m0_waitrequest
	wire          sensor_interface_csr_agent_m0_debugaccess;                                                 // sensor_interface_csr_agent:m0_debugaccess -> sensor_interface_csr_translator:uav_debugaccess
	wire   [28:0] sensor_interface_csr_agent_m0_address;                                                     // sensor_interface_csr_agent:m0_address -> sensor_interface_csr_translator:uav_address
	wire    [3:0] sensor_interface_csr_agent_m0_byteenable;                                                  // sensor_interface_csr_agent:m0_byteenable -> sensor_interface_csr_translator:uav_byteenable
	wire          sensor_interface_csr_agent_m0_read;                                                        // sensor_interface_csr_agent:m0_read -> sensor_interface_csr_translator:uav_read
	wire          sensor_interface_csr_agent_m0_readdatavalid;                                               // sensor_interface_csr_translator:uav_readdatavalid -> sensor_interface_csr_agent:m0_readdatavalid
	wire          sensor_interface_csr_agent_m0_lock;                                                        // sensor_interface_csr_agent:m0_lock -> sensor_interface_csr_translator:uav_lock
	wire   [31:0] sensor_interface_csr_agent_m0_writedata;                                                   // sensor_interface_csr_agent:m0_writedata -> sensor_interface_csr_translator:uav_writedata
	wire          sensor_interface_csr_agent_m0_write;                                                       // sensor_interface_csr_agent:m0_write -> sensor_interface_csr_translator:uav_write
	wire    [2:0] sensor_interface_csr_agent_m0_burstcount;                                                  // sensor_interface_csr_agent:m0_burstcount -> sensor_interface_csr_translator:uav_burstcount
	wire          sensor_interface_csr_agent_rf_source_valid;                                                // sensor_interface_csr_agent:rf_source_valid -> sensor_interface_csr_agent_rsp_fifo:in_valid
	wire  [121:0] sensor_interface_csr_agent_rf_source_data;                                                 // sensor_interface_csr_agent:rf_source_data -> sensor_interface_csr_agent_rsp_fifo:in_data
	wire          sensor_interface_csr_agent_rf_source_ready;                                                // sensor_interface_csr_agent_rsp_fifo:in_ready -> sensor_interface_csr_agent:rf_source_ready
	wire          sensor_interface_csr_agent_rf_source_startofpacket;                                        // sensor_interface_csr_agent:rf_source_startofpacket -> sensor_interface_csr_agent_rsp_fifo:in_startofpacket
	wire          sensor_interface_csr_agent_rf_source_endofpacket;                                          // sensor_interface_csr_agent:rf_source_endofpacket -> sensor_interface_csr_agent_rsp_fifo:in_endofpacket
	wire          sensor_interface_csr_agent_rsp_fifo_out_valid;                                             // sensor_interface_csr_agent_rsp_fifo:out_valid -> sensor_interface_csr_agent:rf_sink_valid
	wire  [121:0] sensor_interface_csr_agent_rsp_fifo_out_data;                                              // sensor_interface_csr_agent_rsp_fifo:out_data -> sensor_interface_csr_agent:rf_sink_data
	wire          sensor_interface_csr_agent_rsp_fifo_out_ready;                                             // sensor_interface_csr_agent:rf_sink_ready -> sensor_interface_csr_agent_rsp_fifo:out_ready
	wire          sensor_interface_csr_agent_rsp_fifo_out_startofpacket;                                     // sensor_interface_csr_agent_rsp_fifo:out_startofpacket -> sensor_interface_csr_agent:rf_sink_startofpacket
	wire          sensor_interface_csr_agent_rsp_fifo_out_endofpacket;                                       // sensor_interface_csr_agent_rsp_fifo:out_endofpacket -> sensor_interface_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                     // cmd_mux_009:src_valid -> sensor_interface_csr_agent:cp_valid
	wire  [120:0] cmd_mux_009_src_data;                                                                      // cmd_mux_009:src_data -> sensor_interface_csr_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                     // sensor_interface_csr_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [20:0] cmd_mux_009_src_channel;                                                                   // cmd_mux_009:src_channel -> sensor_interface_csr_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                             // cmd_mux_009:src_startofpacket -> sensor_interface_csr_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                               // cmd_mux_009:src_endofpacket -> sensor_interface_csr_agent:cp_endofpacket
	wire   [31:0] onchip_flash_data_agent_m0_readdata;                                                       // onchip_flash_data_translator:uav_readdata -> onchip_flash_data_agent:m0_readdata
	wire          onchip_flash_data_agent_m0_waitrequest;                                                    // onchip_flash_data_translator:uav_waitrequest -> onchip_flash_data_agent:m0_waitrequest
	wire          onchip_flash_data_agent_m0_debugaccess;                                                    // onchip_flash_data_agent:m0_debugaccess -> onchip_flash_data_translator:uav_debugaccess
	wire   [28:0] onchip_flash_data_agent_m0_address;                                                        // onchip_flash_data_agent:m0_address -> onchip_flash_data_translator:uav_address
	wire    [3:0] onchip_flash_data_agent_m0_byteenable;                                                     // onchip_flash_data_agent:m0_byteenable -> onchip_flash_data_translator:uav_byteenable
	wire          onchip_flash_data_agent_m0_read;                                                           // onchip_flash_data_agent:m0_read -> onchip_flash_data_translator:uav_read
	wire          onchip_flash_data_agent_m0_readdatavalid;                                                  // onchip_flash_data_translator:uav_readdatavalid -> onchip_flash_data_agent:m0_readdatavalid
	wire          onchip_flash_data_agent_m0_lock;                                                           // onchip_flash_data_agent:m0_lock -> onchip_flash_data_translator:uav_lock
	wire   [31:0] onchip_flash_data_agent_m0_writedata;                                                      // onchip_flash_data_agent:m0_writedata -> onchip_flash_data_translator:uav_writedata
	wire          onchip_flash_data_agent_m0_write;                                                          // onchip_flash_data_agent:m0_write -> onchip_flash_data_translator:uav_write
	wire    [5:0] onchip_flash_data_agent_m0_burstcount;                                                     // onchip_flash_data_agent:m0_burstcount -> onchip_flash_data_translator:uav_burstcount
	wire          onchip_flash_data_agent_rf_source_valid;                                                   // onchip_flash_data_agent:rf_source_valid -> onchip_flash_data_agent_rsp_fifo:in_valid
	wire  [121:0] onchip_flash_data_agent_rf_source_data;                                                    // onchip_flash_data_agent:rf_source_data -> onchip_flash_data_agent_rsp_fifo:in_data
	wire          onchip_flash_data_agent_rf_source_ready;                                                   // onchip_flash_data_agent_rsp_fifo:in_ready -> onchip_flash_data_agent:rf_source_ready
	wire          onchip_flash_data_agent_rf_source_startofpacket;                                           // onchip_flash_data_agent:rf_source_startofpacket -> onchip_flash_data_agent_rsp_fifo:in_startofpacket
	wire          onchip_flash_data_agent_rf_source_endofpacket;                                             // onchip_flash_data_agent:rf_source_endofpacket -> onchip_flash_data_agent_rsp_fifo:in_endofpacket
	wire          onchip_flash_data_agent_rsp_fifo_out_valid;                                                // onchip_flash_data_agent_rsp_fifo:out_valid -> onchip_flash_data_agent:rf_sink_valid
	wire  [121:0] onchip_flash_data_agent_rsp_fifo_out_data;                                                 // onchip_flash_data_agent_rsp_fifo:out_data -> onchip_flash_data_agent:rf_sink_data
	wire          onchip_flash_data_agent_rsp_fifo_out_ready;                                                // onchip_flash_data_agent:rf_sink_ready -> onchip_flash_data_agent_rsp_fifo:out_ready
	wire          onchip_flash_data_agent_rsp_fifo_out_startofpacket;                                        // onchip_flash_data_agent_rsp_fifo:out_startofpacket -> onchip_flash_data_agent:rf_sink_startofpacket
	wire          onchip_flash_data_agent_rsp_fifo_out_endofpacket;                                          // onchip_flash_data_agent_rsp_fifo:out_endofpacket -> onchip_flash_data_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                     // cmd_mux_010:src_valid -> onchip_flash_data_agent:cp_valid
	wire  [120:0] cmd_mux_010_src_data;                                                                      // cmd_mux_010:src_data -> onchip_flash_data_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                     // onchip_flash_data_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [20:0] cmd_mux_010_src_channel;                                                                   // cmd_mux_010:src_channel -> onchip_flash_data_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                             // cmd_mux_010:src_startofpacket -> onchip_flash_data_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                               // cmd_mux_010:src_endofpacket -> onchip_flash_data_agent:cp_endofpacket
	wire   [31:0] cpu_debug_mem_slave_agent_m0_readdata;                                                     // cpu_debug_mem_slave_translator:uav_readdata -> cpu_debug_mem_slave_agent:m0_readdata
	wire          cpu_debug_mem_slave_agent_m0_waitrequest;                                                  // cpu_debug_mem_slave_translator:uav_waitrequest -> cpu_debug_mem_slave_agent:m0_waitrequest
	wire          cpu_debug_mem_slave_agent_m0_debugaccess;                                                  // cpu_debug_mem_slave_agent:m0_debugaccess -> cpu_debug_mem_slave_translator:uav_debugaccess
	wire   [28:0] cpu_debug_mem_slave_agent_m0_address;                                                      // cpu_debug_mem_slave_agent:m0_address -> cpu_debug_mem_slave_translator:uav_address
	wire    [3:0] cpu_debug_mem_slave_agent_m0_byteenable;                                                   // cpu_debug_mem_slave_agent:m0_byteenable -> cpu_debug_mem_slave_translator:uav_byteenable
	wire          cpu_debug_mem_slave_agent_m0_read;                                                         // cpu_debug_mem_slave_agent:m0_read -> cpu_debug_mem_slave_translator:uav_read
	wire          cpu_debug_mem_slave_agent_m0_readdatavalid;                                                // cpu_debug_mem_slave_translator:uav_readdatavalid -> cpu_debug_mem_slave_agent:m0_readdatavalid
	wire          cpu_debug_mem_slave_agent_m0_lock;                                                         // cpu_debug_mem_slave_agent:m0_lock -> cpu_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpu_debug_mem_slave_agent_m0_writedata;                                                    // cpu_debug_mem_slave_agent:m0_writedata -> cpu_debug_mem_slave_translator:uav_writedata
	wire          cpu_debug_mem_slave_agent_m0_write;                                                        // cpu_debug_mem_slave_agent:m0_write -> cpu_debug_mem_slave_translator:uav_write
	wire    [2:0] cpu_debug_mem_slave_agent_m0_burstcount;                                                   // cpu_debug_mem_slave_agent:m0_burstcount -> cpu_debug_mem_slave_translator:uav_burstcount
	wire          cpu_debug_mem_slave_agent_rf_source_valid;                                                 // cpu_debug_mem_slave_agent:rf_source_valid -> cpu_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [121:0] cpu_debug_mem_slave_agent_rf_source_data;                                                  // cpu_debug_mem_slave_agent:rf_source_data -> cpu_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpu_debug_mem_slave_agent_rf_source_ready;                                                 // cpu_debug_mem_slave_agent_rsp_fifo:in_ready -> cpu_debug_mem_slave_agent:rf_source_ready
	wire          cpu_debug_mem_slave_agent_rf_source_startofpacket;                                         // cpu_debug_mem_slave_agent:rf_source_startofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpu_debug_mem_slave_agent_rf_source_endofpacket;                                           // cpu_debug_mem_slave_agent:rf_source_endofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_valid;                                              // cpu_debug_mem_slave_agent_rsp_fifo:out_valid -> cpu_debug_mem_slave_agent:rf_sink_valid
	wire  [121:0] cpu_debug_mem_slave_agent_rsp_fifo_out_data;                                               // cpu_debug_mem_slave_agent_rsp_fifo:out_data -> cpu_debug_mem_slave_agent:rf_sink_data
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_ready;                                              // cpu_debug_mem_slave_agent:rf_sink_ready -> cpu_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                      // cpu_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> cpu_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                        // cpu_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> cpu_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                                     // cmd_mux_011:src_valid -> cpu_debug_mem_slave_agent:cp_valid
	wire  [120:0] cmd_mux_011_src_data;                                                                      // cmd_mux_011:src_data -> cpu_debug_mem_slave_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                     // cpu_debug_mem_slave_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [20:0] cmd_mux_011_src_channel;                                                                   // cmd_mux_011:src_channel -> cpu_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                             // cmd_mux_011:src_startofpacket -> cpu_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                               // cmd_mux_011:src_endofpacket -> cpu_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] msgdma_tx_prefetcher_csr_agent_m0_readdata;                                                // msgdma_tx_prefetcher_csr_translator:uav_readdata -> msgdma_tx_prefetcher_csr_agent:m0_readdata
	wire          msgdma_tx_prefetcher_csr_agent_m0_waitrequest;                                             // msgdma_tx_prefetcher_csr_translator:uav_waitrequest -> msgdma_tx_prefetcher_csr_agent:m0_waitrequest
	wire          msgdma_tx_prefetcher_csr_agent_m0_debugaccess;                                             // msgdma_tx_prefetcher_csr_agent:m0_debugaccess -> msgdma_tx_prefetcher_csr_translator:uav_debugaccess
	wire   [28:0] msgdma_tx_prefetcher_csr_agent_m0_address;                                                 // msgdma_tx_prefetcher_csr_agent:m0_address -> msgdma_tx_prefetcher_csr_translator:uav_address
	wire    [3:0] msgdma_tx_prefetcher_csr_agent_m0_byteenable;                                              // msgdma_tx_prefetcher_csr_agent:m0_byteenable -> msgdma_tx_prefetcher_csr_translator:uav_byteenable
	wire          msgdma_tx_prefetcher_csr_agent_m0_read;                                                    // msgdma_tx_prefetcher_csr_agent:m0_read -> msgdma_tx_prefetcher_csr_translator:uav_read
	wire          msgdma_tx_prefetcher_csr_agent_m0_readdatavalid;                                           // msgdma_tx_prefetcher_csr_translator:uav_readdatavalid -> msgdma_tx_prefetcher_csr_agent:m0_readdatavalid
	wire          msgdma_tx_prefetcher_csr_agent_m0_lock;                                                    // msgdma_tx_prefetcher_csr_agent:m0_lock -> msgdma_tx_prefetcher_csr_translator:uav_lock
	wire   [31:0] msgdma_tx_prefetcher_csr_agent_m0_writedata;                                               // msgdma_tx_prefetcher_csr_agent:m0_writedata -> msgdma_tx_prefetcher_csr_translator:uav_writedata
	wire          msgdma_tx_prefetcher_csr_agent_m0_write;                                                   // msgdma_tx_prefetcher_csr_agent:m0_write -> msgdma_tx_prefetcher_csr_translator:uav_write
	wire    [2:0] msgdma_tx_prefetcher_csr_agent_m0_burstcount;                                              // msgdma_tx_prefetcher_csr_agent:m0_burstcount -> msgdma_tx_prefetcher_csr_translator:uav_burstcount
	wire          msgdma_tx_prefetcher_csr_agent_rf_source_valid;                                            // msgdma_tx_prefetcher_csr_agent:rf_source_valid -> msgdma_tx_prefetcher_csr_agent_rsp_fifo:in_valid
	wire  [121:0] msgdma_tx_prefetcher_csr_agent_rf_source_data;                                             // msgdma_tx_prefetcher_csr_agent:rf_source_data -> msgdma_tx_prefetcher_csr_agent_rsp_fifo:in_data
	wire          msgdma_tx_prefetcher_csr_agent_rf_source_ready;                                            // msgdma_tx_prefetcher_csr_agent_rsp_fifo:in_ready -> msgdma_tx_prefetcher_csr_agent:rf_source_ready
	wire          msgdma_tx_prefetcher_csr_agent_rf_source_startofpacket;                                    // msgdma_tx_prefetcher_csr_agent:rf_source_startofpacket -> msgdma_tx_prefetcher_csr_agent_rsp_fifo:in_startofpacket
	wire          msgdma_tx_prefetcher_csr_agent_rf_source_endofpacket;                                      // msgdma_tx_prefetcher_csr_agent:rf_source_endofpacket -> msgdma_tx_prefetcher_csr_agent_rsp_fifo:in_endofpacket
	wire          msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_valid;                                         // msgdma_tx_prefetcher_csr_agent_rsp_fifo:out_valid -> msgdma_tx_prefetcher_csr_agent:rf_sink_valid
	wire  [121:0] msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_data;                                          // msgdma_tx_prefetcher_csr_agent_rsp_fifo:out_data -> msgdma_tx_prefetcher_csr_agent:rf_sink_data
	wire          msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_ready;                                         // msgdma_tx_prefetcher_csr_agent:rf_sink_ready -> msgdma_tx_prefetcher_csr_agent_rsp_fifo:out_ready
	wire          msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_startofpacket;                                 // msgdma_tx_prefetcher_csr_agent_rsp_fifo:out_startofpacket -> msgdma_tx_prefetcher_csr_agent:rf_sink_startofpacket
	wire          msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_endofpacket;                                   // msgdma_tx_prefetcher_csr_agent_rsp_fifo:out_endofpacket -> msgdma_tx_prefetcher_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                                     // cmd_mux_012:src_valid -> msgdma_tx_prefetcher_csr_agent:cp_valid
	wire  [120:0] cmd_mux_012_src_data;                                                                      // cmd_mux_012:src_data -> msgdma_tx_prefetcher_csr_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                     // msgdma_tx_prefetcher_csr_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [20:0] cmd_mux_012_src_channel;                                                                   // cmd_mux_012:src_channel -> msgdma_tx_prefetcher_csr_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                             // cmd_mux_012:src_startofpacket -> msgdma_tx_prefetcher_csr_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                               // cmd_mux_012:src_endofpacket -> msgdma_tx_prefetcher_csr_agent:cp_endofpacket
	wire   [31:0] msgdma_rx_prefetcher_csr_agent_m0_readdata;                                                // msgdma_rx_prefetcher_csr_translator:uav_readdata -> msgdma_rx_prefetcher_csr_agent:m0_readdata
	wire          msgdma_rx_prefetcher_csr_agent_m0_waitrequest;                                             // msgdma_rx_prefetcher_csr_translator:uav_waitrequest -> msgdma_rx_prefetcher_csr_agent:m0_waitrequest
	wire          msgdma_rx_prefetcher_csr_agent_m0_debugaccess;                                             // msgdma_rx_prefetcher_csr_agent:m0_debugaccess -> msgdma_rx_prefetcher_csr_translator:uav_debugaccess
	wire   [28:0] msgdma_rx_prefetcher_csr_agent_m0_address;                                                 // msgdma_rx_prefetcher_csr_agent:m0_address -> msgdma_rx_prefetcher_csr_translator:uav_address
	wire    [3:0] msgdma_rx_prefetcher_csr_agent_m0_byteenable;                                              // msgdma_rx_prefetcher_csr_agent:m0_byteenable -> msgdma_rx_prefetcher_csr_translator:uav_byteenable
	wire          msgdma_rx_prefetcher_csr_agent_m0_read;                                                    // msgdma_rx_prefetcher_csr_agent:m0_read -> msgdma_rx_prefetcher_csr_translator:uav_read
	wire          msgdma_rx_prefetcher_csr_agent_m0_readdatavalid;                                           // msgdma_rx_prefetcher_csr_translator:uav_readdatavalid -> msgdma_rx_prefetcher_csr_agent:m0_readdatavalid
	wire          msgdma_rx_prefetcher_csr_agent_m0_lock;                                                    // msgdma_rx_prefetcher_csr_agent:m0_lock -> msgdma_rx_prefetcher_csr_translator:uav_lock
	wire   [31:0] msgdma_rx_prefetcher_csr_agent_m0_writedata;                                               // msgdma_rx_prefetcher_csr_agent:m0_writedata -> msgdma_rx_prefetcher_csr_translator:uav_writedata
	wire          msgdma_rx_prefetcher_csr_agent_m0_write;                                                   // msgdma_rx_prefetcher_csr_agent:m0_write -> msgdma_rx_prefetcher_csr_translator:uav_write
	wire    [2:0] msgdma_rx_prefetcher_csr_agent_m0_burstcount;                                              // msgdma_rx_prefetcher_csr_agent:m0_burstcount -> msgdma_rx_prefetcher_csr_translator:uav_burstcount
	wire          msgdma_rx_prefetcher_csr_agent_rf_source_valid;                                            // msgdma_rx_prefetcher_csr_agent:rf_source_valid -> msgdma_rx_prefetcher_csr_agent_rsp_fifo:in_valid
	wire  [121:0] msgdma_rx_prefetcher_csr_agent_rf_source_data;                                             // msgdma_rx_prefetcher_csr_agent:rf_source_data -> msgdma_rx_prefetcher_csr_agent_rsp_fifo:in_data
	wire          msgdma_rx_prefetcher_csr_agent_rf_source_ready;                                            // msgdma_rx_prefetcher_csr_agent_rsp_fifo:in_ready -> msgdma_rx_prefetcher_csr_agent:rf_source_ready
	wire          msgdma_rx_prefetcher_csr_agent_rf_source_startofpacket;                                    // msgdma_rx_prefetcher_csr_agent:rf_source_startofpacket -> msgdma_rx_prefetcher_csr_agent_rsp_fifo:in_startofpacket
	wire          msgdma_rx_prefetcher_csr_agent_rf_source_endofpacket;                                      // msgdma_rx_prefetcher_csr_agent:rf_source_endofpacket -> msgdma_rx_prefetcher_csr_agent_rsp_fifo:in_endofpacket
	wire          msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_valid;                                         // msgdma_rx_prefetcher_csr_agent_rsp_fifo:out_valid -> msgdma_rx_prefetcher_csr_agent:rf_sink_valid
	wire  [121:0] msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_data;                                          // msgdma_rx_prefetcher_csr_agent_rsp_fifo:out_data -> msgdma_rx_prefetcher_csr_agent:rf_sink_data
	wire          msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_ready;                                         // msgdma_rx_prefetcher_csr_agent:rf_sink_ready -> msgdma_rx_prefetcher_csr_agent_rsp_fifo:out_ready
	wire          msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_startofpacket;                                 // msgdma_rx_prefetcher_csr_agent_rsp_fifo:out_startofpacket -> msgdma_rx_prefetcher_csr_agent:rf_sink_startofpacket
	wire          msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_endofpacket;                                   // msgdma_rx_prefetcher_csr_agent_rsp_fifo:out_endofpacket -> msgdma_rx_prefetcher_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                                     // cmd_mux_013:src_valid -> msgdma_rx_prefetcher_csr_agent:cp_valid
	wire  [120:0] cmd_mux_013_src_data;                                                                      // cmd_mux_013:src_data -> msgdma_rx_prefetcher_csr_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                     // msgdma_rx_prefetcher_csr_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [20:0] cmd_mux_013_src_channel;                                                                   // cmd_mux_013:src_channel -> msgdma_rx_prefetcher_csr_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                             // cmd_mux_013:src_startofpacket -> msgdma_rx_prefetcher_csr_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                               // cmd_mux_013:src_endofpacket -> msgdma_rx_prefetcher_csr_agent:cp_endofpacket
	wire   [31:0] descriptor_memory_s1_agent_m0_readdata;                                                    // descriptor_memory_s1_translator:uav_readdata -> descriptor_memory_s1_agent:m0_readdata
	wire          descriptor_memory_s1_agent_m0_waitrequest;                                                 // descriptor_memory_s1_translator:uav_waitrequest -> descriptor_memory_s1_agent:m0_waitrequest
	wire          descriptor_memory_s1_agent_m0_debugaccess;                                                 // descriptor_memory_s1_agent:m0_debugaccess -> descriptor_memory_s1_translator:uav_debugaccess
	wire   [28:0] descriptor_memory_s1_agent_m0_address;                                                     // descriptor_memory_s1_agent:m0_address -> descriptor_memory_s1_translator:uav_address
	wire    [3:0] descriptor_memory_s1_agent_m0_byteenable;                                                  // descriptor_memory_s1_agent:m0_byteenable -> descriptor_memory_s1_translator:uav_byteenable
	wire          descriptor_memory_s1_agent_m0_read;                                                        // descriptor_memory_s1_agent:m0_read -> descriptor_memory_s1_translator:uav_read
	wire          descriptor_memory_s1_agent_m0_readdatavalid;                                               // descriptor_memory_s1_translator:uav_readdatavalid -> descriptor_memory_s1_agent:m0_readdatavalid
	wire          descriptor_memory_s1_agent_m0_lock;                                                        // descriptor_memory_s1_agent:m0_lock -> descriptor_memory_s1_translator:uav_lock
	wire   [31:0] descriptor_memory_s1_agent_m0_writedata;                                                   // descriptor_memory_s1_agent:m0_writedata -> descriptor_memory_s1_translator:uav_writedata
	wire          descriptor_memory_s1_agent_m0_write;                                                       // descriptor_memory_s1_agent:m0_write -> descriptor_memory_s1_translator:uav_write
	wire    [2:0] descriptor_memory_s1_agent_m0_burstcount;                                                  // descriptor_memory_s1_agent:m0_burstcount -> descriptor_memory_s1_translator:uav_burstcount
	wire          descriptor_memory_s1_agent_rf_source_valid;                                                // descriptor_memory_s1_agent:rf_source_valid -> descriptor_memory_s1_agent_rsp_fifo:in_valid
	wire  [121:0] descriptor_memory_s1_agent_rf_source_data;                                                 // descriptor_memory_s1_agent:rf_source_data -> descriptor_memory_s1_agent_rsp_fifo:in_data
	wire          descriptor_memory_s1_agent_rf_source_ready;                                                // descriptor_memory_s1_agent_rsp_fifo:in_ready -> descriptor_memory_s1_agent:rf_source_ready
	wire          descriptor_memory_s1_agent_rf_source_startofpacket;                                        // descriptor_memory_s1_agent:rf_source_startofpacket -> descriptor_memory_s1_agent_rsp_fifo:in_startofpacket
	wire          descriptor_memory_s1_agent_rf_source_endofpacket;                                          // descriptor_memory_s1_agent:rf_source_endofpacket -> descriptor_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          descriptor_memory_s1_agent_rsp_fifo_out_valid;                                             // descriptor_memory_s1_agent_rsp_fifo:out_valid -> descriptor_memory_s1_agent:rf_sink_valid
	wire  [121:0] descriptor_memory_s1_agent_rsp_fifo_out_data;                                              // descriptor_memory_s1_agent_rsp_fifo:out_data -> descriptor_memory_s1_agent:rf_sink_data
	wire          descriptor_memory_s1_agent_rsp_fifo_out_ready;                                             // descriptor_memory_s1_agent:rf_sink_ready -> descriptor_memory_s1_agent_rsp_fifo:out_ready
	wire          descriptor_memory_s1_agent_rsp_fifo_out_startofpacket;                                     // descriptor_memory_s1_agent_rsp_fifo:out_startofpacket -> descriptor_memory_s1_agent:rf_sink_startofpacket
	wire          descriptor_memory_s1_agent_rsp_fifo_out_endofpacket;                                       // descriptor_memory_s1_agent_rsp_fifo:out_endofpacket -> descriptor_memory_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                                     // cmd_mux_014:src_valid -> descriptor_memory_s1_agent:cp_valid
	wire  [120:0] cmd_mux_014_src_data;                                                                      // cmd_mux_014:src_data -> descriptor_memory_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                                     // descriptor_memory_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [20:0] cmd_mux_014_src_channel;                                                                   // cmd_mux_014:src_channel -> descriptor_memory_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                             // cmd_mux_014:src_startofpacket -> descriptor_memory_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                               // cmd_mux_014:src_endofpacket -> descriptor_memory_s1_agent:cp_endofpacket
	wire   [31:0] sys_clk_timer_s1_agent_m0_readdata;                                                        // sys_clk_timer_s1_translator:uav_readdata -> sys_clk_timer_s1_agent:m0_readdata
	wire          sys_clk_timer_s1_agent_m0_waitrequest;                                                     // sys_clk_timer_s1_translator:uav_waitrequest -> sys_clk_timer_s1_agent:m0_waitrequest
	wire          sys_clk_timer_s1_agent_m0_debugaccess;                                                     // sys_clk_timer_s1_agent:m0_debugaccess -> sys_clk_timer_s1_translator:uav_debugaccess
	wire   [28:0] sys_clk_timer_s1_agent_m0_address;                                                         // sys_clk_timer_s1_agent:m0_address -> sys_clk_timer_s1_translator:uav_address
	wire    [3:0] sys_clk_timer_s1_agent_m0_byteenable;                                                      // sys_clk_timer_s1_agent:m0_byteenable -> sys_clk_timer_s1_translator:uav_byteenable
	wire          sys_clk_timer_s1_agent_m0_read;                                                            // sys_clk_timer_s1_agent:m0_read -> sys_clk_timer_s1_translator:uav_read
	wire          sys_clk_timer_s1_agent_m0_readdatavalid;                                                   // sys_clk_timer_s1_translator:uav_readdatavalid -> sys_clk_timer_s1_agent:m0_readdatavalid
	wire          sys_clk_timer_s1_agent_m0_lock;                                                            // sys_clk_timer_s1_agent:m0_lock -> sys_clk_timer_s1_translator:uav_lock
	wire   [31:0] sys_clk_timer_s1_agent_m0_writedata;                                                       // sys_clk_timer_s1_agent:m0_writedata -> sys_clk_timer_s1_translator:uav_writedata
	wire          sys_clk_timer_s1_agent_m0_write;                                                           // sys_clk_timer_s1_agent:m0_write -> sys_clk_timer_s1_translator:uav_write
	wire    [2:0] sys_clk_timer_s1_agent_m0_burstcount;                                                      // sys_clk_timer_s1_agent:m0_burstcount -> sys_clk_timer_s1_translator:uav_burstcount
	wire          sys_clk_timer_s1_agent_rf_source_valid;                                                    // sys_clk_timer_s1_agent:rf_source_valid -> sys_clk_timer_s1_agent_rsp_fifo:in_valid
	wire  [121:0] sys_clk_timer_s1_agent_rf_source_data;                                                     // sys_clk_timer_s1_agent:rf_source_data -> sys_clk_timer_s1_agent_rsp_fifo:in_data
	wire          sys_clk_timer_s1_agent_rf_source_ready;                                                    // sys_clk_timer_s1_agent_rsp_fifo:in_ready -> sys_clk_timer_s1_agent:rf_source_ready
	wire          sys_clk_timer_s1_agent_rf_source_startofpacket;                                            // sys_clk_timer_s1_agent:rf_source_startofpacket -> sys_clk_timer_s1_agent_rsp_fifo:in_startofpacket
	wire          sys_clk_timer_s1_agent_rf_source_endofpacket;                                              // sys_clk_timer_s1_agent:rf_source_endofpacket -> sys_clk_timer_s1_agent_rsp_fifo:in_endofpacket
	wire          sys_clk_timer_s1_agent_rsp_fifo_out_valid;                                                 // sys_clk_timer_s1_agent_rsp_fifo:out_valid -> sys_clk_timer_s1_agent:rf_sink_valid
	wire  [121:0] sys_clk_timer_s1_agent_rsp_fifo_out_data;                                                  // sys_clk_timer_s1_agent_rsp_fifo:out_data -> sys_clk_timer_s1_agent:rf_sink_data
	wire          sys_clk_timer_s1_agent_rsp_fifo_out_ready;                                                 // sys_clk_timer_s1_agent:rf_sink_ready -> sys_clk_timer_s1_agent_rsp_fifo:out_ready
	wire          sys_clk_timer_s1_agent_rsp_fifo_out_startofpacket;                                         // sys_clk_timer_s1_agent_rsp_fifo:out_startofpacket -> sys_clk_timer_s1_agent:rf_sink_startofpacket
	wire          sys_clk_timer_s1_agent_rsp_fifo_out_endofpacket;                                           // sys_clk_timer_s1_agent_rsp_fifo:out_endofpacket -> sys_clk_timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                                     // cmd_mux_015:src_valid -> sys_clk_timer_s1_agent:cp_valid
	wire  [120:0] cmd_mux_015_src_data;                                                                      // cmd_mux_015:src_data -> sys_clk_timer_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                                     // sys_clk_timer_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [20:0] cmd_mux_015_src_channel;                                                                   // cmd_mux_015:src_channel -> sys_clk_timer_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                             // cmd_mux_015:src_startofpacket -> sys_clk_timer_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                               // cmd_mux_015:src_endofpacket -> sys_clk_timer_s1_agent:cp_endofpacket
	wire   [31:0] output_pio_s1_agent_m0_readdata;                                                           // output_pio_s1_translator:uav_readdata -> output_pio_s1_agent:m0_readdata
	wire          output_pio_s1_agent_m0_waitrequest;                                                        // output_pio_s1_translator:uav_waitrequest -> output_pio_s1_agent:m0_waitrequest
	wire          output_pio_s1_agent_m0_debugaccess;                                                        // output_pio_s1_agent:m0_debugaccess -> output_pio_s1_translator:uav_debugaccess
	wire   [28:0] output_pio_s1_agent_m0_address;                                                            // output_pio_s1_agent:m0_address -> output_pio_s1_translator:uav_address
	wire    [3:0] output_pio_s1_agent_m0_byteenable;                                                         // output_pio_s1_agent:m0_byteenable -> output_pio_s1_translator:uav_byteenable
	wire          output_pio_s1_agent_m0_read;                                                               // output_pio_s1_agent:m0_read -> output_pio_s1_translator:uav_read
	wire          output_pio_s1_agent_m0_readdatavalid;                                                      // output_pio_s1_translator:uav_readdatavalid -> output_pio_s1_agent:m0_readdatavalid
	wire          output_pio_s1_agent_m0_lock;                                                               // output_pio_s1_agent:m0_lock -> output_pio_s1_translator:uav_lock
	wire   [31:0] output_pio_s1_agent_m0_writedata;                                                          // output_pio_s1_agent:m0_writedata -> output_pio_s1_translator:uav_writedata
	wire          output_pio_s1_agent_m0_write;                                                              // output_pio_s1_agent:m0_write -> output_pio_s1_translator:uav_write
	wire    [2:0] output_pio_s1_agent_m0_burstcount;                                                         // output_pio_s1_agent:m0_burstcount -> output_pio_s1_translator:uav_burstcount
	wire          output_pio_s1_agent_rf_source_valid;                                                       // output_pio_s1_agent:rf_source_valid -> output_pio_s1_agent_rsp_fifo:in_valid
	wire  [121:0] output_pio_s1_agent_rf_source_data;                                                        // output_pio_s1_agent:rf_source_data -> output_pio_s1_agent_rsp_fifo:in_data
	wire          output_pio_s1_agent_rf_source_ready;                                                       // output_pio_s1_agent_rsp_fifo:in_ready -> output_pio_s1_agent:rf_source_ready
	wire          output_pio_s1_agent_rf_source_startofpacket;                                               // output_pio_s1_agent:rf_source_startofpacket -> output_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          output_pio_s1_agent_rf_source_endofpacket;                                                 // output_pio_s1_agent:rf_source_endofpacket -> output_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          output_pio_s1_agent_rsp_fifo_out_valid;                                                    // output_pio_s1_agent_rsp_fifo:out_valid -> output_pio_s1_agent:rf_sink_valid
	wire  [121:0] output_pio_s1_agent_rsp_fifo_out_data;                                                     // output_pio_s1_agent_rsp_fifo:out_data -> output_pio_s1_agent:rf_sink_data
	wire          output_pio_s1_agent_rsp_fifo_out_ready;                                                    // output_pio_s1_agent:rf_sink_ready -> output_pio_s1_agent_rsp_fifo:out_ready
	wire          output_pio_s1_agent_rsp_fifo_out_startofpacket;                                            // output_pio_s1_agent_rsp_fifo:out_startofpacket -> output_pio_s1_agent:rf_sink_startofpacket
	wire          output_pio_s1_agent_rsp_fifo_out_endofpacket;                                              // output_pio_s1_agent_rsp_fifo:out_endofpacket -> output_pio_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                                     // cmd_mux_016:src_valid -> output_pio_s1_agent:cp_valid
	wire  [120:0] cmd_mux_016_src_data;                                                                      // cmd_mux_016:src_data -> output_pio_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                                     // output_pio_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [20:0] cmd_mux_016_src_channel;                                                                   // cmd_mux_016:src_channel -> output_pio_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                             // cmd_mux_016:src_startofpacket -> output_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                               // cmd_mux_016:src_endofpacket -> output_pio_s1_agent:cp_endofpacket
	wire   [31:0] button_pio_s1_agent_m0_readdata;                                                           // button_pio_s1_translator:uav_readdata -> button_pio_s1_agent:m0_readdata
	wire          button_pio_s1_agent_m0_waitrequest;                                                        // button_pio_s1_translator:uav_waitrequest -> button_pio_s1_agent:m0_waitrequest
	wire          button_pio_s1_agent_m0_debugaccess;                                                        // button_pio_s1_agent:m0_debugaccess -> button_pio_s1_translator:uav_debugaccess
	wire   [28:0] button_pio_s1_agent_m0_address;                                                            // button_pio_s1_agent:m0_address -> button_pio_s1_translator:uav_address
	wire    [3:0] button_pio_s1_agent_m0_byteenable;                                                         // button_pio_s1_agent:m0_byteenable -> button_pio_s1_translator:uav_byteenable
	wire          button_pio_s1_agent_m0_read;                                                               // button_pio_s1_agent:m0_read -> button_pio_s1_translator:uav_read
	wire          button_pio_s1_agent_m0_readdatavalid;                                                      // button_pio_s1_translator:uav_readdatavalid -> button_pio_s1_agent:m0_readdatavalid
	wire          button_pio_s1_agent_m0_lock;                                                               // button_pio_s1_agent:m0_lock -> button_pio_s1_translator:uav_lock
	wire   [31:0] button_pio_s1_agent_m0_writedata;                                                          // button_pio_s1_agent:m0_writedata -> button_pio_s1_translator:uav_writedata
	wire          button_pio_s1_agent_m0_write;                                                              // button_pio_s1_agent:m0_write -> button_pio_s1_translator:uav_write
	wire    [2:0] button_pio_s1_agent_m0_burstcount;                                                         // button_pio_s1_agent:m0_burstcount -> button_pio_s1_translator:uav_burstcount
	wire          button_pio_s1_agent_rf_source_valid;                                                       // button_pio_s1_agent:rf_source_valid -> button_pio_s1_agent_rsp_fifo:in_valid
	wire  [121:0] button_pio_s1_agent_rf_source_data;                                                        // button_pio_s1_agent:rf_source_data -> button_pio_s1_agent_rsp_fifo:in_data
	wire          button_pio_s1_agent_rf_source_ready;                                                       // button_pio_s1_agent_rsp_fifo:in_ready -> button_pio_s1_agent:rf_source_ready
	wire          button_pio_s1_agent_rf_source_startofpacket;                                               // button_pio_s1_agent:rf_source_startofpacket -> button_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          button_pio_s1_agent_rf_source_endofpacket;                                                 // button_pio_s1_agent:rf_source_endofpacket -> button_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_valid;                                                    // button_pio_s1_agent_rsp_fifo:out_valid -> button_pio_s1_agent:rf_sink_valid
	wire  [121:0] button_pio_s1_agent_rsp_fifo_out_data;                                                     // button_pio_s1_agent_rsp_fifo:out_data -> button_pio_s1_agent:rf_sink_data
	wire          button_pio_s1_agent_rsp_fifo_out_ready;                                                    // button_pio_s1_agent:rf_sink_ready -> button_pio_s1_agent_rsp_fifo:out_ready
	wire          button_pio_s1_agent_rsp_fifo_out_startofpacket;                                            // button_pio_s1_agent_rsp_fifo:out_startofpacket -> button_pio_s1_agent:rf_sink_startofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_endofpacket;                                              // button_pio_s1_agent_rsp_fifo:out_endofpacket -> button_pio_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                                     // cmd_mux_017:src_valid -> button_pio_s1_agent:cp_valid
	wire  [120:0] cmd_mux_017_src_data;                                                                      // cmd_mux_017:src_data -> button_pio_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                                     // button_pio_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [20:0] cmd_mux_017_src_channel;                                                                   // cmd_mux_017:src_channel -> button_pio_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                             // cmd_mux_017:src_startofpacket -> button_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                               // cmd_mux_017:src_endofpacket -> button_pio_s1_agent:cp_endofpacket
	wire   [31:0] debug_uart_s1_agent_m0_readdata;                                                           // debug_uart_s1_translator:uav_readdata -> debug_uart_s1_agent:m0_readdata
	wire          debug_uart_s1_agent_m0_waitrequest;                                                        // debug_uart_s1_translator:uav_waitrequest -> debug_uart_s1_agent:m0_waitrequest
	wire          debug_uart_s1_agent_m0_debugaccess;                                                        // debug_uart_s1_agent:m0_debugaccess -> debug_uart_s1_translator:uav_debugaccess
	wire   [28:0] debug_uart_s1_agent_m0_address;                                                            // debug_uart_s1_agent:m0_address -> debug_uart_s1_translator:uav_address
	wire    [3:0] debug_uart_s1_agent_m0_byteenable;                                                         // debug_uart_s1_agent:m0_byteenable -> debug_uart_s1_translator:uav_byteenable
	wire          debug_uart_s1_agent_m0_read;                                                               // debug_uart_s1_agent:m0_read -> debug_uart_s1_translator:uav_read
	wire          debug_uart_s1_agent_m0_readdatavalid;                                                      // debug_uart_s1_translator:uav_readdatavalid -> debug_uart_s1_agent:m0_readdatavalid
	wire          debug_uart_s1_agent_m0_lock;                                                               // debug_uart_s1_agent:m0_lock -> debug_uart_s1_translator:uav_lock
	wire   [31:0] debug_uart_s1_agent_m0_writedata;                                                          // debug_uart_s1_agent:m0_writedata -> debug_uart_s1_translator:uav_writedata
	wire          debug_uart_s1_agent_m0_write;                                                              // debug_uart_s1_agent:m0_write -> debug_uart_s1_translator:uav_write
	wire    [2:0] debug_uart_s1_agent_m0_burstcount;                                                         // debug_uart_s1_agent:m0_burstcount -> debug_uart_s1_translator:uav_burstcount
	wire          debug_uart_s1_agent_rf_source_valid;                                                       // debug_uart_s1_agent:rf_source_valid -> debug_uart_s1_agent_rsp_fifo:in_valid
	wire  [121:0] debug_uart_s1_agent_rf_source_data;                                                        // debug_uart_s1_agent:rf_source_data -> debug_uart_s1_agent_rsp_fifo:in_data
	wire          debug_uart_s1_agent_rf_source_ready;                                                       // debug_uart_s1_agent_rsp_fifo:in_ready -> debug_uart_s1_agent:rf_source_ready
	wire          debug_uart_s1_agent_rf_source_startofpacket;                                               // debug_uart_s1_agent:rf_source_startofpacket -> debug_uart_s1_agent_rsp_fifo:in_startofpacket
	wire          debug_uart_s1_agent_rf_source_endofpacket;                                                 // debug_uart_s1_agent:rf_source_endofpacket -> debug_uart_s1_agent_rsp_fifo:in_endofpacket
	wire          debug_uart_s1_agent_rsp_fifo_out_valid;                                                    // debug_uart_s1_agent_rsp_fifo:out_valid -> debug_uart_s1_agent:rf_sink_valid
	wire  [121:0] debug_uart_s1_agent_rsp_fifo_out_data;                                                     // debug_uart_s1_agent_rsp_fifo:out_data -> debug_uart_s1_agent:rf_sink_data
	wire          debug_uart_s1_agent_rsp_fifo_out_ready;                                                    // debug_uart_s1_agent:rf_sink_ready -> debug_uart_s1_agent_rsp_fifo:out_ready
	wire          debug_uart_s1_agent_rsp_fifo_out_startofpacket;                                            // debug_uart_s1_agent_rsp_fifo:out_startofpacket -> debug_uart_s1_agent:rf_sink_startofpacket
	wire          debug_uart_s1_agent_rsp_fifo_out_endofpacket;                                              // debug_uart_s1_agent_rsp_fifo:out_endofpacket -> debug_uart_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                                     // cmd_mux_018:src_valid -> debug_uart_s1_agent:cp_valid
	wire  [120:0] cmd_mux_018_src_data;                                                                      // cmd_mux_018:src_data -> debug_uart_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                                     // debug_uart_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [20:0] cmd_mux_018_src_channel;                                                                   // cmd_mux_018:src_channel -> debug_uart_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                             // cmd_mux_018:src_startofpacket -> debug_uart_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                               // cmd_mux_018:src_endofpacket -> debug_uart_s1_agent:cp_endofpacket
	wire   [31:0] frame_timer_s1_agent_m0_readdata;                                                          // frame_timer_s1_translator:uav_readdata -> frame_timer_s1_agent:m0_readdata
	wire          frame_timer_s1_agent_m0_waitrequest;                                                       // frame_timer_s1_translator:uav_waitrequest -> frame_timer_s1_agent:m0_waitrequest
	wire          frame_timer_s1_agent_m0_debugaccess;                                                       // frame_timer_s1_agent:m0_debugaccess -> frame_timer_s1_translator:uav_debugaccess
	wire   [28:0] frame_timer_s1_agent_m0_address;                                                           // frame_timer_s1_agent:m0_address -> frame_timer_s1_translator:uav_address
	wire    [3:0] frame_timer_s1_agent_m0_byteenable;                                                        // frame_timer_s1_agent:m0_byteenable -> frame_timer_s1_translator:uav_byteenable
	wire          frame_timer_s1_agent_m0_read;                                                              // frame_timer_s1_agent:m0_read -> frame_timer_s1_translator:uav_read
	wire          frame_timer_s1_agent_m0_readdatavalid;                                                     // frame_timer_s1_translator:uav_readdatavalid -> frame_timer_s1_agent:m0_readdatavalid
	wire          frame_timer_s1_agent_m0_lock;                                                              // frame_timer_s1_agent:m0_lock -> frame_timer_s1_translator:uav_lock
	wire   [31:0] frame_timer_s1_agent_m0_writedata;                                                         // frame_timer_s1_agent:m0_writedata -> frame_timer_s1_translator:uav_writedata
	wire          frame_timer_s1_agent_m0_write;                                                             // frame_timer_s1_agent:m0_write -> frame_timer_s1_translator:uav_write
	wire    [2:0] frame_timer_s1_agent_m0_burstcount;                                                        // frame_timer_s1_agent:m0_burstcount -> frame_timer_s1_translator:uav_burstcount
	wire          frame_timer_s1_agent_rf_source_valid;                                                      // frame_timer_s1_agent:rf_source_valid -> frame_timer_s1_agent_rsp_fifo:in_valid
	wire  [121:0] frame_timer_s1_agent_rf_source_data;                                                       // frame_timer_s1_agent:rf_source_data -> frame_timer_s1_agent_rsp_fifo:in_data
	wire          frame_timer_s1_agent_rf_source_ready;                                                      // frame_timer_s1_agent_rsp_fifo:in_ready -> frame_timer_s1_agent:rf_source_ready
	wire          frame_timer_s1_agent_rf_source_startofpacket;                                              // frame_timer_s1_agent:rf_source_startofpacket -> frame_timer_s1_agent_rsp_fifo:in_startofpacket
	wire          frame_timer_s1_agent_rf_source_endofpacket;                                                // frame_timer_s1_agent:rf_source_endofpacket -> frame_timer_s1_agent_rsp_fifo:in_endofpacket
	wire          frame_timer_s1_agent_rsp_fifo_out_valid;                                                   // frame_timer_s1_agent_rsp_fifo:out_valid -> frame_timer_s1_agent:rf_sink_valid
	wire  [121:0] frame_timer_s1_agent_rsp_fifo_out_data;                                                    // frame_timer_s1_agent_rsp_fifo:out_data -> frame_timer_s1_agent:rf_sink_data
	wire          frame_timer_s1_agent_rsp_fifo_out_ready;                                                   // frame_timer_s1_agent:rf_sink_ready -> frame_timer_s1_agent_rsp_fifo:out_ready
	wire          frame_timer_s1_agent_rsp_fifo_out_startofpacket;                                           // frame_timer_s1_agent_rsp_fifo:out_startofpacket -> frame_timer_s1_agent:rf_sink_startofpacket
	wire          frame_timer_s1_agent_rsp_fifo_out_endofpacket;                                             // frame_timer_s1_agent_rsp_fifo:out_endofpacket -> frame_timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                                     // cmd_mux_019:src_valid -> frame_timer_s1_agent:cp_valid
	wire  [120:0] cmd_mux_019_src_data;                                                                      // cmd_mux_019:src_data -> frame_timer_s1_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                                     // frame_timer_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [20:0] cmd_mux_019_src_channel;                                                                   // cmd_mux_019:src_channel -> frame_timer_s1_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                             // cmd_mux_019:src_startofpacket -> frame_timer_s1_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                               // cmd_mux_019:src_endofpacket -> frame_timer_s1_agent:cp_endofpacket
	wire   [15:0] calibration_ram_s1_agent_m0_readdata;                                                      // calibration_ram_s1_translator:uav_readdata -> calibration_ram_s1_agent:m0_readdata
	wire          calibration_ram_s1_agent_m0_waitrequest;                                                   // calibration_ram_s1_translator:uav_waitrequest -> calibration_ram_s1_agent:m0_waitrequest
	wire          calibration_ram_s1_agent_m0_debugaccess;                                                   // calibration_ram_s1_agent:m0_debugaccess -> calibration_ram_s1_translator:uav_debugaccess
	wire   [28:0] calibration_ram_s1_agent_m0_address;                                                       // calibration_ram_s1_agent:m0_address -> calibration_ram_s1_translator:uav_address
	wire    [1:0] calibration_ram_s1_agent_m0_byteenable;                                                    // calibration_ram_s1_agent:m0_byteenable -> calibration_ram_s1_translator:uav_byteenable
	wire          calibration_ram_s1_agent_m0_read;                                                          // calibration_ram_s1_agent:m0_read -> calibration_ram_s1_translator:uav_read
	wire          calibration_ram_s1_agent_m0_readdatavalid;                                                 // calibration_ram_s1_translator:uav_readdatavalid -> calibration_ram_s1_agent:m0_readdatavalid
	wire          calibration_ram_s1_agent_m0_lock;                                                          // calibration_ram_s1_agent:m0_lock -> calibration_ram_s1_translator:uav_lock
	wire   [15:0] calibration_ram_s1_agent_m0_writedata;                                                     // calibration_ram_s1_agent:m0_writedata -> calibration_ram_s1_translator:uav_writedata
	wire          calibration_ram_s1_agent_m0_write;                                                         // calibration_ram_s1_agent:m0_write -> calibration_ram_s1_translator:uav_write
	wire    [1:0] calibration_ram_s1_agent_m0_burstcount;                                                    // calibration_ram_s1_agent:m0_burstcount -> calibration_ram_s1_translator:uav_burstcount
	wire          calibration_ram_s1_agent_rf_source_valid;                                                  // calibration_ram_s1_agent:rf_source_valid -> calibration_ram_s1_agent_rsp_fifo:in_valid
	wire  [103:0] calibration_ram_s1_agent_rf_source_data;                                                   // calibration_ram_s1_agent:rf_source_data -> calibration_ram_s1_agent_rsp_fifo:in_data
	wire          calibration_ram_s1_agent_rf_source_ready;                                                  // calibration_ram_s1_agent_rsp_fifo:in_ready -> calibration_ram_s1_agent:rf_source_ready
	wire          calibration_ram_s1_agent_rf_source_startofpacket;                                          // calibration_ram_s1_agent:rf_source_startofpacket -> calibration_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          calibration_ram_s1_agent_rf_source_endofpacket;                                            // calibration_ram_s1_agent:rf_source_endofpacket -> calibration_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          calibration_ram_s1_agent_rsp_fifo_out_valid;                                               // calibration_ram_s1_agent_rsp_fifo:out_valid -> calibration_ram_s1_agent:rf_sink_valid
	wire  [103:0] calibration_ram_s1_agent_rsp_fifo_out_data;                                                // calibration_ram_s1_agent_rsp_fifo:out_data -> calibration_ram_s1_agent:rf_sink_data
	wire          calibration_ram_s1_agent_rsp_fifo_out_ready;                                               // calibration_ram_s1_agent:rf_sink_ready -> calibration_ram_s1_agent_rsp_fifo:out_ready
	wire          calibration_ram_s1_agent_rsp_fifo_out_startofpacket;                                       // calibration_ram_s1_agent_rsp_fifo:out_startofpacket -> calibration_ram_s1_agent:rf_sink_startofpacket
	wire          calibration_ram_s1_agent_rsp_fifo_out_endofpacket;                                         // calibration_ram_s1_agent_rsp_fifo:out_endofpacket -> calibration_ram_s1_agent:rf_sink_endofpacket
	wire          cpu_data_master_agent_cp_valid;                                                            // cpu_data_master_agent:cp_valid -> router:sink_valid
	wire  [120:0] cpu_data_master_agent_cp_data;                                                             // cpu_data_master_agent:cp_data -> router:sink_data
	wire          cpu_data_master_agent_cp_ready;                                                            // router:sink_ready -> cpu_data_master_agent:cp_ready
	wire          cpu_data_master_agent_cp_startofpacket;                                                    // cpu_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpu_data_master_agent_cp_endofpacket;                                                      // cpu_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          cpu_instruction_master_agent_cp_valid;                                                     // cpu_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [120:0] cpu_instruction_master_agent_cp_data;                                                      // cpu_instruction_master_agent:cp_data -> router_001:sink_data
	wire          cpu_instruction_master_agent_cp_ready;                                                     // router_001:sink_ready -> cpu_instruction_master_agent:cp_ready
	wire          cpu_instruction_master_agent_cp_startofpacket;                                             // cpu_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_instruction_master_agent_cp_endofpacket;                                               // cpu_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          msgdma_tx_mm_read_agent_cp_valid;                                                          // msgdma_tx_mm_read_agent:cp_valid -> router_002:sink_valid
	wire  [120:0] msgdma_tx_mm_read_agent_cp_data;                                                           // msgdma_tx_mm_read_agent:cp_data -> router_002:sink_data
	wire          msgdma_tx_mm_read_agent_cp_ready;                                                          // router_002:sink_ready -> msgdma_tx_mm_read_agent:cp_ready
	wire          msgdma_tx_mm_read_agent_cp_startofpacket;                                                  // msgdma_tx_mm_read_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          msgdma_tx_mm_read_agent_cp_endofpacket;                                                    // msgdma_tx_mm_read_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                      // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [120:0] router_002_src_data;                                                                       // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                      // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [20:0] router_002_src_channel;                                                                    // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                              // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          msgdma_rx_mm_write_agent_cp_valid;                                                         // msgdma_rx_mm_write_agent:cp_valid -> router_003:sink_valid
	wire  [120:0] msgdma_rx_mm_write_agent_cp_data;                                                          // msgdma_rx_mm_write_agent:cp_data -> router_003:sink_data
	wire          msgdma_rx_mm_write_agent_cp_ready;                                                         // router_003:sink_ready -> msgdma_rx_mm_write_agent:cp_ready
	wire          msgdma_rx_mm_write_agent_cp_startofpacket;                                                 // msgdma_rx_mm_write_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          msgdma_rx_mm_write_agent_cp_endofpacket;                                                   // msgdma_rx_mm_write_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                      // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [120:0] router_003_src_data;                                                                       // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                                      // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [20:0] router_003_src_channel;                                                                    // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                              // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          msgdma_tx_descriptor_read_master_agent_cp_valid;                                           // msgdma_tx_descriptor_read_master_agent:cp_valid -> router_004:sink_valid
	wire  [120:0] msgdma_tx_descriptor_read_master_agent_cp_data;                                            // msgdma_tx_descriptor_read_master_agent:cp_data -> router_004:sink_data
	wire          msgdma_tx_descriptor_read_master_agent_cp_ready;                                           // router_004:sink_ready -> msgdma_tx_descriptor_read_master_agent:cp_ready
	wire          msgdma_tx_descriptor_read_master_agent_cp_startofpacket;                                   // msgdma_tx_descriptor_read_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          msgdma_tx_descriptor_read_master_agent_cp_endofpacket;                                     // msgdma_tx_descriptor_read_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                      // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [120:0] router_004_src_data;                                                                       // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                                      // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [20:0] router_004_src_channel;                                                                    // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                              // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          msgdma_rx_descriptor_read_master_agent_cp_valid;                                           // msgdma_rx_descriptor_read_master_agent:cp_valid -> router_005:sink_valid
	wire  [120:0] msgdma_rx_descriptor_read_master_agent_cp_data;                                            // msgdma_rx_descriptor_read_master_agent:cp_data -> router_005:sink_data
	wire          msgdma_rx_descriptor_read_master_agent_cp_ready;                                           // router_005:sink_ready -> msgdma_rx_descriptor_read_master_agent:cp_ready
	wire          msgdma_rx_descriptor_read_master_agent_cp_startofpacket;                                   // msgdma_rx_descriptor_read_master_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          msgdma_rx_descriptor_read_master_agent_cp_endofpacket;                                     // msgdma_rx_descriptor_read_master_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                      // router_005:src_valid -> cmd_demux_005:sink_valid
	wire  [120:0] router_005_src_data;                                                                       // router_005:src_data -> cmd_demux_005:sink_data
	wire          router_005_src_ready;                                                                      // cmd_demux_005:sink_ready -> router_005:src_ready
	wire   [20:0] router_005_src_channel;                                                                    // router_005:src_channel -> cmd_demux_005:sink_channel
	wire          router_005_src_startofpacket;                                                              // router_005:src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                // router_005:src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          msgdma_tx_descriptor_write_master_agent_cp_valid;                                          // msgdma_tx_descriptor_write_master_agent:cp_valid -> router_006:sink_valid
	wire  [120:0] msgdma_tx_descriptor_write_master_agent_cp_data;                                           // msgdma_tx_descriptor_write_master_agent:cp_data -> router_006:sink_data
	wire          msgdma_tx_descriptor_write_master_agent_cp_ready;                                          // router_006:sink_ready -> msgdma_tx_descriptor_write_master_agent:cp_ready
	wire          msgdma_tx_descriptor_write_master_agent_cp_startofpacket;                                  // msgdma_tx_descriptor_write_master_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          msgdma_tx_descriptor_write_master_agent_cp_endofpacket;                                    // msgdma_tx_descriptor_write_master_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                      // router_006:src_valid -> cmd_demux_006:sink_valid
	wire  [120:0] router_006_src_data;                                                                       // router_006:src_data -> cmd_demux_006:sink_data
	wire          router_006_src_ready;                                                                      // cmd_demux_006:sink_ready -> router_006:src_ready
	wire   [20:0] router_006_src_channel;                                                                    // router_006:src_channel -> cmd_demux_006:sink_channel
	wire          router_006_src_startofpacket;                                                              // router_006:src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                // router_006:src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          msgdma_rx_descriptor_write_master_agent_cp_valid;                                          // msgdma_rx_descriptor_write_master_agent:cp_valid -> router_007:sink_valid
	wire  [120:0] msgdma_rx_descriptor_write_master_agent_cp_data;                                           // msgdma_rx_descriptor_write_master_agent:cp_data -> router_007:sink_data
	wire          msgdma_rx_descriptor_write_master_agent_cp_ready;                                          // router_007:sink_ready -> msgdma_rx_descriptor_write_master_agent:cp_ready
	wire          msgdma_rx_descriptor_write_master_agent_cp_startofpacket;                                  // msgdma_rx_descriptor_write_master_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire          msgdma_rx_descriptor_write_master_agent_cp_endofpacket;                                    // msgdma_rx_descriptor_write_master_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                      // router_007:src_valid -> cmd_demux_007:sink_valid
	wire  [120:0] router_007_src_data;                                                                       // router_007:src_data -> cmd_demux_007:sink_data
	wire          router_007_src_ready;                                                                      // cmd_demux_007:sink_ready -> router_007:src_ready
	wire   [20:0] router_007_src_channel;                                                                    // router_007:src_channel -> cmd_demux_007:sink_channel
	wire          router_007_src_startofpacket;                                                              // router_007:src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                // router_007:src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          ddr3_ram_avl_agent_rp_valid;                                                               // ddr3_ram_avl_agent:rp_valid -> router_008:sink_valid
	wire  [120:0] ddr3_ram_avl_agent_rp_data;                                                                // ddr3_ram_avl_agent:rp_data -> router_008:sink_data
	wire          ddr3_ram_avl_agent_rp_ready;                                                               // router_008:sink_ready -> ddr3_ram_avl_agent:rp_ready
	wire          ddr3_ram_avl_agent_rp_startofpacket;                                                       // ddr3_ram_avl_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          ddr3_ram_avl_agent_rp_endofpacket;                                                         // ddr3_ram_avl_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                      // router_008:src_valid -> rsp_demux:sink_valid
	wire  [120:0] router_008_src_data;                                                                       // router_008:src_data -> rsp_demux:sink_data
	wire          router_008_src_ready;                                                                      // rsp_demux:sink_ready -> router_008:src_ready
	wire   [20:0] router_008_src_channel;                                                                    // router_008:src_channel -> rsp_demux:sink_channel
	wire          router_008_src_startofpacket;                                                              // router_008:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                // router_008:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          ext_flash_avl_csr_agent_rp_valid;                                                          // ext_flash_avl_csr_agent:rp_valid -> router_009:sink_valid
	wire  [120:0] ext_flash_avl_csr_agent_rp_data;                                                           // ext_flash_avl_csr_agent:rp_data -> router_009:sink_data
	wire          ext_flash_avl_csr_agent_rp_ready;                                                          // router_009:sink_ready -> ext_flash_avl_csr_agent:rp_ready
	wire          ext_flash_avl_csr_agent_rp_startofpacket;                                                  // ext_flash_avl_csr_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          ext_flash_avl_csr_agent_rp_endofpacket;                                                    // ext_flash_avl_csr_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                      // router_009:src_valid -> rsp_demux_001:sink_valid
	wire  [120:0] router_009_src_data;                                                                       // router_009:src_data -> rsp_demux_001:sink_data
	wire          router_009_src_ready;                                                                      // rsp_demux_001:sink_ready -> router_009:src_ready
	wire   [20:0] router_009_src_channel;                                                                    // router_009:src_channel -> rsp_demux_001:sink_channel
	wire          router_009_src_startofpacket;                                                              // router_009:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                // router_009:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          ext_flash_avl_mem_agent_rp_valid;                                                          // ext_flash_avl_mem_agent:rp_valid -> router_010:sink_valid
	wire  [120:0] ext_flash_avl_mem_agent_rp_data;                                                           // ext_flash_avl_mem_agent:rp_data -> router_010:sink_data
	wire          ext_flash_avl_mem_agent_rp_ready;                                                          // router_010:sink_ready -> ext_flash_avl_mem_agent:rp_ready
	wire          ext_flash_avl_mem_agent_rp_startofpacket;                                                  // ext_flash_avl_mem_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          ext_flash_avl_mem_agent_rp_endofpacket;                                                    // ext_flash_avl_mem_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                      // router_010:src_valid -> rsp_demux_002:sink_valid
	wire  [120:0] router_010_src_data;                                                                       // router_010:src_data -> rsp_demux_002:sink_data
	wire          router_010_src_ready;                                                                      // rsp_demux_002:sink_ready -> router_010:src_ready
	wire   [20:0] router_010_src_channel;                                                                    // router_010:src_channel -> rsp_demux_002:sink_channel
	wire          router_010_src_startofpacket;                                                              // router_010:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                // router_010:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          eth_tse_control_port_agent_rp_valid;                                                       // eth_tse_control_port_agent:rp_valid -> router_011:sink_valid
	wire  [120:0] eth_tse_control_port_agent_rp_data;                                                        // eth_tse_control_port_agent:rp_data -> router_011:sink_data
	wire          eth_tse_control_port_agent_rp_ready;                                                       // router_011:sink_ready -> eth_tse_control_port_agent:rp_ready
	wire          eth_tse_control_port_agent_rp_startofpacket;                                               // eth_tse_control_port_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          eth_tse_control_port_agent_rp_endofpacket;                                                 // eth_tse_control_port_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                      // router_011:src_valid -> rsp_demux_003:sink_valid
	wire  [120:0] router_011_src_data;                                                                       // router_011:src_data -> rsp_demux_003:sink_data
	wire          router_011_src_ready;                                                                      // rsp_demux_003:sink_ready -> router_011:src_ready
	wire   [20:0] router_011_src_channel;                                                                    // router_011:src_channel -> rsp_demux_003:sink_channel
	wire          router_011_src_startofpacket;                                                              // router_011:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                // router_011:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                                        // sysid_control_slave_agent:rp_valid -> router_012:sink_valid
	wire  [120:0] sysid_control_slave_agent_rp_data;                                                         // sysid_control_slave_agent:rp_data -> router_012:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                                        // router_012:sink_ready -> sysid_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                                // sysid_control_slave_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                                  // sysid_control_slave_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                      // router_012:src_valid -> rsp_demux_004:sink_valid
	wire  [120:0] router_012_src_data;                                                                       // router_012:src_data -> rsp_demux_004:sink_data
	wire          router_012_src_ready;                                                                      // rsp_demux_004:sink_ready -> router_012:src_ready
	wire   [20:0] router_012_src_channel;                                                                    // router_012:src_channel -> rsp_demux_004:sink_channel
	wire          router_012_src_startofpacket;                                                              // router_012:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                // router_012:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          msgdma_tx_csr_agent_rp_valid;                                                              // msgdma_tx_csr_agent:rp_valid -> router_013:sink_valid
	wire  [120:0] msgdma_tx_csr_agent_rp_data;                                                               // msgdma_tx_csr_agent:rp_data -> router_013:sink_data
	wire          msgdma_tx_csr_agent_rp_ready;                                                              // router_013:sink_ready -> msgdma_tx_csr_agent:rp_ready
	wire          msgdma_tx_csr_agent_rp_startofpacket;                                                      // msgdma_tx_csr_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          msgdma_tx_csr_agent_rp_endofpacket;                                                        // msgdma_tx_csr_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                      // router_013:src_valid -> rsp_demux_005:sink_valid
	wire  [120:0] router_013_src_data;                                                                       // router_013:src_data -> rsp_demux_005:sink_data
	wire          router_013_src_ready;                                                                      // rsp_demux_005:sink_ready -> router_013:src_ready
	wire   [20:0] router_013_src_channel;                                                                    // router_013:src_channel -> rsp_demux_005:sink_channel
	wire          router_013_src_startofpacket;                                                              // router_013:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                // router_013:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          msgdma_rx_csr_agent_rp_valid;                                                              // msgdma_rx_csr_agent:rp_valid -> router_014:sink_valid
	wire  [120:0] msgdma_rx_csr_agent_rp_data;                                                               // msgdma_rx_csr_agent:rp_data -> router_014:sink_data
	wire          msgdma_rx_csr_agent_rp_ready;                                                              // router_014:sink_ready -> msgdma_rx_csr_agent:rp_ready
	wire          msgdma_rx_csr_agent_rp_startofpacket;                                                      // msgdma_rx_csr_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          msgdma_rx_csr_agent_rp_endofpacket;                                                        // msgdma_rx_csr_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                      // router_014:src_valid -> rsp_demux_006:sink_valid
	wire  [120:0] router_014_src_data;                                                                       // router_014:src_data -> rsp_demux_006:sink_data
	wire          router_014_src_ready;                                                                      // rsp_demux_006:sink_ready -> router_014:src_ready
	wire   [20:0] router_014_src_channel;                                                                    // router_014:src_channel -> rsp_demux_006:sink_channel
	wire          router_014_src_startofpacket;                                                              // router_014:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                // router_014:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          onchip_flash_csr_agent_rp_valid;                                                           // onchip_flash_csr_agent:rp_valid -> router_015:sink_valid
	wire  [120:0] onchip_flash_csr_agent_rp_data;                                                            // onchip_flash_csr_agent:rp_data -> router_015:sink_data
	wire          onchip_flash_csr_agent_rp_ready;                                                           // router_015:sink_ready -> onchip_flash_csr_agent:rp_ready
	wire          onchip_flash_csr_agent_rp_startofpacket;                                                   // onchip_flash_csr_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          onchip_flash_csr_agent_rp_endofpacket;                                                     // onchip_flash_csr_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                      // router_015:src_valid -> rsp_demux_007:sink_valid
	wire  [120:0] router_015_src_data;                                                                       // router_015:src_data -> rsp_demux_007:sink_data
	wire          router_015_src_ready;                                                                      // rsp_demux_007:sink_ready -> router_015:src_ready
	wire   [20:0] router_015_src_channel;                                                                    // router_015:src_channel -> rsp_demux_007:sink_channel
	wire          router_015_src_startofpacket;                                                              // router_015:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                // router_015:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          udp_generator_csr_agent_rp_valid;                                                          // udp_generator_csr_agent:rp_valid -> router_016:sink_valid
	wire  [120:0] udp_generator_csr_agent_rp_data;                                                           // udp_generator_csr_agent:rp_data -> router_016:sink_data
	wire          udp_generator_csr_agent_rp_ready;                                                          // router_016:sink_ready -> udp_generator_csr_agent:rp_ready
	wire          udp_generator_csr_agent_rp_startofpacket;                                                  // udp_generator_csr_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          udp_generator_csr_agent_rp_endofpacket;                                                    // udp_generator_csr_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                      // router_016:src_valid -> rsp_demux_008:sink_valid
	wire  [120:0] router_016_src_data;                                                                       // router_016:src_data -> rsp_demux_008:sink_data
	wire          router_016_src_ready;                                                                      // rsp_demux_008:sink_ready -> router_016:src_ready
	wire   [20:0] router_016_src_channel;                                                                    // router_016:src_channel -> rsp_demux_008:sink_channel
	wire          router_016_src_startofpacket;                                                              // router_016:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                // router_016:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          sensor_interface_csr_agent_rp_valid;                                                       // sensor_interface_csr_agent:rp_valid -> router_017:sink_valid
	wire  [120:0] sensor_interface_csr_agent_rp_data;                                                        // sensor_interface_csr_agent:rp_data -> router_017:sink_data
	wire          sensor_interface_csr_agent_rp_ready;                                                       // router_017:sink_ready -> sensor_interface_csr_agent:rp_ready
	wire          sensor_interface_csr_agent_rp_startofpacket;                                               // sensor_interface_csr_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          sensor_interface_csr_agent_rp_endofpacket;                                                 // sensor_interface_csr_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                      // router_017:src_valid -> rsp_demux_009:sink_valid
	wire  [120:0] router_017_src_data;                                                                       // router_017:src_data -> rsp_demux_009:sink_data
	wire          router_017_src_ready;                                                                      // rsp_demux_009:sink_ready -> router_017:src_ready
	wire   [20:0] router_017_src_channel;                                                                    // router_017:src_channel -> rsp_demux_009:sink_channel
	wire          router_017_src_startofpacket;                                                              // router_017:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                // router_017:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          onchip_flash_data_agent_rp_valid;                                                          // onchip_flash_data_agent:rp_valid -> router_018:sink_valid
	wire  [120:0] onchip_flash_data_agent_rp_data;                                                           // onchip_flash_data_agent:rp_data -> router_018:sink_data
	wire          onchip_flash_data_agent_rp_ready;                                                          // router_018:sink_ready -> onchip_flash_data_agent:rp_ready
	wire          onchip_flash_data_agent_rp_startofpacket;                                                  // onchip_flash_data_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          onchip_flash_data_agent_rp_endofpacket;                                                    // onchip_flash_data_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                      // router_018:src_valid -> rsp_demux_010:sink_valid
	wire  [120:0] router_018_src_data;                                                                       // router_018:src_data -> rsp_demux_010:sink_data
	wire          router_018_src_ready;                                                                      // rsp_demux_010:sink_ready -> router_018:src_ready
	wire   [20:0] router_018_src_channel;                                                                    // router_018:src_channel -> rsp_demux_010:sink_channel
	wire          router_018_src_startofpacket;                                                              // router_018:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                // router_018:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          cpu_debug_mem_slave_agent_rp_valid;                                                        // cpu_debug_mem_slave_agent:rp_valid -> router_019:sink_valid
	wire  [120:0] cpu_debug_mem_slave_agent_rp_data;                                                         // cpu_debug_mem_slave_agent:rp_data -> router_019:sink_data
	wire          cpu_debug_mem_slave_agent_rp_ready;                                                        // router_019:sink_ready -> cpu_debug_mem_slave_agent:rp_ready
	wire          cpu_debug_mem_slave_agent_rp_startofpacket;                                                // cpu_debug_mem_slave_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rp_endofpacket;                                                  // cpu_debug_mem_slave_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                      // router_019:src_valid -> rsp_demux_011:sink_valid
	wire  [120:0] router_019_src_data;                                                                       // router_019:src_data -> rsp_demux_011:sink_data
	wire          router_019_src_ready;                                                                      // rsp_demux_011:sink_ready -> router_019:src_ready
	wire   [20:0] router_019_src_channel;                                                                    // router_019:src_channel -> rsp_demux_011:sink_channel
	wire          router_019_src_startofpacket;                                                              // router_019:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                // router_019:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          msgdma_tx_prefetcher_csr_agent_rp_valid;                                                   // msgdma_tx_prefetcher_csr_agent:rp_valid -> router_020:sink_valid
	wire  [120:0] msgdma_tx_prefetcher_csr_agent_rp_data;                                                    // msgdma_tx_prefetcher_csr_agent:rp_data -> router_020:sink_data
	wire          msgdma_tx_prefetcher_csr_agent_rp_ready;                                                   // router_020:sink_ready -> msgdma_tx_prefetcher_csr_agent:rp_ready
	wire          msgdma_tx_prefetcher_csr_agent_rp_startofpacket;                                           // msgdma_tx_prefetcher_csr_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          msgdma_tx_prefetcher_csr_agent_rp_endofpacket;                                             // msgdma_tx_prefetcher_csr_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                      // router_020:src_valid -> rsp_demux_012:sink_valid
	wire  [120:0] router_020_src_data;                                                                       // router_020:src_data -> rsp_demux_012:sink_data
	wire          router_020_src_ready;                                                                      // rsp_demux_012:sink_ready -> router_020:src_ready
	wire   [20:0] router_020_src_channel;                                                                    // router_020:src_channel -> rsp_demux_012:sink_channel
	wire          router_020_src_startofpacket;                                                              // router_020:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                // router_020:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          msgdma_rx_prefetcher_csr_agent_rp_valid;                                                   // msgdma_rx_prefetcher_csr_agent:rp_valid -> router_021:sink_valid
	wire  [120:0] msgdma_rx_prefetcher_csr_agent_rp_data;                                                    // msgdma_rx_prefetcher_csr_agent:rp_data -> router_021:sink_data
	wire          msgdma_rx_prefetcher_csr_agent_rp_ready;                                                   // router_021:sink_ready -> msgdma_rx_prefetcher_csr_agent:rp_ready
	wire          msgdma_rx_prefetcher_csr_agent_rp_startofpacket;                                           // msgdma_rx_prefetcher_csr_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          msgdma_rx_prefetcher_csr_agent_rp_endofpacket;                                             // msgdma_rx_prefetcher_csr_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                      // router_021:src_valid -> rsp_demux_013:sink_valid
	wire  [120:0] router_021_src_data;                                                                       // router_021:src_data -> rsp_demux_013:sink_data
	wire          router_021_src_ready;                                                                      // rsp_demux_013:sink_ready -> router_021:src_ready
	wire   [20:0] router_021_src_channel;                                                                    // router_021:src_channel -> rsp_demux_013:sink_channel
	wire          router_021_src_startofpacket;                                                              // router_021:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                // router_021:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          descriptor_memory_s1_agent_rp_valid;                                                       // descriptor_memory_s1_agent:rp_valid -> router_022:sink_valid
	wire  [120:0] descriptor_memory_s1_agent_rp_data;                                                        // descriptor_memory_s1_agent:rp_data -> router_022:sink_data
	wire          descriptor_memory_s1_agent_rp_ready;                                                       // router_022:sink_ready -> descriptor_memory_s1_agent:rp_ready
	wire          descriptor_memory_s1_agent_rp_startofpacket;                                               // descriptor_memory_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          descriptor_memory_s1_agent_rp_endofpacket;                                                 // descriptor_memory_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                      // router_022:src_valid -> rsp_demux_014:sink_valid
	wire  [120:0] router_022_src_data;                                                                       // router_022:src_data -> rsp_demux_014:sink_data
	wire          router_022_src_ready;                                                                      // rsp_demux_014:sink_ready -> router_022:src_ready
	wire   [20:0] router_022_src_channel;                                                                    // router_022:src_channel -> rsp_demux_014:sink_channel
	wire          router_022_src_startofpacket;                                                              // router_022:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                // router_022:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          sys_clk_timer_s1_agent_rp_valid;                                                           // sys_clk_timer_s1_agent:rp_valid -> router_023:sink_valid
	wire  [120:0] sys_clk_timer_s1_agent_rp_data;                                                            // sys_clk_timer_s1_agent:rp_data -> router_023:sink_data
	wire          sys_clk_timer_s1_agent_rp_ready;                                                           // router_023:sink_ready -> sys_clk_timer_s1_agent:rp_ready
	wire          sys_clk_timer_s1_agent_rp_startofpacket;                                                   // sys_clk_timer_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          sys_clk_timer_s1_agent_rp_endofpacket;                                                     // sys_clk_timer_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                      // router_023:src_valid -> rsp_demux_015:sink_valid
	wire  [120:0] router_023_src_data;                                                                       // router_023:src_data -> rsp_demux_015:sink_data
	wire          router_023_src_ready;                                                                      // rsp_demux_015:sink_ready -> router_023:src_ready
	wire   [20:0] router_023_src_channel;                                                                    // router_023:src_channel -> rsp_demux_015:sink_channel
	wire          router_023_src_startofpacket;                                                              // router_023:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_023_src_endofpacket;                                                                // router_023:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          output_pio_s1_agent_rp_valid;                                                              // output_pio_s1_agent:rp_valid -> router_024:sink_valid
	wire  [120:0] output_pio_s1_agent_rp_data;                                                               // output_pio_s1_agent:rp_data -> router_024:sink_data
	wire          output_pio_s1_agent_rp_ready;                                                              // router_024:sink_ready -> output_pio_s1_agent:rp_ready
	wire          output_pio_s1_agent_rp_startofpacket;                                                      // output_pio_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          output_pio_s1_agent_rp_endofpacket;                                                        // output_pio_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                                      // router_024:src_valid -> rsp_demux_016:sink_valid
	wire  [120:0] router_024_src_data;                                                                       // router_024:src_data -> rsp_demux_016:sink_data
	wire          router_024_src_ready;                                                                      // rsp_demux_016:sink_ready -> router_024:src_ready
	wire   [20:0] router_024_src_channel;                                                                    // router_024:src_channel -> rsp_demux_016:sink_channel
	wire          router_024_src_startofpacket;                                                              // router_024:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_024_src_endofpacket;                                                                // router_024:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          button_pio_s1_agent_rp_valid;                                                              // button_pio_s1_agent:rp_valid -> router_025:sink_valid
	wire  [120:0] button_pio_s1_agent_rp_data;                                                               // button_pio_s1_agent:rp_data -> router_025:sink_data
	wire          button_pio_s1_agent_rp_ready;                                                              // router_025:sink_ready -> button_pio_s1_agent:rp_ready
	wire          button_pio_s1_agent_rp_startofpacket;                                                      // button_pio_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          button_pio_s1_agent_rp_endofpacket;                                                        // button_pio_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                                      // router_025:src_valid -> rsp_demux_017:sink_valid
	wire  [120:0] router_025_src_data;                                                                       // router_025:src_data -> rsp_demux_017:sink_data
	wire          router_025_src_ready;                                                                      // rsp_demux_017:sink_ready -> router_025:src_ready
	wire   [20:0] router_025_src_channel;                                                                    // router_025:src_channel -> rsp_demux_017:sink_channel
	wire          router_025_src_startofpacket;                                                              // router_025:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_025_src_endofpacket;                                                                // router_025:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          debug_uart_s1_agent_rp_valid;                                                              // debug_uart_s1_agent:rp_valid -> router_026:sink_valid
	wire  [120:0] debug_uart_s1_agent_rp_data;                                                               // debug_uart_s1_agent:rp_data -> router_026:sink_data
	wire          debug_uart_s1_agent_rp_ready;                                                              // router_026:sink_ready -> debug_uart_s1_agent:rp_ready
	wire          debug_uart_s1_agent_rp_startofpacket;                                                      // debug_uart_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          debug_uart_s1_agent_rp_endofpacket;                                                        // debug_uart_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                                      // router_026:src_valid -> rsp_demux_018:sink_valid
	wire  [120:0] router_026_src_data;                                                                       // router_026:src_data -> rsp_demux_018:sink_data
	wire          router_026_src_ready;                                                                      // rsp_demux_018:sink_ready -> router_026:src_ready
	wire   [20:0] router_026_src_channel;                                                                    // router_026:src_channel -> rsp_demux_018:sink_channel
	wire          router_026_src_startofpacket;                                                              // router_026:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_026_src_endofpacket;                                                                // router_026:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          frame_timer_s1_agent_rp_valid;                                                             // frame_timer_s1_agent:rp_valid -> router_027:sink_valid
	wire  [120:0] frame_timer_s1_agent_rp_data;                                                              // frame_timer_s1_agent:rp_data -> router_027:sink_data
	wire          frame_timer_s1_agent_rp_ready;                                                             // router_027:sink_ready -> frame_timer_s1_agent:rp_ready
	wire          frame_timer_s1_agent_rp_startofpacket;                                                     // frame_timer_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          frame_timer_s1_agent_rp_endofpacket;                                                       // frame_timer_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                                      // router_027:src_valid -> rsp_demux_019:sink_valid
	wire  [120:0] router_027_src_data;                                                                       // router_027:src_data -> rsp_demux_019:sink_data
	wire          router_027_src_ready;                                                                      // rsp_demux_019:sink_ready -> router_027:src_ready
	wire   [20:0] router_027_src_channel;                                                                    // router_027:src_channel -> rsp_demux_019:sink_channel
	wire          router_027_src_startofpacket;                                                              // router_027:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_027_src_endofpacket;                                                                // router_027:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          calibration_ram_s1_agent_rp_valid;                                                         // calibration_ram_s1_agent:rp_valid -> router_028:sink_valid
	wire  [102:0] calibration_ram_s1_agent_rp_data;                                                          // calibration_ram_s1_agent:rp_data -> router_028:sink_data
	wire          calibration_ram_s1_agent_rp_ready;                                                         // router_028:sink_ready -> calibration_ram_s1_agent:rp_ready
	wire          calibration_ram_s1_agent_rp_startofpacket;                                                 // calibration_ram_s1_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          calibration_ram_s1_agent_rp_endofpacket;                                                   // calibration_ram_s1_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_src_valid;                                                                          // router:src_valid -> cpu_data_master_limiter:cmd_sink_valid
	wire  [120:0] router_src_data;                                                                           // router:src_data -> cpu_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                          // cpu_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [20:0] router_src_channel;                                                                        // router:src_channel -> cpu_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                  // router:src_startofpacket -> cpu_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                    // router:src_endofpacket -> cpu_data_master_limiter:cmd_sink_endofpacket
	wire  [120:0] cpu_data_master_limiter_cmd_src_data;                                                      // cpu_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          cpu_data_master_limiter_cmd_src_ready;                                                     // cmd_demux:sink_ready -> cpu_data_master_limiter:cmd_src_ready
	wire   [20:0] cpu_data_master_limiter_cmd_src_channel;                                                   // cpu_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          cpu_data_master_limiter_cmd_src_startofpacket;                                             // cpu_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          cpu_data_master_limiter_cmd_src_endofpacket;                                               // cpu_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                         // rsp_mux:src_valid -> cpu_data_master_limiter:rsp_sink_valid
	wire  [120:0] rsp_mux_src_data;                                                                          // rsp_mux:src_data -> cpu_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                         // cpu_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [20:0] rsp_mux_src_channel;                                                                       // rsp_mux:src_channel -> cpu_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                 // rsp_mux:src_startofpacket -> cpu_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                   // rsp_mux:src_endofpacket -> cpu_data_master_limiter:rsp_sink_endofpacket
	wire          cpu_data_master_limiter_rsp_src_valid;                                                     // cpu_data_master_limiter:rsp_src_valid -> cpu_data_master_agent:rp_valid
	wire  [120:0] cpu_data_master_limiter_rsp_src_data;                                                      // cpu_data_master_limiter:rsp_src_data -> cpu_data_master_agent:rp_data
	wire          cpu_data_master_limiter_rsp_src_ready;                                                     // cpu_data_master_agent:rp_ready -> cpu_data_master_limiter:rsp_src_ready
	wire   [20:0] cpu_data_master_limiter_rsp_src_channel;                                                   // cpu_data_master_limiter:rsp_src_channel -> cpu_data_master_agent:rp_channel
	wire          cpu_data_master_limiter_rsp_src_startofpacket;                                             // cpu_data_master_limiter:rsp_src_startofpacket -> cpu_data_master_agent:rp_startofpacket
	wire          cpu_data_master_limiter_rsp_src_endofpacket;                                               // cpu_data_master_limiter:rsp_src_endofpacket -> cpu_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                                      // router_001:src_valid -> cpu_instruction_master_limiter:cmd_sink_valid
	wire  [120:0] router_001_src_data;                                                                       // router_001:src_data -> cpu_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                      // cpu_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [20:0] router_001_src_channel;                                                                    // router_001:src_channel -> cpu_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                              // router_001:src_startofpacket -> cpu_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                // router_001:src_endofpacket -> cpu_instruction_master_limiter:cmd_sink_endofpacket
	wire  [120:0] cpu_instruction_master_limiter_cmd_src_data;                                               // cpu_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          cpu_instruction_master_limiter_cmd_src_ready;                                              // cmd_demux_001:sink_ready -> cpu_instruction_master_limiter:cmd_src_ready
	wire   [20:0] cpu_instruction_master_limiter_cmd_src_channel;                                            // cpu_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          cpu_instruction_master_limiter_cmd_src_startofpacket;                                      // cpu_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          cpu_instruction_master_limiter_cmd_src_endofpacket;                                        // cpu_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                     // rsp_mux_001:src_valid -> cpu_instruction_master_limiter:rsp_sink_valid
	wire  [120:0] rsp_mux_001_src_data;                                                                      // rsp_mux_001:src_data -> cpu_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                     // cpu_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [20:0] rsp_mux_001_src_channel;                                                                   // rsp_mux_001:src_channel -> cpu_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                             // rsp_mux_001:src_startofpacket -> cpu_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                               // rsp_mux_001:src_endofpacket -> cpu_instruction_master_limiter:rsp_sink_endofpacket
	wire          cpu_instruction_master_limiter_rsp_src_valid;                                              // cpu_instruction_master_limiter:rsp_src_valid -> cpu_instruction_master_agent:rp_valid
	wire  [120:0] cpu_instruction_master_limiter_rsp_src_data;                                               // cpu_instruction_master_limiter:rsp_src_data -> cpu_instruction_master_agent:rp_data
	wire          cpu_instruction_master_limiter_rsp_src_ready;                                              // cpu_instruction_master_agent:rp_ready -> cpu_instruction_master_limiter:rsp_src_ready
	wire   [20:0] cpu_instruction_master_limiter_rsp_src_channel;                                            // cpu_instruction_master_limiter:rsp_src_channel -> cpu_instruction_master_agent:rp_channel
	wire          cpu_instruction_master_limiter_rsp_src_startofpacket;                                      // cpu_instruction_master_limiter:rsp_src_startofpacket -> cpu_instruction_master_agent:rp_startofpacket
	wire          cpu_instruction_master_limiter_rsp_src_endofpacket;                                        // cpu_instruction_master_limiter:rsp_src_endofpacket -> cpu_instruction_master_agent:rp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                     // cmd_mux_002:src_valid -> ext_flash_avl_mem_burst_adapter:sink0_valid
	wire  [120:0] cmd_mux_002_src_data;                                                                      // cmd_mux_002:src_data -> ext_flash_avl_mem_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                                     // ext_flash_avl_mem_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [20:0] cmd_mux_002_src_channel;                                                                   // cmd_mux_002:src_channel -> ext_flash_avl_mem_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                             // cmd_mux_002:src_startofpacket -> ext_flash_avl_mem_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                               // cmd_mux_002:src_endofpacket -> ext_flash_avl_mem_burst_adapter:sink0_endofpacket
	wire          ext_flash_avl_mem_burst_adapter_source0_valid;                                             // ext_flash_avl_mem_burst_adapter:source0_valid -> ext_flash_avl_mem_agent:cp_valid
	wire  [120:0] ext_flash_avl_mem_burst_adapter_source0_data;                                              // ext_flash_avl_mem_burst_adapter:source0_data -> ext_flash_avl_mem_agent:cp_data
	wire          ext_flash_avl_mem_burst_adapter_source0_ready;                                             // ext_flash_avl_mem_agent:cp_ready -> ext_flash_avl_mem_burst_adapter:source0_ready
	wire   [20:0] ext_flash_avl_mem_burst_adapter_source0_channel;                                           // ext_flash_avl_mem_burst_adapter:source0_channel -> ext_flash_avl_mem_agent:cp_channel
	wire          ext_flash_avl_mem_burst_adapter_source0_startofpacket;                                     // ext_flash_avl_mem_burst_adapter:source0_startofpacket -> ext_flash_avl_mem_agent:cp_startofpacket
	wire          ext_flash_avl_mem_burst_adapter_source0_endofpacket;                                       // ext_flash_avl_mem_burst_adapter:source0_endofpacket -> ext_flash_avl_mem_agent:cp_endofpacket
	wire          calibration_ram_s1_burst_adapter_source0_valid;                                            // calibration_ram_s1_burst_adapter:source0_valid -> calibration_ram_s1_agent:cp_valid
	wire  [102:0] calibration_ram_s1_burst_adapter_source0_data;                                             // calibration_ram_s1_burst_adapter:source0_data -> calibration_ram_s1_agent:cp_data
	wire          calibration_ram_s1_burst_adapter_source0_ready;                                            // calibration_ram_s1_agent:cp_ready -> calibration_ram_s1_burst_adapter:source0_ready
	wire   [20:0] calibration_ram_s1_burst_adapter_source0_channel;                                          // calibration_ram_s1_burst_adapter:source0_channel -> calibration_ram_s1_agent:cp_channel
	wire          calibration_ram_s1_burst_adapter_source0_startofpacket;                                    // calibration_ram_s1_burst_adapter:source0_startofpacket -> calibration_ram_s1_agent:cp_startofpacket
	wire          calibration_ram_s1_burst_adapter_source0_endofpacket;                                      // calibration_ram_s1_burst_adapter:source0_endofpacket -> calibration_ram_s1_agent:cp_endofpacket
	wire          cmd_demux_src3_valid;                                                                      // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [120:0] cmd_demux_src3_data;                                                                       // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                      // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [20:0] cmd_demux_src3_channel;                                                                    // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                              // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                      // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [120:0] cmd_demux_src4_data;                                                                       // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                      // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [20:0] cmd_demux_src4_channel;                                                                    // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                              // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                      // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [120:0] cmd_demux_src5_data;                                                                       // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                      // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [20:0] cmd_demux_src5_channel;                                                                    // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                              // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                      // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [120:0] cmd_demux_src6_data;                                                                       // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                      // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [20:0] cmd_demux_src6_channel;                                                                    // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                              // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                                // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                      // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [120:0] cmd_demux_src7_data;                                                                       // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                      // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [20:0] cmd_demux_src7_channel;                                                                    // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                              // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                                // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                      // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [120:0] cmd_demux_src8_data;                                                                       // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                      // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [20:0] cmd_demux_src8_channel;                                                                    // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                              // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                                // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                      // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [120:0] cmd_demux_src9_data;                                                                       // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                                      // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [20:0] cmd_demux_src9_channel;                                                                    // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                              // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                                // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                                     // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [120:0] cmd_demux_src10_data;                                                                      // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                                     // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [20:0] cmd_demux_src10_channel;                                                                   // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                             // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                               // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                                     // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [120:0] cmd_demux_src11_data;                                                                      // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                                     // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [20:0] cmd_demux_src11_channel;                                                                   // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                             // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                               // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                                     // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [120:0] cmd_demux_src12_data;                                                                      // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                                     // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [20:0] cmd_demux_src12_channel;                                                                   // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                             // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                               // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                                     // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [120:0] cmd_demux_src13_data;                                                                      // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                                     // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [20:0] cmd_demux_src13_channel;                                                                   // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                             // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                               // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                                     // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [120:0] cmd_demux_src14_data;                                                                      // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                                     // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [20:0] cmd_demux_src14_channel;                                                                   // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                             // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                               // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                                     // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [120:0] cmd_demux_src15_data;                                                                      // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                                     // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [20:0] cmd_demux_src15_channel;                                                                   // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                             // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                               // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                                     // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [120:0] cmd_demux_src16_data;                                                                      // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                                     // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [20:0] cmd_demux_src16_channel;                                                                   // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                             // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                               // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                                     // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [120:0] cmd_demux_src17_data;                                                                      // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                                     // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [20:0] cmd_demux_src17_channel;                                                                   // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                             // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                               // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                                     // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [120:0] cmd_demux_src18_data;                                                                      // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                                     // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [20:0] cmd_demux_src18_channel;                                                                   // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                                             // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                               // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                                     // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [120:0] cmd_demux_src19_data;                                                                      // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                                     // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [20:0] cmd_demux_src19_channel;                                                                   // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                                             // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                               // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                                     // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [120:0] cmd_demux_src20_data;                                                                      // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                                     // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [20:0] cmd_demux_src20_channel;                                                                   // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                             // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                               // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                  // cmd_demux_001:src2_valid -> cmd_mux_010:sink1_valid
	wire  [120:0] cmd_demux_001_src2_data;                                                                   // cmd_demux_001:src2_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src2_ready;                                                                  // cmd_mux_010:sink1_ready -> cmd_demux_001:src2_ready
	wire   [20:0] cmd_demux_001_src2_channel;                                                                // cmd_demux_001:src2_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                          // cmd_demux_001:src2_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                            // cmd_demux_001:src2_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                  // cmd_demux_001:src3_valid -> cmd_mux_011:sink1_valid
	wire  [120:0] cmd_demux_001_src3_data;                                                                   // cmd_demux_001:src3_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src3_ready;                                                                  // cmd_mux_011:sink1_ready -> cmd_demux_001:src3_ready
	wire   [20:0] cmd_demux_001_src3_channel;                                                                // cmd_demux_001:src3_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                          // cmd_demux_001:src3_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                            // cmd_demux_001:src3_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                  // cmd_demux_004:src0_valid -> cmd_mux_014:sink1_valid
	wire  [120:0] cmd_demux_004_src0_data;                                                                   // cmd_demux_004:src0_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_004_src0_ready;                                                                  // cmd_mux_014:sink1_ready -> cmd_demux_004:src0_ready
	wire   [20:0] cmd_demux_004_src0_channel;                                                                // cmd_demux_004:src0_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_004_src0_startofpacket;                                                          // cmd_demux_004:src0_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                            // cmd_demux_004:src0_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_005_src0_valid;                                                                  // cmd_demux_005:src0_valid -> cmd_mux_014:sink2_valid
	wire  [120:0] cmd_demux_005_src0_data;                                                                   // cmd_demux_005:src0_data -> cmd_mux_014:sink2_data
	wire          cmd_demux_005_src0_ready;                                                                  // cmd_mux_014:sink2_ready -> cmd_demux_005:src0_ready
	wire   [20:0] cmd_demux_005_src0_channel;                                                                // cmd_demux_005:src0_channel -> cmd_mux_014:sink2_channel
	wire          cmd_demux_005_src0_startofpacket;                                                          // cmd_demux_005:src0_startofpacket -> cmd_mux_014:sink2_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                            // cmd_demux_005:src0_endofpacket -> cmd_mux_014:sink2_endofpacket
	wire          cmd_demux_006_src0_valid;                                                                  // cmd_demux_006:src0_valid -> cmd_mux_014:sink3_valid
	wire  [120:0] cmd_demux_006_src0_data;                                                                   // cmd_demux_006:src0_data -> cmd_mux_014:sink3_data
	wire          cmd_demux_006_src0_ready;                                                                  // cmd_mux_014:sink3_ready -> cmd_demux_006:src0_ready
	wire   [20:0] cmd_demux_006_src0_channel;                                                                // cmd_demux_006:src0_channel -> cmd_mux_014:sink3_channel
	wire          cmd_demux_006_src0_startofpacket;                                                          // cmd_demux_006:src0_startofpacket -> cmd_mux_014:sink3_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                            // cmd_demux_006:src0_endofpacket -> cmd_mux_014:sink3_endofpacket
	wire          cmd_demux_007_src0_valid;                                                                  // cmd_demux_007:src0_valid -> cmd_mux_014:sink4_valid
	wire  [120:0] cmd_demux_007_src0_data;                                                                   // cmd_demux_007:src0_data -> cmd_mux_014:sink4_data
	wire          cmd_demux_007_src0_ready;                                                                  // cmd_mux_014:sink4_ready -> cmd_demux_007:src0_ready
	wire   [20:0] cmd_demux_007_src0_channel;                                                                // cmd_demux_007:src0_channel -> cmd_mux_014:sink4_channel
	wire          cmd_demux_007_src0_startofpacket;                                                          // cmd_demux_007:src0_startofpacket -> cmd_mux_014:sink4_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                            // cmd_demux_007:src0_endofpacket -> cmd_mux_014:sink4_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                  // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [120:0] rsp_demux_003_src0_data;                                                                   // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                  // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [20:0] rsp_demux_003_src0_channel;                                                                // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                          // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                            // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                  // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [120:0] rsp_demux_004_src0_data;                                                                   // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                  // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [20:0] rsp_demux_004_src0_channel;                                                                // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                          // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                            // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                  // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [120:0] rsp_demux_005_src0_data;                                                                   // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                  // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [20:0] rsp_demux_005_src0_channel;                                                                // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                          // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                            // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                  // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [120:0] rsp_demux_006_src0_data;                                                                   // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                  // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [20:0] rsp_demux_006_src0_channel;                                                                // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                          // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                            // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                  // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [120:0] rsp_demux_007_src0_data;                                                                   // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                  // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [20:0] rsp_demux_007_src0_channel;                                                                // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                          // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                            // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                  // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [120:0] rsp_demux_008_src0_data;                                                                   // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                  // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [20:0] rsp_demux_008_src0_channel;                                                                // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                          // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                            // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                  // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [120:0] rsp_demux_009_src0_data;                                                                   // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                  // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [20:0] rsp_demux_009_src0_channel;                                                                // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                          // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                            // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                  // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [120:0] rsp_demux_010_src0_data;                                                                   // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                  // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [20:0] rsp_demux_010_src0_channel;                                                                // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                          // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                            // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                                  // rsp_demux_010:src1_valid -> rsp_mux_001:sink2_valid
	wire  [120:0] rsp_demux_010_src1_data;                                                                   // rsp_demux_010:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_010_src1_ready;                                                                  // rsp_mux_001:sink2_ready -> rsp_demux_010:src1_ready
	wire   [20:0] rsp_demux_010_src1_channel;                                                                // rsp_demux_010:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_010_src1_startofpacket;                                                          // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                            // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                  // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [120:0] rsp_demux_011_src0_data;                                                                   // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                                  // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [20:0] rsp_demux_011_src0_channel;                                                                // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                          // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                            // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                                  // rsp_demux_011:src1_valid -> rsp_mux_001:sink3_valid
	wire  [120:0] rsp_demux_011_src1_data;                                                                   // rsp_demux_011:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_011_src1_ready;                                                                  // rsp_mux_001:sink3_ready -> rsp_demux_011:src1_ready
	wire   [20:0] rsp_demux_011_src1_channel;                                                                // rsp_demux_011:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_011_src1_startofpacket;                                                          // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                            // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                  // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [120:0] rsp_demux_012_src0_data;                                                                   // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                                  // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [20:0] rsp_demux_012_src0_channel;                                                                // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                          // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                            // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                  // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [120:0] rsp_demux_013_src0_data;                                                                   // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                                  // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [20:0] rsp_demux_013_src0_channel;                                                                // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                          // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                            // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                  // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [120:0] rsp_demux_014_src0_data;                                                                   // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                                  // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [20:0] rsp_demux_014_src0_channel;                                                                // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                          // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                            // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_014_src1_valid;                                                                  // rsp_demux_014:src1_valid -> rsp_mux_004:sink0_valid
	wire  [120:0] rsp_demux_014_src1_data;                                                                   // rsp_demux_014:src1_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_014_src1_ready;                                                                  // rsp_mux_004:sink0_ready -> rsp_demux_014:src1_ready
	wire   [20:0] rsp_demux_014_src1_channel;                                                                // rsp_demux_014:src1_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_014_src1_startofpacket;                                                          // rsp_demux_014:src1_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                                            // rsp_demux_014:src1_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_014_src2_valid;                                                                  // rsp_demux_014:src2_valid -> rsp_mux_005:sink0_valid
	wire  [120:0] rsp_demux_014_src2_data;                                                                   // rsp_demux_014:src2_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_014_src2_ready;                                                                  // rsp_mux_005:sink0_ready -> rsp_demux_014:src2_ready
	wire   [20:0] rsp_demux_014_src2_channel;                                                                // rsp_demux_014:src2_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_014_src2_startofpacket;                                                          // rsp_demux_014:src2_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_014_src2_endofpacket;                                                            // rsp_demux_014:src2_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_014_src3_valid;                                                                  // rsp_demux_014:src3_valid -> rsp_mux_006:sink0_valid
	wire  [120:0] rsp_demux_014_src3_data;                                                                   // rsp_demux_014:src3_data -> rsp_mux_006:sink0_data
	wire          rsp_demux_014_src3_ready;                                                                  // rsp_mux_006:sink0_ready -> rsp_demux_014:src3_ready
	wire   [20:0] rsp_demux_014_src3_channel;                                                                // rsp_demux_014:src3_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_014_src3_startofpacket;                                                          // rsp_demux_014:src3_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          rsp_demux_014_src3_endofpacket;                                                            // rsp_demux_014:src3_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_014_src4_valid;                                                                  // rsp_demux_014:src4_valid -> rsp_mux_007:sink0_valid
	wire  [120:0] rsp_demux_014_src4_data;                                                                   // rsp_demux_014:src4_data -> rsp_mux_007:sink0_data
	wire          rsp_demux_014_src4_ready;                                                                  // rsp_mux_007:sink0_ready -> rsp_demux_014:src4_ready
	wire   [20:0] rsp_demux_014_src4_channel;                                                                // rsp_demux_014:src4_channel -> rsp_mux_007:sink0_channel
	wire          rsp_demux_014_src4_startofpacket;                                                          // rsp_demux_014:src4_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          rsp_demux_014_src4_endofpacket;                                                            // rsp_demux_014:src4_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                  // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [120:0] rsp_demux_015_src0_data;                                                                   // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                                  // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [20:0] rsp_demux_015_src0_channel;                                                                // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                          // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                            // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                  // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [120:0] rsp_demux_016_src0_data;                                                                   // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                                  // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [20:0] rsp_demux_016_src0_channel;                                                                // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                          // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                            // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                                  // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [120:0] rsp_demux_017_src0_data;                                                                   // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                                  // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [20:0] rsp_demux_017_src0_channel;                                                                // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                          // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                            // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                                  // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [120:0] rsp_demux_018_src0_data;                                                                   // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                                  // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [20:0] rsp_demux_018_src0_channel;                                                                // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                          // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                            // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                                  // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [120:0] rsp_demux_019_src0_data;                                                                   // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                                  // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [20:0] rsp_demux_019_src0_channel;                                                                // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                          // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                            // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                                  // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [120:0] rsp_demux_020_src0_data;                                                                   // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                                  // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [20:0] rsp_demux_020_src0_channel;                                                                // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                          // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                            // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          router_028_src_valid;                                                                      // router_028:src_valid -> calibration_ram_s1_rsp_width_adapter:in_valid
	wire  [102:0] router_028_src_data;                                                                       // router_028:src_data -> calibration_ram_s1_rsp_width_adapter:in_data
	wire          router_028_src_ready;                                                                      // calibration_ram_s1_rsp_width_adapter:in_ready -> router_028:src_ready
	wire   [20:0] router_028_src_channel;                                                                    // router_028:src_channel -> calibration_ram_s1_rsp_width_adapter:in_channel
	wire          router_028_src_startofpacket;                                                              // router_028:src_startofpacket -> calibration_ram_s1_rsp_width_adapter:in_startofpacket
	wire          router_028_src_endofpacket;                                                                // router_028:src_endofpacket -> calibration_ram_s1_rsp_width_adapter:in_endofpacket
	wire          calibration_ram_s1_rsp_width_adapter_src_valid;                                            // calibration_ram_s1_rsp_width_adapter:out_valid -> rsp_demux_020:sink_valid
	wire  [120:0] calibration_ram_s1_rsp_width_adapter_src_data;                                             // calibration_ram_s1_rsp_width_adapter:out_data -> rsp_demux_020:sink_data
	wire          calibration_ram_s1_rsp_width_adapter_src_ready;                                            // rsp_demux_020:sink_ready -> calibration_ram_s1_rsp_width_adapter:out_ready
	wire   [20:0] calibration_ram_s1_rsp_width_adapter_src_channel;                                          // calibration_ram_s1_rsp_width_adapter:out_channel -> rsp_demux_020:sink_channel
	wire          calibration_ram_s1_rsp_width_adapter_src_startofpacket;                                    // calibration_ram_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          calibration_ram_s1_rsp_width_adapter_src_endofpacket;                                      // calibration_ram_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                                     // cmd_mux_020:src_valid -> calibration_ram_s1_cmd_width_adapter:in_valid
	wire  [120:0] cmd_mux_020_src_data;                                                                      // cmd_mux_020:src_data -> calibration_ram_s1_cmd_width_adapter:in_data
	wire          cmd_mux_020_src_ready;                                                                     // calibration_ram_s1_cmd_width_adapter:in_ready -> cmd_mux_020:src_ready
	wire   [20:0] cmd_mux_020_src_channel;                                                                   // cmd_mux_020:src_channel -> calibration_ram_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_020_src_startofpacket;                                                             // cmd_mux_020:src_startofpacket -> calibration_ram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                               // cmd_mux_020:src_endofpacket -> calibration_ram_s1_cmd_width_adapter:in_endofpacket
	wire          calibration_ram_s1_cmd_width_adapter_src_valid;                                            // calibration_ram_s1_cmd_width_adapter:out_valid -> calibration_ram_s1_burst_adapter:sink0_valid
	wire  [102:0] calibration_ram_s1_cmd_width_adapter_src_data;                                             // calibration_ram_s1_cmd_width_adapter:out_data -> calibration_ram_s1_burst_adapter:sink0_data
	wire          calibration_ram_s1_cmd_width_adapter_src_ready;                                            // calibration_ram_s1_burst_adapter:sink0_ready -> calibration_ram_s1_cmd_width_adapter:out_ready
	wire   [20:0] calibration_ram_s1_cmd_width_adapter_src_channel;                                          // calibration_ram_s1_cmd_width_adapter:out_channel -> calibration_ram_s1_burst_adapter:sink0_channel
	wire          calibration_ram_s1_cmd_width_adapter_src_startofpacket;                                    // calibration_ram_s1_cmd_width_adapter:out_startofpacket -> calibration_ram_s1_burst_adapter:sink0_startofpacket
	wire          calibration_ram_s1_cmd_width_adapter_src_endofpacket;                                      // calibration_ram_s1_cmd_width_adapter:out_endofpacket -> calibration_ram_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                                      // cmd_demux:src0_valid -> crosser:in_valid
	wire  [120:0] cmd_demux_src0_data;                                                                       // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                                      // crosser:in_ready -> cmd_demux:src0_ready
	wire   [20:0] cmd_demux_src0_channel;                                                                    // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                                              // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                         // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [120:0] crosser_out_data;                                                                          // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                                         // cmd_mux:sink0_ready -> crosser:out_ready
	wire   [20:0] crosser_out_channel;                                                                       // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                                 // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                   // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                      // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [120:0] cmd_demux_src1_data;                                                                       // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                                                      // crosser_001:in_ready -> cmd_demux:src1_ready
	wire   [20:0] cmd_demux_src1_channel;                                                                    // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                                              // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                     // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [120:0] crosser_001_out_data;                                                                      // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                                                     // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire   [20:0] crosser_001_out_channel;                                                                   // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                                             // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                               // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                      // cmd_demux:src2_valid -> crosser_002:in_valid
	wire  [120:0] cmd_demux_src2_data;                                                                       // cmd_demux:src2_data -> crosser_002:in_data
	wire          cmd_demux_src2_ready;                                                                      // crosser_002:in_ready -> cmd_demux:src2_ready
	wire   [20:0] cmd_demux_src2_channel;                                                                    // cmd_demux:src2_channel -> crosser_002:in_channel
	wire          cmd_demux_src2_startofpacket;                                                              // cmd_demux:src2_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                // cmd_demux:src2_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                     // crosser_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [120:0] crosser_002_out_data;                                                                      // crosser_002:out_data -> cmd_mux_002:sink0_data
	wire          crosser_002_out_ready;                                                                     // cmd_mux_002:sink0_ready -> crosser_002:out_ready
	wire   [20:0] crosser_002_out_channel;                                                                   // crosser_002:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_002_out_startofpacket;                                                             // crosser_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                               // crosser_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                  // cmd_demux_001:src0_valid -> crosser_003:in_valid
	wire  [120:0] cmd_demux_001_src0_data;                                                                   // cmd_demux_001:src0_data -> crosser_003:in_data
	wire          cmd_demux_001_src0_ready;                                                                  // crosser_003:in_ready -> cmd_demux_001:src0_ready
	wire   [20:0] cmd_demux_001_src0_channel;                                                                // cmd_demux_001:src0_channel -> crosser_003:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                          // cmd_demux_001:src0_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                            // cmd_demux_001:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                     // crosser_003:out_valid -> cmd_mux:sink1_valid
	wire  [120:0] crosser_003_out_data;                                                                      // crosser_003:out_data -> cmd_mux:sink1_data
	wire          crosser_003_out_ready;                                                                     // cmd_mux:sink1_ready -> crosser_003:out_ready
	wire   [20:0] crosser_003_out_channel;                                                                   // crosser_003:out_channel -> cmd_mux:sink1_channel
	wire          crosser_003_out_startofpacket;                                                             // crosser_003:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_003_out_endofpacket;                                                               // crosser_003:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                  // cmd_demux_001:src1_valid -> crosser_004:in_valid
	wire  [120:0] cmd_demux_001_src1_data;                                                                   // cmd_demux_001:src1_data -> crosser_004:in_data
	wire          cmd_demux_001_src1_ready;                                                                  // crosser_004:in_ready -> cmd_demux_001:src1_ready
	wire   [20:0] cmd_demux_001_src1_channel;                                                                // cmd_demux_001:src1_channel -> crosser_004:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                          // cmd_demux_001:src1_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                            // cmd_demux_001:src1_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                     // crosser_004:out_valid -> cmd_mux_002:sink1_valid
	wire  [120:0] crosser_004_out_data;                                                                      // crosser_004:out_data -> cmd_mux_002:sink1_data
	wire          crosser_004_out_ready;                                                                     // cmd_mux_002:sink1_ready -> crosser_004:out_ready
	wire   [20:0] crosser_004_out_channel;                                                                   // crosser_004:out_channel -> cmd_mux_002:sink1_channel
	wire          crosser_004_out_startofpacket;                                                             // crosser_004:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          crosser_004_out_endofpacket;                                                               // crosser_004:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                  // cmd_demux_002:src0_valid -> crosser_005:in_valid
	wire  [120:0] cmd_demux_002_src0_data;                                                                   // cmd_demux_002:src0_data -> crosser_005:in_data
	wire          cmd_demux_002_src0_ready;                                                                  // crosser_005:in_ready -> cmd_demux_002:src0_ready
	wire   [20:0] cmd_demux_002_src0_channel;                                                                // cmd_demux_002:src0_channel -> crosser_005:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                          // cmd_demux_002:src0_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                            // cmd_demux_002:src0_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                     // crosser_005:out_valid -> cmd_mux:sink2_valid
	wire  [120:0] crosser_005_out_data;                                                                      // crosser_005:out_data -> cmd_mux:sink2_data
	wire          crosser_005_out_ready;                                                                     // cmd_mux:sink2_ready -> crosser_005:out_ready
	wire   [20:0] crosser_005_out_channel;                                                                   // crosser_005:out_channel -> cmd_mux:sink2_channel
	wire          crosser_005_out_startofpacket;                                                             // crosser_005:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          crosser_005_out_endofpacket;                                                               // crosser_005:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                  // cmd_demux_003:src0_valid -> crosser_006:in_valid
	wire  [120:0] cmd_demux_003_src0_data;                                                                   // cmd_demux_003:src0_data -> crosser_006:in_data
	wire          cmd_demux_003_src0_ready;                                                                  // crosser_006:in_ready -> cmd_demux_003:src0_ready
	wire   [20:0] cmd_demux_003_src0_channel;                                                                // cmd_demux_003:src0_channel -> crosser_006:in_channel
	wire          cmd_demux_003_src0_startofpacket;                                                          // cmd_demux_003:src0_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                            // cmd_demux_003:src0_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                                     // crosser_006:out_valid -> cmd_mux:sink3_valid
	wire  [120:0] crosser_006_out_data;                                                                      // crosser_006:out_data -> cmd_mux:sink3_data
	wire          crosser_006_out_ready;                                                                     // cmd_mux:sink3_ready -> crosser_006:out_ready
	wire   [20:0] crosser_006_out_channel;                                                                   // crosser_006:out_channel -> cmd_mux:sink3_channel
	wire          crosser_006_out_startofpacket;                                                             // crosser_006:out_startofpacket -> cmd_mux:sink3_startofpacket
	wire          crosser_006_out_endofpacket;                                                               // crosser_006:out_endofpacket -> cmd_mux:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                                                      // rsp_demux:src0_valid -> crosser_007:in_valid
	wire  [120:0] rsp_demux_src0_data;                                                                       // rsp_demux:src0_data -> crosser_007:in_data
	wire          rsp_demux_src0_ready;                                                                      // crosser_007:in_ready -> rsp_demux:src0_ready
	wire   [20:0] rsp_demux_src0_channel;                                                                    // rsp_demux:src0_channel -> crosser_007:in_channel
	wire          rsp_demux_src0_startofpacket;                                                              // rsp_demux:src0_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                // rsp_demux:src0_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                                     // crosser_007:out_valid -> rsp_mux:sink0_valid
	wire  [120:0] crosser_007_out_data;                                                                      // crosser_007:out_data -> rsp_mux:sink0_data
	wire          crosser_007_out_ready;                                                                     // rsp_mux:sink0_ready -> crosser_007:out_ready
	wire   [20:0] crosser_007_out_channel;                                                                   // crosser_007:out_channel -> rsp_mux:sink0_channel
	wire          crosser_007_out_startofpacket;                                                             // crosser_007:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_007_out_endofpacket;                                                               // crosser_007:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                      // rsp_demux:src1_valid -> crosser_008:in_valid
	wire  [120:0] rsp_demux_src1_data;                                                                       // rsp_demux:src1_data -> crosser_008:in_data
	wire          rsp_demux_src1_ready;                                                                      // crosser_008:in_ready -> rsp_demux:src1_ready
	wire   [20:0] rsp_demux_src1_channel;                                                                    // rsp_demux:src1_channel -> crosser_008:in_channel
	wire          rsp_demux_src1_startofpacket;                                                              // rsp_demux:src1_startofpacket -> crosser_008:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                // rsp_demux:src1_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                                     // crosser_008:out_valid -> rsp_mux_001:sink0_valid
	wire  [120:0] crosser_008_out_data;                                                                      // crosser_008:out_data -> rsp_mux_001:sink0_data
	wire          crosser_008_out_ready;                                                                     // rsp_mux_001:sink0_ready -> crosser_008:out_ready
	wire   [20:0] crosser_008_out_channel;                                                                   // crosser_008:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_008_out_startofpacket;                                                             // crosser_008:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_008_out_endofpacket;                                                               // crosser_008:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                                      // rsp_demux:src2_valid -> crosser_009:in_valid
	wire  [120:0] rsp_demux_src2_data;                                                                       // rsp_demux:src2_data -> crosser_009:in_data
	wire          rsp_demux_src2_ready;                                                                      // crosser_009:in_ready -> rsp_demux:src2_ready
	wire   [20:0] rsp_demux_src2_channel;                                                                    // rsp_demux:src2_channel -> crosser_009:in_channel
	wire          rsp_demux_src2_startofpacket;                                                              // rsp_demux:src2_startofpacket -> crosser_009:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                                // rsp_demux:src2_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                                     // crosser_009:out_valid -> rsp_mux_002:sink0_valid
	wire  [120:0] crosser_009_out_data;                                                                      // crosser_009:out_data -> rsp_mux_002:sink0_data
	wire          crosser_009_out_ready;                                                                     // rsp_mux_002:sink0_ready -> crosser_009:out_ready
	wire   [20:0] crosser_009_out_channel;                                                                   // crosser_009:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_009_out_startofpacket;                                                             // crosser_009:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          crosser_009_out_endofpacket;                                                               // crosser_009:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                                      // rsp_demux:src3_valid -> crosser_010:in_valid
	wire  [120:0] rsp_demux_src3_data;                                                                       // rsp_demux:src3_data -> crosser_010:in_data
	wire          rsp_demux_src3_ready;                                                                      // crosser_010:in_ready -> rsp_demux:src3_ready
	wire   [20:0] rsp_demux_src3_channel;                                                                    // rsp_demux:src3_channel -> crosser_010:in_channel
	wire          rsp_demux_src3_startofpacket;                                                              // rsp_demux:src3_startofpacket -> crosser_010:in_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                                // rsp_demux:src3_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                                     // crosser_010:out_valid -> rsp_mux_003:sink0_valid
	wire  [120:0] crosser_010_out_data;                                                                      // crosser_010:out_data -> rsp_mux_003:sink0_data
	wire          crosser_010_out_ready;                                                                     // rsp_mux_003:sink0_ready -> crosser_010:out_ready
	wire   [20:0] crosser_010_out_channel;                                                                   // crosser_010:out_channel -> rsp_mux_003:sink0_channel
	wire          crosser_010_out_startofpacket;                                                             // crosser_010:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          crosser_010_out_endofpacket;                                                               // crosser_010:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                  // rsp_demux_001:src0_valid -> crosser_011:in_valid
	wire  [120:0] rsp_demux_001_src0_data;                                                                   // rsp_demux_001:src0_data -> crosser_011:in_data
	wire          rsp_demux_001_src0_ready;                                                                  // crosser_011:in_ready -> rsp_demux_001:src0_ready
	wire   [20:0] rsp_demux_001_src0_channel;                                                                // rsp_demux_001:src0_channel -> crosser_011:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                          // rsp_demux_001:src0_startofpacket -> crosser_011:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                            // rsp_demux_001:src0_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                                     // crosser_011:out_valid -> rsp_mux:sink1_valid
	wire  [120:0] crosser_011_out_data;                                                                      // crosser_011:out_data -> rsp_mux:sink1_data
	wire          crosser_011_out_ready;                                                                     // rsp_mux:sink1_ready -> crosser_011:out_ready
	wire   [20:0] crosser_011_out_channel;                                                                   // crosser_011:out_channel -> rsp_mux:sink1_channel
	wire          crosser_011_out_startofpacket;                                                             // crosser_011:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_011_out_endofpacket;                                                               // crosser_011:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                  // rsp_demux_002:src0_valid -> crosser_012:in_valid
	wire  [120:0] rsp_demux_002_src0_data;                                                                   // rsp_demux_002:src0_data -> crosser_012:in_data
	wire          rsp_demux_002_src0_ready;                                                                  // crosser_012:in_ready -> rsp_demux_002:src0_ready
	wire   [20:0] rsp_demux_002_src0_channel;                                                                // rsp_demux_002:src0_channel -> crosser_012:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                          // rsp_demux_002:src0_startofpacket -> crosser_012:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                            // rsp_demux_002:src0_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                                     // crosser_012:out_valid -> rsp_mux:sink2_valid
	wire  [120:0] crosser_012_out_data;                                                                      // crosser_012:out_data -> rsp_mux:sink2_data
	wire          crosser_012_out_ready;                                                                     // rsp_mux:sink2_ready -> crosser_012:out_ready
	wire   [20:0] crosser_012_out_channel;                                                                   // crosser_012:out_channel -> rsp_mux:sink2_channel
	wire          crosser_012_out_startofpacket;                                                             // crosser_012:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          crosser_012_out_endofpacket;                                                               // crosser_012:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                                  // rsp_demux_002:src1_valid -> crosser_013:in_valid
	wire  [120:0] rsp_demux_002_src1_data;                                                                   // rsp_demux_002:src1_data -> crosser_013:in_data
	wire          rsp_demux_002_src1_ready;                                                                  // crosser_013:in_ready -> rsp_demux_002:src1_ready
	wire   [20:0] rsp_demux_002_src1_channel;                                                                // rsp_demux_002:src1_channel -> crosser_013:in_channel
	wire          rsp_demux_002_src1_startofpacket;                                                          // rsp_demux_002:src1_startofpacket -> crosser_013:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                            // rsp_demux_002:src1_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                                     // crosser_013:out_valid -> rsp_mux_001:sink1_valid
	wire  [120:0] crosser_013_out_data;                                                                      // crosser_013:out_data -> rsp_mux_001:sink1_data
	wire          crosser_013_out_ready;                                                                     // rsp_mux_001:sink1_ready -> crosser_013:out_ready
	wire   [20:0] crosser_013_out_channel;                                                                   // crosser_013:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_013_out_startofpacket;                                                             // crosser_013:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_013_out_endofpacket;                                                               // crosser_013:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire   [20:0] cpu_data_master_limiter_cmd_valid_data;                                                    // cpu_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [20:0] cpu_instruction_master_limiter_cmd_valid_data;                                             // cpu_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          ddr3_ram_avl_agent_rdata_fifo_out_valid;                                                   // ddr3_ram_avl_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] ddr3_ram_avl_agent_rdata_fifo_out_data;                                                    // ddr3_ram_avl_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          ddr3_ram_avl_agent_rdata_fifo_out_ready;                                                   // avalon_st_adapter:in_0_ready -> ddr3_ram_avl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                             // avalon_st_adapter:out_0_valid -> ddr3_ram_avl_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                              // avalon_st_adapter:out_0_data -> ddr3_ram_avl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                             // ddr3_ram_avl_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                             // avalon_st_adapter:out_0_error -> ddr3_ram_avl_agent:rdata_fifo_sink_error
	wire          ext_flash_avl_csr_agent_rdata_fifo_out_valid;                                              // ext_flash_avl_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] ext_flash_avl_csr_agent_rdata_fifo_out_data;                                               // ext_flash_avl_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          ext_flash_avl_csr_agent_rdata_fifo_out_ready;                                              // avalon_st_adapter_001:in_0_ready -> ext_flash_avl_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                         // avalon_st_adapter_001:out_0_valid -> ext_flash_avl_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                          // avalon_st_adapter_001:out_0_data -> ext_flash_avl_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                         // ext_flash_avl_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                         // avalon_st_adapter_001:out_0_error -> ext_flash_avl_csr_agent:rdata_fifo_sink_error
	wire          ext_flash_avl_mem_agent_rdata_fifo_out_valid;                                              // ext_flash_avl_mem_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] ext_flash_avl_mem_agent_rdata_fifo_out_data;                                               // ext_flash_avl_mem_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          ext_flash_avl_mem_agent_rdata_fifo_out_ready;                                              // avalon_st_adapter_002:in_0_ready -> ext_flash_avl_mem_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                         // avalon_st_adapter_002:out_0_valid -> ext_flash_avl_mem_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                          // avalon_st_adapter_002:out_0_data -> ext_flash_avl_mem_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                         // ext_flash_avl_mem_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                         // avalon_st_adapter_002:out_0_error -> ext_flash_avl_mem_agent:rdata_fifo_sink_error
	wire          eth_tse_control_port_agent_rdata_fifo_src_valid;                                           // eth_tse_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] eth_tse_control_port_agent_rdata_fifo_src_data;                                            // eth_tse_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          eth_tse_control_port_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_003:in_0_ready -> eth_tse_control_port_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                         // avalon_st_adapter_003:out_0_valid -> eth_tse_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                          // avalon_st_adapter_003:out_0_data -> eth_tse_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                         // eth_tse_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                         // avalon_st_adapter_003:out_0_error -> eth_tse_control_port_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                            // sysid_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                             // sysid_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_004:in_0_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                         // avalon_st_adapter_004:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                          // avalon_st_adapter_004:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                         // sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                         // avalon_st_adapter_004:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	wire          msgdma_tx_csr_agent_rdata_fifo_src_valid;                                                  // msgdma_tx_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] msgdma_tx_csr_agent_rdata_fifo_src_data;                                                   // msgdma_tx_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          msgdma_tx_csr_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_005:in_0_ready -> msgdma_tx_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                         // avalon_st_adapter_005:out_0_valid -> msgdma_tx_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                          // avalon_st_adapter_005:out_0_data -> msgdma_tx_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                         // msgdma_tx_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                         // avalon_st_adapter_005:out_0_error -> msgdma_tx_csr_agent:rdata_fifo_sink_error
	wire          msgdma_rx_csr_agent_rdata_fifo_src_valid;                                                  // msgdma_rx_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] msgdma_rx_csr_agent_rdata_fifo_src_data;                                                   // msgdma_rx_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          msgdma_rx_csr_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_006:in_0_ready -> msgdma_rx_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                         // avalon_st_adapter_006:out_0_valid -> msgdma_rx_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                          // avalon_st_adapter_006:out_0_data -> msgdma_rx_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                         // msgdma_rx_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                         // avalon_st_adapter_006:out_0_error -> msgdma_rx_csr_agent:rdata_fifo_sink_error
	wire          onchip_flash_csr_agent_rdata_fifo_src_valid;                                               // onchip_flash_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] onchip_flash_csr_agent_rdata_fifo_src_data;                                                // onchip_flash_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          onchip_flash_csr_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_007:in_0_ready -> onchip_flash_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                         // avalon_st_adapter_007:out_0_valid -> onchip_flash_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                          // avalon_st_adapter_007:out_0_data -> onchip_flash_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                         // onchip_flash_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                         // avalon_st_adapter_007:out_0_error -> onchip_flash_csr_agent:rdata_fifo_sink_error
	wire          udp_generator_csr_agent_rdata_fifo_src_valid;                                              // udp_generator_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] udp_generator_csr_agent_rdata_fifo_src_data;                                               // udp_generator_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          udp_generator_csr_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_008:in_0_ready -> udp_generator_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                         // avalon_st_adapter_008:out_0_valid -> udp_generator_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                          // avalon_st_adapter_008:out_0_data -> udp_generator_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                         // udp_generator_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                         // avalon_st_adapter_008:out_0_error -> udp_generator_csr_agent:rdata_fifo_sink_error
	wire          sensor_interface_csr_agent_rdata_fifo_src_valid;                                           // sensor_interface_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] sensor_interface_csr_agent_rdata_fifo_src_data;                                            // sensor_interface_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          sensor_interface_csr_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_009:in_0_ready -> sensor_interface_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                         // avalon_st_adapter_009:out_0_valid -> sensor_interface_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                          // avalon_st_adapter_009:out_0_data -> sensor_interface_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                         // sensor_interface_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                         // avalon_st_adapter_009:out_0_error -> sensor_interface_csr_agent:rdata_fifo_sink_error
	wire          onchip_flash_data_agent_rdata_fifo_src_valid;                                              // onchip_flash_data_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] onchip_flash_data_agent_rdata_fifo_src_data;                                               // onchip_flash_data_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          onchip_flash_data_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_010:in_0_ready -> onchip_flash_data_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                         // avalon_st_adapter_010:out_0_valid -> onchip_flash_data_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                          // avalon_st_adapter_010:out_0_data -> onchip_flash_data_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                         // onchip_flash_data_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                         // avalon_st_adapter_010:out_0_error -> onchip_flash_data_agent:rdata_fifo_sink_error
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_valid;                                            // cpu_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] cpu_debug_mem_slave_agent_rdata_fifo_src_data;                                             // cpu_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_011:in_0_ready -> cpu_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                         // avalon_st_adapter_011:out_0_valid -> cpu_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                          // avalon_st_adapter_011:out_0_data -> cpu_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                         // cpu_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                         // avalon_st_adapter_011:out_0_error -> cpu_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          msgdma_tx_prefetcher_csr_agent_rdata_fifo_src_valid;                                       // msgdma_tx_prefetcher_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] msgdma_tx_prefetcher_csr_agent_rdata_fifo_src_data;                                        // msgdma_tx_prefetcher_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          msgdma_tx_prefetcher_csr_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_012:in_0_ready -> msgdma_tx_prefetcher_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                         // avalon_st_adapter_012:out_0_valid -> msgdma_tx_prefetcher_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                          // avalon_st_adapter_012:out_0_data -> msgdma_tx_prefetcher_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                         // msgdma_tx_prefetcher_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                         // avalon_st_adapter_012:out_0_error -> msgdma_tx_prefetcher_csr_agent:rdata_fifo_sink_error
	wire          msgdma_rx_prefetcher_csr_agent_rdata_fifo_src_valid;                                       // msgdma_rx_prefetcher_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] msgdma_rx_prefetcher_csr_agent_rdata_fifo_src_data;                                        // msgdma_rx_prefetcher_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          msgdma_rx_prefetcher_csr_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_013:in_0_ready -> msgdma_rx_prefetcher_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                         // avalon_st_adapter_013:out_0_valid -> msgdma_rx_prefetcher_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                          // avalon_st_adapter_013:out_0_data -> msgdma_rx_prefetcher_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                         // msgdma_rx_prefetcher_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                         // avalon_st_adapter_013:out_0_error -> msgdma_rx_prefetcher_csr_agent:rdata_fifo_sink_error
	wire          descriptor_memory_s1_agent_rdata_fifo_src_valid;                                           // descriptor_memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] descriptor_memory_s1_agent_rdata_fifo_src_data;                                            // descriptor_memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          descriptor_memory_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_014:in_0_ready -> descriptor_memory_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                         // avalon_st_adapter_014:out_0_valid -> descriptor_memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                          // avalon_st_adapter_014:out_0_data -> descriptor_memory_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                         // descriptor_memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                         // avalon_st_adapter_014:out_0_error -> descriptor_memory_s1_agent:rdata_fifo_sink_error
	wire          sys_clk_timer_s1_agent_rdata_fifo_src_valid;                                               // sys_clk_timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] sys_clk_timer_s1_agent_rdata_fifo_src_data;                                                // sys_clk_timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          sys_clk_timer_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_015:in_0_ready -> sys_clk_timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                         // avalon_st_adapter_015:out_0_valid -> sys_clk_timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                          // avalon_st_adapter_015:out_0_data -> sys_clk_timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                         // sys_clk_timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                         // avalon_st_adapter_015:out_0_error -> sys_clk_timer_s1_agent:rdata_fifo_sink_error
	wire          output_pio_s1_agent_rdata_fifo_src_valid;                                                  // output_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] output_pio_s1_agent_rdata_fifo_src_data;                                                   // output_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          output_pio_s1_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_016:in_0_ready -> output_pio_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                         // avalon_st_adapter_016:out_0_valid -> output_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                          // avalon_st_adapter_016:out_0_data -> output_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                         // output_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                         // avalon_st_adapter_016:out_0_error -> output_pio_s1_agent:rdata_fifo_sink_error
	wire          button_pio_s1_agent_rdata_fifo_src_valid;                                                  // button_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] button_pio_s1_agent_rdata_fifo_src_data;                                                   // button_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          button_pio_s1_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_017:in_0_ready -> button_pio_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                         // avalon_st_adapter_017:out_0_valid -> button_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                          // avalon_st_adapter_017:out_0_data -> button_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                         // button_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                         // avalon_st_adapter_017:out_0_error -> button_pio_s1_agent:rdata_fifo_sink_error
	wire          debug_uart_s1_agent_rdata_fifo_src_valid;                                                  // debug_uart_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] debug_uart_s1_agent_rdata_fifo_src_data;                                                   // debug_uart_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          debug_uart_s1_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_018:in_0_ready -> debug_uart_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                         // avalon_st_adapter_018:out_0_valid -> debug_uart_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                          // avalon_st_adapter_018:out_0_data -> debug_uart_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                         // debug_uart_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                         // avalon_st_adapter_018:out_0_error -> debug_uart_s1_agent:rdata_fifo_sink_error
	wire          frame_timer_s1_agent_rdata_fifo_src_valid;                                                 // frame_timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] frame_timer_s1_agent_rdata_fifo_src_data;                                                  // frame_timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          frame_timer_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_019:in_0_ready -> frame_timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                         // avalon_st_adapter_019:out_0_valid -> frame_timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                          // avalon_st_adapter_019:out_0_data -> frame_timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                         // frame_timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                         // avalon_st_adapter_019:out_0_error -> frame_timer_s1_agent:rdata_fifo_sink_error
	wire          calibration_ram_s1_agent_rdata_fifo_src_valid;                                             // calibration_ram_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [17:0] calibration_ram_s1_agent_rdata_fifo_src_data;                                              // calibration_ram_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          calibration_ram_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_020:in_0_ready -> calibration_ram_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                         // avalon_st_adapter_020:out_0_valid -> calibration_ram_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_020_out_0_data;                                                          // avalon_st_adapter_020:out_0_data -> calibration_ram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                         // calibration_ram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                         // avalon_st_adapter_020:out_0_error -> calibration_ram_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_data_master_translator (
		.clk                    (sys_clk_clk_clk),                                                    //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_data_master_read),                                               //                          .read
		.av_readdata            (cpu_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (cpu_data_master_write),                                              //                          .write
		.av_writedata           (cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                    (sys_clk_clk_clk),                                                           //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) msgdma_tx_mm_read_translator (
		.clk                    (sys_clk_clk_clk),                                                      //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (msgdma_tx_mm_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (msgdma_tx_mm_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (msgdma_tx_mm_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (msgdma_tx_mm_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (msgdma_tx_mm_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (msgdma_tx_mm_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (msgdma_tx_mm_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (msgdma_tx_mm_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (msgdma_tx_mm_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (msgdma_tx_mm_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (msgdma_tx_mm_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (msgdma_tx_mm_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (msgdma_tx_mm_read_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (msgdma_tx_mm_read_byteenable),                                         //                          .byteenable
		.av_read                (msgdma_tx_mm_read_read),                                               //                          .read
		.av_readdata            (msgdma_tx_mm_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (msgdma_tx_mm_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_write               (1'b0),                                                                 //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                 //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) msgdma_rx_mm_write_translator (
		.clk                    (sys_clk_clk_clk),                                                       //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                 //                     reset.reset
		.uav_address            (msgdma_rx_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (msgdma_rx_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (msgdma_rx_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (msgdma_rx_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (msgdma_rx_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (msgdma_rx_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (msgdma_rx_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (msgdma_rx_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (msgdma_rx_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (msgdma_rx_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (msgdma_rx_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (msgdma_rx_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (msgdma_rx_mm_write_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (msgdma_rx_mm_write_byteenable),                                         //                          .byteenable
		.av_write               (msgdma_rx_mm_write_write),                                              //                          .write
		.av_writedata           (msgdma_rx_mm_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_read                (1'b0),                                                                  //               (terminated)
		.av_readdata            (),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) msgdma_tx_descriptor_read_master_translator (
		.clk                    (sys_clk_clk_clk),                                                                     //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                               //                     reset.reset
		.uav_address            (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (msgdma_tx_descriptor_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (msgdma_tx_descriptor_read_master_waitrequest),                                        //                          .waitrequest
		.av_read                (msgdma_tx_descriptor_read_master_read),                                               //                          .read
		.av_readdata            (msgdma_tx_descriptor_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (msgdma_tx_descriptor_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                                //               (terminated)
		.av_byteenable          (4'b1111),                                                                             //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                                //               (terminated)
		.av_write               (1'b0),                                                                                //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                //               (terminated)
		.av_lock                (1'b0),                                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                                //               (terminated)
		.uav_clken              (),                                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                                //               (terminated)
		.uav_response           (2'b00),                                                                               //               (terminated)
		.av_response            (),                                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) msgdma_rx_descriptor_read_master_translator (
		.clk                    (sys_clk_clk_clk),                                                                     //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                               //                     reset.reset
		.uav_address            (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (msgdma_rx_descriptor_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (msgdma_rx_descriptor_read_master_waitrequest),                                        //                          .waitrequest
		.av_read                (msgdma_rx_descriptor_read_master_read),                                               //                          .read
		.av_readdata            (msgdma_rx_descriptor_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (msgdma_rx_descriptor_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                                //               (terminated)
		.av_byteenable          (4'b1111),                                                                             //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                                //               (terminated)
		.av_write               (1'b0),                                                                                //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                //               (terminated)
		.av_lock                (1'b0),                                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                                //               (terminated)
		.uav_clken              (),                                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                                //               (terminated)
		.uav_response           (2'b00),                                                                               //               (terminated)
		.av_response            (),                                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (1),
		.USE_WRITERESPONSE           (1),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) msgdma_tx_descriptor_write_master_translator (
		.clk                    (sys_clk_clk_clk),                                                                           //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                                     //                     reset.reset
		.uav_address            (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_address),            // avalon_universal_master_0.address
		.uav_burstcount         (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_burstcount),         //                          .burstcount
		.uav_read               (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_read),               //                          .read
		.uav_write              (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_write),              //                          .write
		.uav_waitrequest        (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_waitrequest),        //                          .waitrequest
		.uav_readdatavalid      (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_readdatavalid),      //                          .readdatavalid
		.uav_byteenable         (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_byteenable),         //                          .byteenable
		.uav_readdata           (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_readdata),           //                          .readdata
		.uav_writedata          (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_writedata),          //                          .writedata
		.uav_lock               (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_lock),               //                          .lock
		.uav_debugaccess        (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_debugaccess),        //                          .debugaccess
		.uav_response           (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_response),           //                          .response
		.uav_writeresponsevalid (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_writeresponsevalid), //                          .writeresponsevalid
		.av_address             (msgdma_tx_descriptor_write_master_address),                                                 //      avalon_anti_master_0.address
		.av_waitrequest         (msgdma_tx_descriptor_write_master_waitrequest),                                             //                          .waitrequest
		.av_byteenable          (msgdma_tx_descriptor_write_master_byteenable),                                              //                          .byteenable
		.av_write               (msgdma_tx_descriptor_write_master_write),                                                   //                          .write
		.av_writedata           (msgdma_tx_descriptor_write_master_writedata),                                               //                          .writedata
		.av_response            (msgdma_tx_descriptor_write_master_response),                                                //                          .response
		.av_writeresponsevalid  (msgdma_tx_descriptor_write_master_writeresponsevalid),                                      //                          .writeresponsevalid
		.av_burstcount          (1'b1),                                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                                      //               (terminated)
		.av_read                (1'b0),                                                                                      //               (terminated)
		.av_readdata            (),                                                                                          //               (terminated)
		.av_readdatavalid       (),                                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                                      //               (terminated)
		.uav_clken              (),                                                                                          //               (terminated)
		.av_clken               (1'b1)                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (1),
		.USE_WRITERESPONSE           (1),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) msgdma_rx_descriptor_write_master_translator (
		.clk                    (sys_clk_clk_clk),                                                                           //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                                     //                     reset.reset
		.uav_address            (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_address),            // avalon_universal_master_0.address
		.uav_burstcount         (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_burstcount),         //                          .burstcount
		.uav_read               (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_read),               //                          .read
		.uav_write              (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_write),              //                          .write
		.uav_waitrequest        (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_waitrequest),        //                          .waitrequest
		.uav_readdatavalid      (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_readdatavalid),      //                          .readdatavalid
		.uav_byteenable         (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_byteenable),         //                          .byteenable
		.uav_readdata           (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_readdata),           //                          .readdata
		.uav_writedata          (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_writedata),          //                          .writedata
		.uav_lock               (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_lock),               //                          .lock
		.uav_debugaccess        (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_debugaccess),        //                          .debugaccess
		.uav_response           (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_response),           //                          .response
		.uav_writeresponsevalid (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_writeresponsevalid), //                          .writeresponsevalid
		.av_address             (msgdma_rx_descriptor_write_master_address),                                                 //      avalon_anti_master_0.address
		.av_waitrequest         (msgdma_rx_descriptor_write_master_waitrequest),                                             //                          .waitrequest
		.av_byteenable          (msgdma_rx_descriptor_write_master_byteenable),                                              //                          .byteenable
		.av_write               (msgdma_rx_descriptor_write_master_write),                                                   //                          .write
		.av_writedata           (msgdma_rx_descriptor_write_master_writedata),                                               //                          .writedata
		.av_response            (msgdma_rx_descriptor_write_master_response),                                                //                          .response
		.av_writeresponsevalid  (msgdma_rx_descriptor_write_master_writeresponsevalid),                                      //                          .writeresponsevalid
		.av_burstcount          (1'b1),                                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                                      //               (terminated)
		.av_read                (1'b0),                                                                                      //               (terminated)
		.av_readdata            (),                                                                                          //               (terminated)
		.av_readdatavalid       (),                                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                                      //               (terminated)
		.uav_clken              (),                                                                                          //               (terminated)
		.av_clken               (1'b1)                                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ddr3_ram_avl_translator (
		.clk                    (ddr3_ram_afi_clk_clk),                                      //                      clk.clk
		.reset                  (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ddr3_ram_avl_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (ddr3_ram_avl_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (ddr3_ram_avl_agent_m0_read),                                //                         .read
		.uav_write              (ddr3_ram_avl_agent_m0_write),                               //                         .write
		.uav_waitrequest        (ddr3_ram_avl_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (ddr3_ram_avl_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (ddr3_ram_avl_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (ddr3_ram_avl_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (ddr3_ram_avl_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (ddr3_ram_avl_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (ddr3_ram_avl_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (ddr3_ram_avl_address),                                      //      avalon_anti_slave_0.address
		.av_write               (ddr3_ram_avl_write),                                        //                         .write
		.av_read                (ddr3_ram_avl_read),                                         //                         .read
		.av_readdata            (ddr3_ram_avl_readdata),                                     //                         .readdata
		.av_writedata           (ddr3_ram_avl_writedata),                                    //                         .writedata
		.av_beginbursttransfer  (ddr3_ram_avl_beginbursttransfer),                           //                         .beginbursttransfer
		.av_burstcount          (ddr3_ram_avl_burstcount),                                   //                         .burstcount
		.av_byteenable          (ddr3_ram_avl_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (ddr3_ram_avl_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (ddr3_ram_avl_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ext_flash_avl_csr_translator (
		.clk                    (ext_flash_clock_bridge_out_clk_clk),          //                      clk.clk
		.reset                  (ext_flash_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ext_flash_avl_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (ext_flash_avl_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (ext_flash_avl_csr_agent_m0_read),             //                         .read
		.uav_write              (ext_flash_avl_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (ext_flash_avl_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (ext_flash_avl_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (ext_flash_avl_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (ext_flash_avl_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (ext_flash_avl_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (ext_flash_avl_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (ext_flash_avl_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (ext_flash_avl_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (ext_flash_avl_csr_write),                     //                         .write
		.av_read                (ext_flash_avl_csr_read),                      //                         .read
		.av_readdata            (ext_flash_avl_csr_readdata),                  //                         .readdata
		.av_writedata           (ext_flash_avl_csr_writedata),                 //                         .writedata
		.av_readdatavalid       (ext_flash_avl_csr_readdatavalid),             //                         .readdatavalid
		.av_waitrequest         (ext_flash_avl_csr_waitrequest),               //                         .waitrequest
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (1),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ext_flash_avl_mem_translator (
		.clk                    (ext_flash_clock_bridge_out_clk_clk),          //                      clk.clk
		.reset                  (ext_flash_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ext_flash_avl_mem_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (ext_flash_avl_mem_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (ext_flash_avl_mem_agent_m0_read),             //                         .read
		.uav_write              (ext_flash_avl_mem_agent_m0_write),            //                         .write
		.uav_waitrequest        (ext_flash_avl_mem_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (ext_flash_avl_mem_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (ext_flash_avl_mem_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (ext_flash_avl_mem_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (ext_flash_avl_mem_agent_m0_writedata),        //                         .writedata
		.uav_lock               (ext_flash_avl_mem_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (ext_flash_avl_mem_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (ext_flash_avl_mem_address),                   //      avalon_anti_slave_0.address
		.av_write               (ext_flash_avl_mem_write),                     //                         .write
		.av_read                (ext_flash_avl_mem_read),                      //                         .read
		.av_readdata            (ext_flash_avl_mem_readdata),                  //                         .readdata
		.av_writedata           (ext_flash_avl_mem_writedata),                 //                         .writedata
		.av_burstcount          (ext_flash_avl_mem_burstcount),                //                         .burstcount
		.av_byteenable          (ext_flash_avl_mem_byteenable),                //                         .byteenable
		.av_readdatavalid       (ext_flash_avl_mem_readdatavalid),             //                         .readdatavalid
		.av_waitrequest         (ext_flash_avl_mem_waitrequest),               //                         .waitrequest
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) eth_tse_control_port_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (eth_tse_reset_connection_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (eth_tse_control_port_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (eth_tse_control_port_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (eth_tse_control_port_agent_m0_read),                   //                         .read
		.uav_write              (eth_tse_control_port_agent_m0_write),                  //                         .write
		.uav_waitrequest        (eth_tse_control_port_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (eth_tse_control_port_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (eth_tse_control_port_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (eth_tse_control_port_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (eth_tse_control_port_agent_m0_writedata),              //                         .writedata
		.uav_lock               (eth_tse_control_port_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (eth_tse_control_port_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (eth_tse_control_port_address),                         //      avalon_anti_slave_0.address
		.av_write               (eth_tse_control_port_write),                           //                         .write
		.av_read                (eth_tse_control_port_read),                            //                         .read
		.av_readdata            (eth_tse_control_port_readdata),                        //                         .readdata
		.av_writedata           (eth_tse_control_port_writedata),                       //                         .writedata
		.av_waitrequest         (eth_tse_control_port_waitrequest),                     //                         .waitrequest
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (eth_tse_reset_connection_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),                    //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),                   //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),               //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (sysid_control_slave_address),                          //      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),                         //                         .readdata
		.av_write               (),                                                     //              (terminated)
		.av_read                (),                                                     //              (terminated)
		.av_writedata           (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) msgdma_tx_csr_translator (
		.clk                    (sys_clk_clk_clk),                       //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (msgdma_tx_csr_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_tx_csr_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (msgdma_tx_csr_agent_m0_read),           //                         .read
		.uav_write              (msgdma_tx_csr_agent_m0_write),          //                         .write
		.uav_waitrequest        (msgdma_tx_csr_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (msgdma_tx_csr_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (msgdma_tx_csr_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (msgdma_tx_csr_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (msgdma_tx_csr_agent_m0_writedata),      //                         .writedata
		.uav_lock               (msgdma_tx_csr_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (msgdma_tx_csr_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (msgdma_tx_csr_address),                 //      avalon_anti_slave_0.address
		.av_write               (msgdma_tx_csr_write),                   //                         .write
		.av_read                (msgdma_tx_csr_read),                    //                         .read
		.av_readdata            (msgdma_tx_csr_readdata),                //                         .readdata
		.av_writedata           (msgdma_tx_csr_writedata),               //                         .writedata
		.av_byteenable          (msgdma_tx_csr_byteenable),              //                         .byteenable
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) msgdma_rx_csr_translator (
		.clk                    (sys_clk_clk_clk),                       //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (msgdma_rx_csr_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_rx_csr_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (msgdma_rx_csr_agent_m0_read),           //                         .read
		.uav_write              (msgdma_rx_csr_agent_m0_write),          //                         .write
		.uav_waitrequest        (msgdma_rx_csr_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (msgdma_rx_csr_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (msgdma_rx_csr_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (msgdma_rx_csr_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (msgdma_rx_csr_agent_m0_writedata),      //                         .writedata
		.uav_lock               (msgdma_rx_csr_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (msgdma_rx_csr_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (msgdma_rx_csr_address),                 //      avalon_anti_slave_0.address
		.av_write               (msgdma_rx_csr_write),                   //                         .write
		.av_read                (msgdma_rx_csr_read),                    //                         .read
		.av_readdata            (msgdma_rx_csr_readdata),                //                         .readdata
		.av_writedata           (msgdma_rx_csr_writedata),               //                         .writedata
		.av_byteenable          (msgdma_rx_csr_byteenable),              //                         .byteenable
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_flash_csr_translator (
		.clk                    (sys_clk_clk_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (onchip_flash_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_flash_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (onchip_flash_csr_agent_m0_read),          //                         .read
		.uav_write              (onchip_flash_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (onchip_flash_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (onchip_flash_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (onchip_flash_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (onchip_flash_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (onchip_flash_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (onchip_flash_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (onchip_flash_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (onchip_flash_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (onchip_flash_csr_write),                  //                         .write
		.av_read                (onchip_flash_csr_read),                   //                         .read
		.av_readdata            (onchip_flash_csr_readdata),               //                         .readdata
		.av_writedata           (onchip_flash_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) udp_generator_csr_translator (
		.clk                    (sys_clk_clk_clk),                          //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (udp_generator_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (udp_generator_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (udp_generator_csr_agent_m0_read),          //                         .read
		.uav_write              (udp_generator_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (udp_generator_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (udp_generator_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (udp_generator_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (udp_generator_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (udp_generator_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (udp_generator_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (udp_generator_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (udp_generator_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (udp_generator_csr_write),                  //                         .write
		.av_read                (udp_generator_csr_read),                   //                         .read
		.av_readdata            (udp_generator_csr_readdata),               //                         .readdata
		.av_writedata           (udp_generator_csr_writedata),              //                         .writedata
		.av_byteenable          (udp_generator_csr_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sensor_interface_csr_translator (
		.clk                    (sys_clk_clk_clk),                             //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (sensor_interface_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sensor_interface_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sensor_interface_csr_agent_m0_read),          //                         .read
		.uav_write              (sensor_interface_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (sensor_interface_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sensor_interface_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sensor_interface_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sensor_interface_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sensor_interface_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sensor_interface_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sensor_interface_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sensor_interface_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (sensor_interface_csr_write),                  //                         .write
		.av_read                (sensor_interface_csr_read),                   //                         .read
		.av_readdata            (sensor_interface_csr_readdata),               //                         .readdata
		.av_writedata           (sensor_interface_csr_writedata),              //                         .writedata
		.av_byteenable          (sensor_interface_csr_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (19),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_flash_data_translator (
		.clk                    (sys_clk_clk_clk),                          //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (onchip_flash_data_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_flash_data_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (onchip_flash_data_agent_m0_read),          //                         .read
		.uav_write              (onchip_flash_data_agent_m0_write),         //                         .write
		.uav_waitrequest        (onchip_flash_data_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (onchip_flash_data_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (onchip_flash_data_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (onchip_flash_data_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (onchip_flash_data_agent_m0_writedata),     //                         .writedata
		.uav_lock               (onchip_flash_data_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (onchip_flash_data_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (onchip_flash_data_address),                //      avalon_anti_slave_0.address
		.av_write               (onchip_flash_data_write),                  //                         .write
		.av_read                (onchip_flash_data_read),                   //                         .read
		.av_readdata            (onchip_flash_data_readdata),               //                         .readdata
		.av_writedata           (onchip_flash_data_writedata),              //                         .writedata
		.av_burstcount          (onchip_flash_data_burstcount),             //                         .burstcount
		.av_readdatavalid       (onchip_flash_data_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (onchip_flash_data_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_debug_mem_slave_translator (
		.clk                    (sys_clk_clk_clk),                            //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpu_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_debug_mem_slave_write),                  //                         .write
		.av_read                (cpu_debug_mem_slave_read),                   //                         .read
		.av_readdata            (cpu_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (cpu_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (cpu_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) msgdma_tx_prefetcher_csr_translator (
		.clk                    (sys_clk_clk_clk),                                 //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (msgdma_tx_prefetcher_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_tx_prefetcher_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (msgdma_tx_prefetcher_csr_agent_m0_read),          //                         .read
		.uav_write              (msgdma_tx_prefetcher_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (msgdma_tx_prefetcher_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (msgdma_tx_prefetcher_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (msgdma_tx_prefetcher_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (msgdma_tx_prefetcher_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (msgdma_tx_prefetcher_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (msgdma_tx_prefetcher_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (msgdma_tx_prefetcher_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (msgdma_tx_prefetcher_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (msgdma_tx_prefetcher_csr_write),                  //                         .write
		.av_read                (msgdma_tx_prefetcher_csr_read),                   //                         .read
		.av_readdata            (msgdma_tx_prefetcher_csr_readdata),               //                         .readdata
		.av_writedata           (msgdma_tx_prefetcher_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) msgdma_rx_prefetcher_csr_translator (
		.clk                    (sys_clk_clk_clk),                                 //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (msgdma_rx_prefetcher_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_rx_prefetcher_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (msgdma_rx_prefetcher_csr_agent_m0_read),          //                         .read
		.uav_write              (msgdma_rx_prefetcher_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (msgdma_rx_prefetcher_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (msgdma_rx_prefetcher_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (msgdma_rx_prefetcher_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (msgdma_rx_prefetcher_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (msgdma_rx_prefetcher_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (msgdma_rx_prefetcher_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (msgdma_rx_prefetcher_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (msgdma_rx_prefetcher_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (msgdma_rx_prefetcher_csr_write),                  //                         .write
		.av_read                (msgdma_rx_prefetcher_csr_read),                   //                         .read
		.av_readdata            (msgdma_rx_prefetcher_csr_readdata),               //                         .readdata
		.av_writedata           (msgdma_rx_prefetcher_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) descriptor_memory_s1_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (eth_tse_reset_connection_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (descriptor_memory_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (descriptor_memory_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (descriptor_memory_s1_agent_m0_read),                   //                         .read
		.uav_write              (descriptor_memory_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (descriptor_memory_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (descriptor_memory_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (descriptor_memory_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (descriptor_memory_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (descriptor_memory_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (descriptor_memory_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (descriptor_memory_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (descriptor_memory_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (descriptor_memory_s1_write),                           //                         .write
		.av_readdata            (descriptor_memory_s1_readdata),                        //                         .readdata
		.av_writedata           (descriptor_memory_s1_writedata),                       //                         .writedata
		.av_byteenable          (descriptor_memory_s1_byteenable),                      //                         .byteenable
		.av_chipselect          (descriptor_memory_s1_chipselect),                      //                         .chipselect
		.av_clken               (descriptor_memory_s1_clken),                           //                         .clken
		.av_read                (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_clk_timer_s1_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (eth_tse_reset_connection_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sys_clk_timer_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (sys_clk_timer_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (sys_clk_timer_s1_agent_m0_read),                       //                         .read
		.uav_write              (sys_clk_timer_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (sys_clk_timer_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (sys_clk_timer_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (sys_clk_timer_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (sys_clk_timer_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (sys_clk_timer_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (sys_clk_timer_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (sys_clk_timer_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (sys_clk_timer_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (sys_clk_timer_s1_write),                               //                         .write
		.av_readdata            (sys_clk_timer_s1_readdata),                            //                         .readdata
		.av_writedata           (sys_clk_timer_s1_writedata),                           //                         .writedata
		.av_chipselect          (sys_clk_timer_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) output_pio_s1_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (eth_tse_reset_connection_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (output_pio_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (output_pio_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (output_pio_s1_agent_m0_read),                          //                         .read
		.uav_write              (output_pio_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (output_pio_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (output_pio_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (output_pio_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (output_pio_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (output_pio_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (output_pio_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (output_pio_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (output_pio_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (output_pio_s1_write),                                  //                         .write
		.av_readdata            (output_pio_s1_readdata),                               //                         .readdata
		.av_writedata           (output_pio_s1_writedata),                              //                         .writedata
		.av_chipselect          (output_pio_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_pio_s1_translator (
		.clk                    (sys_clk_clk_clk),                       //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_pio_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (button_pio_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (button_pio_s1_agent_m0_read),           //                         .read
		.uav_write              (button_pio_s1_agent_m0_write),          //                         .write
		.uav_waitrequest        (button_pio_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (button_pio_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (button_pio_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (button_pio_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (button_pio_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock               (button_pio_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (button_pio_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (button_pio_s1_address),                 //      avalon_anti_slave_0.address
		.av_readdata            (button_pio_s1_readdata),                //                         .readdata
		.av_write               (),                                      //              (terminated)
		.av_read                (),                                      //              (terminated)
		.av_writedata           (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) debug_uart_s1_translator (
		.clk                    (sys_clk_clk_clk),                       //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (debug_uart_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (debug_uart_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (debug_uart_s1_agent_m0_read),           //                         .read
		.uav_write              (debug_uart_s1_agent_m0_write),          //                         .write
		.uav_waitrequest        (debug_uart_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (debug_uart_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (debug_uart_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (debug_uart_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (debug_uart_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock               (debug_uart_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (debug_uart_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (debug_uart_s1_address),                 //      avalon_anti_slave_0.address
		.av_write               (debug_uart_s1_write),                   //                         .write
		.av_read                (debug_uart_s1_read),                    //                         .read
		.av_readdata            (debug_uart_s1_readdata),                //                         .readdata
		.av_writedata           (debug_uart_s1_writedata),               //                         .writedata
		.av_begintransfer       (debug_uart_s1_begintransfer),           //                         .begintransfer
		.av_chipselect          (debug_uart_s1_chipselect),              //                         .chipselect
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) frame_timer_s1_translator (
		.clk                    (sys_clk_clk_clk),                       //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (frame_timer_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (frame_timer_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (frame_timer_s1_agent_m0_read),          //                         .read
		.uav_write              (frame_timer_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (frame_timer_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (frame_timer_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (frame_timer_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (frame_timer_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (frame_timer_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (frame_timer_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (frame_timer_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (frame_timer_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (frame_timer_s1_write),                  //                         .write
		.av_readdata            (frame_timer_s1_readdata),               //                         .readdata
		.av_writedata           (frame_timer_s1_writedata),              //                         .writedata
		.av_chipselect          (frame_timer_s1_chipselect),             //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) calibration_ram_s1_translator (
		.clk                    (sys_clk_clk_clk),                           //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (calibration_ram_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (calibration_ram_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (calibration_ram_s1_agent_m0_read),          //                         .read
		.uav_write              (calibration_ram_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (calibration_ram_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (calibration_ram_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (calibration_ram_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (calibration_ram_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (calibration_ram_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (calibration_ram_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (calibration_ram_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (calibration_ram_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (calibration_ram_s1_write),                  //                         .write
		.av_readdata            (calibration_ram_s1_readdata),               //                         .readdata
		.av_writedata           (calibration_ram_s1_writedata),              //                         .writedata
		.av_byteenable          (calibration_ram_s1_byteenable),             //                         .byteenable
		.av_chipselect          (calibration_ram_s1_chipselect),             //                         .chipselect
		.av_clken               (calibration_ram_s1_clken),                  //                         .clken
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_QOS_H                 (97),
		.PKT_QOS_L                 (97),
		.PKT_DATA_SIDEBAND_H       (95),
		.PKT_DATA_SIDEBAND_L       (95),
		.PKT_ADDR_SIDEBAND_H       (94),
		.PKT_ADDR_SIDEBAND_L       (94),
		.PKT_BURST_TYPE_H          (93),
		.PKT_BURST_TYPE_L          (92),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (108),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                   (sys_clk_clk_clk),                                                    //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_QOS_H                 (97),
		.PKT_QOS_L                 (97),
		.PKT_DATA_SIDEBAND_H       (95),
		.PKT_DATA_SIDEBAND_L       (95),
		.PKT_ADDR_SIDEBAND_H       (94),
		.PKT_ADDR_SIDEBAND_L       (94),
		.PKT_BURST_TYPE_H          (93),
		.PKT_BURST_TYPE_L          (92),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (108),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                   (sys_clk_clk_clk),                                                           //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_QOS_H                 (97),
		.PKT_QOS_L                 (97),
		.PKT_DATA_SIDEBAND_H       (95),
		.PKT_DATA_SIDEBAND_L       (95),
		.PKT_ADDR_SIDEBAND_H       (94),
		.PKT_ADDR_SIDEBAND_L       (94),
		.PKT_BURST_TYPE_H          (93),
		.PKT_BURST_TYPE_L          (92),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (108),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (7),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) msgdma_tx_mm_read_agent (
		.clk                   (sys_clk_clk_clk),                                                      //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (msgdma_tx_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (msgdma_tx_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (msgdma_tx_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (msgdma_tx_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (msgdma_tx_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (msgdma_tx_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (msgdma_tx_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (msgdma_tx_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (msgdma_tx_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (msgdma_tx_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (msgdma_tx_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (msgdma_tx_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (msgdma_tx_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (msgdma_tx_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (msgdma_tx_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (msgdma_tx_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                 //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                              //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                          //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_QOS_H                 (97),
		.PKT_QOS_L                 (97),
		.PKT_DATA_SIDEBAND_H       (95),
		.PKT_DATA_SIDEBAND_L       (95),
		.PKT_ADDR_SIDEBAND_H       (94),
		.PKT_ADDR_SIDEBAND_L       (94),
		.PKT_BURST_TYPE_H          (93),
		.PKT_BURST_TYPE_L          (92),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (108),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) msgdma_rx_mm_write_agent (
		.clk                   (sys_clk_clk_clk),                                                       //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.av_address            (msgdma_rx_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (msgdma_rx_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (msgdma_rx_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (msgdma_rx_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (msgdma_rx_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (msgdma_rx_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (msgdma_rx_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (msgdma_rx_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (msgdma_rx_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (msgdma_rx_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (msgdma_rx_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (msgdma_rx_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (msgdma_rx_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (msgdma_rx_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (msgdma_rx_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (msgdma_rx_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                 //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                  //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                               //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                           //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                 //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_QOS_H                 (97),
		.PKT_QOS_L                 (97),
		.PKT_DATA_SIDEBAND_H       (95),
		.PKT_DATA_SIDEBAND_L       (95),
		.PKT_ADDR_SIDEBAND_H       (94),
		.PKT_ADDR_SIDEBAND_L       (94),
		.PKT_BURST_TYPE_H          (93),
		.PKT_BURST_TYPE_L          (92),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (108),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) msgdma_tx_descriptor_read_master_agent (
		.clk                   (sys_clk_clk_clk),                                                                     //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.av_address            (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (msgdma_tx_descriptor_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (msgdma_tx_descriptor_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (msgdma_tx_descriptor_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (msgdma_tx_descriptor_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (msgdma_tx_descriptor_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (msgdma_tx_descriptor_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                               //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                                //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                             //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                                       //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                                         //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                               //          .ready
		.av_response           (),                                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_QOS_H                 (97),
		.PKT_QOS_L                 (97),
		.PKT_DATA_SIDEBAND_H       (95),
		.PKT_DATA_SIDEBAND_L       (95),
		.PKT_ADDR_SIDEBAND_H       (94),
		.PKT_ADDR_SIDEBAND_L       (94),
		.PKT_BURST_TYPE_H          (93),
		.PKT_BURST_TYPE_L          (92),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (108),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) msgdma_rx_descriptor_read_master_agent (
		.clk                   (sys_clk_clk_clk),                                                                     //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.av_address            (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (msgdma_rx_descriptor_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (msgdma_rx_descriptor_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (msgdma_rx_descriptor_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (msgdma_rx_descriptor_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (msgdma_rx_descriptor_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (msgdma_rx_descriptor_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_005_src_valid),                                                               //        rp.valid
		.rp_data               (rsp_mux_005_src_data),                                                                //          .data
		.rp_channel            (rsp_mux_005_src_channel),                                                             //          .channel
		.rp_startofpacket      (rsp_mux_005_src_startofpacket),                                                       //          .startofpacket
		.rp_endofpacket        (rsp_mux_005_src_endofpacket),                                                         //          .endofpacket
		.rp_ready              (rsp_mux_005_src_ready),                                                               //          .ready
		.av_response           (),                                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_QOS_H                 (97),
		.PKT_QOS_L                 (97),
		.PKT_DATA_SIDEBAND_H       (95),
		.PKT_DATA_SIDEBAND_L       (95),
		.PKT_ADDR_SIDEBAND_H       (94),
		.PKT_ADDR_SIDEBAND_L       (94),
		.PKT_BURST_TYPE_H          (93),
		.PKT_BURST_TYPE_L          (92),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (108),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (1),
		.USE_WRITERESPONSE         (1)
	) msgdma_tx_descriptor_write_master_agent (
		.clk                   (sys_clk_clk_clk),                                                                           //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                                     // clk_reset.reset
		.av_address            (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_address),            //        av.address
		.av_write              (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_write),              //          .write
		.av_read               (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_read),               //          .read
		.av_writedata          (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_writedata),          //          .writedata
		.av_readdata           (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_readdata),           //          .readdata
		.av_waitrequest        (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_waitrequest),        //          .waitrequest
		.av_readdatavalid      (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_readdatavalid),      //          .readdatavalid
		.av_byteenable         (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_byteenable),         //          .byteenable
		.av_burstcount         (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_burstcount),         //          .burstcount
		.av_debugaccess        (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_debugaccess),        //          .debugaccess
		.av_lock               (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_lock),               //          .lock
		.av_response           (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_response),           //          .response
		.av_writeresponsevalid (msgdma_tx_descriptor_write_master_translator_avalon_universal_master_0_writeresponsevalid), //          .writeresponsevalid
		.cp_valid              (msgdma_tx_descriptor_write_master_agent_cp_valid),                                          //        cp.valid
		.cp_data               (msgdma_tx_descriptor_write_master_agent_cp_data),                                           //          .data
		.cp_startofpacket      (msgdma_tx_descriptor_write_master_agent_cp_startofpacket),                                  //          .startofpacket
		.cp_endofpacket        (msgdma_tx_descriptor_write_master_agent_cp_endofpacket),                                    //          .endofpacket
		.cp_ready              (msgdma_tx_descriptor_write_master_agent_cp_ready),                                          //          .ready
		.rp_valid              (rsp_mux_006_src_valid),                                                                     //        rp.valid
		.rp_data               (rsp_mux_006_src_data),                                                                      //          .data
		.rp_channel            (rsp_mux_006_src_channel),                                                                   //          .channel
		.rp_startofpacket      (rsp_mux_006_src_startofpacket),                                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_006_src_endofpacket),                                                               //          .endofpacket
		.rp_ready              (rsp_mux_006_src_ready)                                                                      //          .ready
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_QOS_H                 (97),
		.PKT_QOS_L                 (97),
		.PKT_DATA_SIDEBAND_H       (95),
		.PKT_DATA_SIDEBAND_L       (95),
		.PKT_ADDR_SIDEBAND_H       (94),
		.PKT_ADDR_SIDEBAND_L       (94),
		.PKT_BURST_TYPE_H          (93),
		.PKT_BURST_TYPE_L          (92),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (108),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (1),
		.USE_WRITERESPONSE         (1)
	) msgdma_rx_descriptor_write_master_agent (
		.clk                   (sys_clk_clk_clk),                                                                           //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                                     // clk_reset.reset
		.av_address            (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_address),            //        av.address
		.av_write              (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_write),              //          .write
		.av_read               (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_read),               //          .read
		.av_writedata          (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_writedata),          //          .writedata
		.av_readdata           (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_readdata),           //          .readdata
		.av_waitrequest        (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_waitrequest),        //          .waitrequest
		.av_readdatavalid      (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_readdatavalid),      //          .readdatavalid
		.av_byteenable         (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_byteenable),         //          .byteenable
		.av_burstcount         (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_burstcount),         //          .burstcount
		.av_debugaccess        (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_debugaccess),        //          .debugaccess
		.av_lock               (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_lock),               //          .lock
		.av_response           (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_response),           //          .response
		.av_writeresponsevalid (msgdma_rx_descriptor_write_master_translator_avalon_universal_master_0_writeresponsevalid), //          .writeresponsevalid
		.cp_valid              (msgdma_rx_descriptor_write_master_agent_cp_valid),                                          //        cp.valid
		.cp_data               (msgdma_rx_descriptor_write_master_agent_cp_data),                                           //          .data
		.cp_startofpacket      (msgdma_rx_descriptor_write_master_agent_cp_startofpacket),                                  //          .startofpacket
		.cp_endofpacket        (msgdma_rx_descriptor_write_master_agent_cp_endofpacket),                                    //          .endofpacket
		.cp_ready              (msgdma_rx_descriptor_write_master_agent_cp_ready),                                          //          .ready
		.rp_valid              (rsp_mux_007_src_valid),                                                                     //        rp.valid
		.rp_data               (rsp_mux_007_src_data),                                                                      //          .data
		.rp_channel            (rsp_mux_007_src_channel),                                                                   //          .channel
		.rp_startofpacket      (rsp_mux_007_src_startofpacket),                                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_007_src_endofpacket),                                                               //          .endofpacket
		.rp_ready              (rsp_mux_007_src_ready)                                                                      //          .ready
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ddr3_ram_avl_agent (
		.clk                     (ddr3_ram_afi_clk_clk),                                      //             clk.clk
		.reset                   (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ddr3_ram_avl_agent_m0_address),                             //              m0.address
		.m0_burstcount           (ddr3_ram_avl_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (ddr3_ram_avl_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (ddr3_ram_avl_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (ddr3_ram_avl_agent_m0_lock),                                //                .lock
		.m0_readdata             (ddr3_ram_avl_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (ddr3_ram_avl_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (ddr3_ram_avl_agent_m0_read),                                //                .read
		.m0_waitrequest          (ddr3_ram_avl_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (ddr3_ram_avl_agent_m0_writedata),                           //                .writedata
		.m0_write                (ddr3_ram_avl_agent_m0_write),                               //                .write
		.rp_endofpacket          (ddr3_ram_avl_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (ddr3_ram_avl_agent_rp_ready),                               //                .ready
		.rp_valid                (ddr3_ram_avl_agent_rp_valid),                               //                .valid
		.rp_data                 (ddr3_ram_avl_agent_rp_data),                                //                .data
		.rp_startofpacket        (ddr3_ram_avl_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                       //                .channel
		.rf_sink_ready           (ddr3_ram_avl_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (ddr3_ram_avl_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (ddr3_ram_avl_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (ddr3_ram_avl_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (ddr3_ram_avl_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (ddr3_ram_avl_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (ddr3_ram_avl_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (ddr3_ram_avl_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (ddr3_ram_avl_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (ddr3_ram_avl_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (ddr3_ram_avl_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr3_ram_avl_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (ddr3_ram_avl_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr3_ram_avl_agent_rsp_fifo (
		.clk               (ddr3_ram_afi_clk_clk),                                      //       clk.clk
		.reset             (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ddr3_ram_avl_agent_rf_source_data),                         //        in.data
		.in_valid          (ddr3_ram_avl_agent_rf_source_valid),                        //          .valid
		.in_ready          (ddr3_ram_avl_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (ddr3_ram_avl_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (ddr3_ram_avl_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (ddr3_ram_avl_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (ddr3_ram_avl_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (ddr3_ram_avl_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (ddr3_ram_avl_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (ddr3_ram_avl_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (64),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr3_ram_avl_agent_rdata_fifo (
		.clk               (ddr3_ram_afi_clk_clk),                                      //       clk.clk
		.reset             (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ddr3_ram_avl_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (ddr3_ram_avl_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (ddr3_ram_avl_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (ddr3_ram_avl_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (ddr3_ram_avl_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (ddr3_ram_avl_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ext_flash_avl_csr_agent (
		.clk                     (ext_flash_clock_bridge_out_clk_clk),                 //             clk.clk
		.reset                   (ext_flash_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (ext_flash_avl_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ext_flash_avl_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ext_flash_avl_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ext_flash_avl_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ext_flash_avl_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (ext_flash_avl_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ext_flash_avl_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ext_flash_avl_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (ext_flash_avl_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ext_flash_avl_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (ext_flash_avl_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (ext_flash_avl_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ext_flash_avl_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (ext_flash_avl_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (ext_flash_avl_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (ext_flash_avl_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_001_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                            //                .channel
		.rf_sink_ready           (ext_flash_avl_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ext_flash_avl_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ext_flash_avl_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ext_flash_avl_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ext_flash_avl_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ext_flash_avl_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ext_flash_avl_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ext_flash_avl_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ext_flash_avl_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ext_flash_avl_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (ext_flash_avl_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ext_flash_avl_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ext_flash_avl_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ext_flash_avl_csr_agent_rsp_fifo (
		.clk               (ext_flash_clock_bridge_out_clk_clk),                 //       clk.clk
		.reset             (ext_flash_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (ext_flash_avl_csr_agent_rf_source_data),             //        in.data
		.in_valid          (ext_flash_avl_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (ext_flash_avl_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ext_flash_avl_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ext_flash_avl_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ext_flash_avl_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ext_flash_avl_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ext_flash_avl_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ext_flash_avl_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ext_flash_avl_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ext_flash_avl_csr_agent_rdata_fifo (
		.clk               (ext_flash_clock_bridge_out_clk_clk),           //       clk.clk
		.reset             (ext_flash_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (ext_flash_avl_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (ext_flash_avl_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (ext_flash_avl_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (ext_flash_avl_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (ext_flash_avl_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (ext_flash_avl_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ext_flash_avl_mem_agent (
		.clk                     (ext_flash_clock_bridge_out_clk_clk),                    //             clk.clk
		.reset                   (ext_flash_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (ext_flash_avl_mem_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ext_flash_avl_mem_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ext_flash_avl_mem_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ext_flash_avl_mem_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ext_flash_avl_mem_agent_m0_lock),                       //                .lock
		.m0_readdata             (ext_flash_avl_mem_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ext_flash_avl_mem_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ext_flash_avl_mem_agent_m0_read),                       //                .read
		.m0_waitrequest          (ext_flash_avl_mem_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ext_flash_avl_mem_agent_m0_writedata),                  //                .writedata
		.m0_write                (ext_flash_avl_mem_agent_m0_write),                      //                .write
		.rp_endofpacket          (ext_flash_avl_mem_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ext_flash_avl_mem_agent_rp_ready),                      //                .ready
		.rp_valid                (ext_flash_avl_mem_agent_rp_valid),                      //                .valid
		.rp_data                 (ext_flash_avl_mem_agent_rp_data),                       //                .data
		.rp_startofpacket        (ext_flash_avl_mem_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ext_flash_avl_mem_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ext_flash_avl_mem_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ext_flash_avl_mem_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ext_flash_avl_mem_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ext_flash_avl_mem_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ext_flash_avl_mem_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ext_flash_avl_mem_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ext_flash_avl_mem_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ext_flash_avl_mem_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ext_flash_avl_mem_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ext_flash_avl_mem_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ext_flash_avl_mem_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ext_flash_avl_mem_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ext_flash_avl_mem_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ext_flash_avl_mem_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ext_flash_avl_mem_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (ext_flash_avl_mem_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ext_flash_avl_mem_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ext_flash_avl_mem_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ext_flash_avl_mem_agent_rsp_fifo (
		.clk               (ext_flash_clock_bridge_out_clk_clk),                 //       clk.clk
		.reset             (ext_flash_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (ext_flash_avl_mem_agent_rf_source_data),             //        in.data
		.in_valid          (ext_flash_avl_mem_agent_rf_source_valid),            //          .valid
		.in_ready          (ext_flash_avl_mem_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ext_flash_avl_mem_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ext_flash_avl_mem_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ext_flash_avl_mem_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ext_flash_avl_mem_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ext_flash_avl_mem_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ext_flash_avl_mem_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ext_flash_avl_mem_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ext_flash_avl_mem_agent_rdata_fifo (
		.clk               (ext_flash_clock_bridge_out_clk_clk),           //       clk.clk
		.reset             (ext_flash_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (ext_flash_avl_mem_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (ext_flash_avl_mem_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (ext_flash_avl_mem_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (ext_flash_avl_mem_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (ext_flash_avl_mem_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (ext_flash_avl_mem_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) eth_tse_control_port_agent (
		.clk                     (sys_clk_clk_clk),                                       //             clk.clk
		.reset                   (eth_tse_reset_connection_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (eth_tse_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (eth_tse_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (eth_tse_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (eth_tse_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (eth_tse_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (eth_tse_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (eth_tse_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (eth_tse_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (eth_tse_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (eth_tse_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (eth_tse_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (eth_tse_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (eth_tse_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (eth_tse_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (eth_tse_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (eth_tse_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                               //                .channel
		.rf_sink_ready           (eth_tse_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (eth_tse_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (eth_tse_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (eth_tse_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (eth_tse_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (eth_tse_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (eth_tse_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (eth_tse_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (eth_tse_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (eth_tse_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (eth_tse_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_tse_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (eth_tse_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_tse_control_port_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                       //       clk.clk
		.reset             (eth_tse_reset_connection_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (eth_tse_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (eth_tse_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (eth_tse_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (eth_tse_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (eth_tse_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (eth_tse_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (eth_tse_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (eth_tse_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (eth_tse_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (eth_tse_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (sys_clk_clk_clk),                                      //             clk.clk
		.reset                   (eth_tse_reset_connection_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                              //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) msgdma_tx_csr_agent (
		.clk                     (sys_clk_clk_clk),                                //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (msgdma_tx_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (msgdma_tx_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (msgdma_tx_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (msgdma_tx_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (msgdma_tx_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (msgdma_tx_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (msgdma_tx_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (msgdma_tx_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (msgdma_tx_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (msgdma_tx_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (msgdma_tx_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (msgdma_tx_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (msgdma_tx_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (msgdma_tx_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (msgdma_tx_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (msgdma_tx_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_005_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                        //                .channel
		.rf_sink_ready           (msgdma_tx_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (msgdma_tx_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (msgdma_tx_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (msgdma_tx_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (msgdma_tx_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (msgdma_tx_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (msgdma_tx_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (msgdma_tx_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (msgdma_tx_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (msgdma_tx_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),              //                .error
		.rdata_fifo_src_ready    (msgdma_tx_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_tx_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (msgdma_tx_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_tx_csr_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (msgdma_tx_csr_agent_rf_source_data),             //        in.data
		.in_valid          (msgdma_tx_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (msgdma_tx_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (msgdma_tx_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (msgdma_tx_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (msgdma_tx_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (msgdma_tx_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (msgdma_tx_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (msgdma_tx_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (msgdma_tx_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) msgdma_rx_csr_agent (
		.clk                     (sys_clk_clk_clk),                                //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (msgdma_rx_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (msgdma_rx_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (msgdma_rx_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (msgdma_rx_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (msgdma_rx_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (msgdma_rx_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (msgdma_rx_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (msgdma_rx_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (msgdma_rx_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (msgdma_rx_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (msgdma_rx_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (msgdma_rx_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (msgdma_rx_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (msgdma_rx_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (msgdma_rx_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (msgdma_rx_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_006_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                        //                .channel
		.rf_sink_ready           (msgdma_rx_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (msgdma_rx_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (msgdma_rx_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (msgdma_rx_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (msgdma_rx_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (msgdma_rx_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (msgdma_rx_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (msgdma_rx_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (msgdma_rx_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (msgdma_rx_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),              //                .error
		.rdata_fifo_src_ready    (msgdma_rx_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_rx_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (msgdma_rx_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_rx_csr_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (msgdma_rx_csr_agent_rf_source_data),             //        in.data
		.in_valid          (msgdma_rx_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (msgdma_rx_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (msgdma_rx_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (msgdma_rx_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (msgdma_rx_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (msgdma_rx_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (msgdma_rx_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (msgdma_rx_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (msgdma_rx_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_flash_csr_agent (
		.clk                     (sys_clk_clk_clk),                                   //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (onchip_flash_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_flash_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_flash_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_flash_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_flash_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_flash_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_flash_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_flash_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_flash_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_flash_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_flash_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_flash_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_flash_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_flash_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_flash_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_flash_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_007_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                           //                .channel
		.rf_sink_ready           (onchip_flash_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_flash_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_flash_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_flash_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_flash_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_flash_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_flash_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_flash_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_flash_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_flash_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (onchip_flash_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_flash_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_flash_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_flash_csr_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                   //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (onchip_flash_csr_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_flash_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_flash_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_flash_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_flash_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_flash_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_flash_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_flash_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_flash_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_flash_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) udp_generator_csr_agent (
		.clk                     (sys_clk_clk_clk),                                    //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (udp_generator_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (udp_generator_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (udp_generator_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (udp_generator_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (udp_generator_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (udp_generator_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (udp_generator_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (udp_generator_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (udp_generator_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (udp_generator_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (udp_generator_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (udp_generator_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (udp_generator_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (udp_generator_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (udp_generator_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (udp_generator_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_008_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                            //                .channel
		.rf_sink_ready           (udp_generator_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (udp_generator_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (udp_generator_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (udp_generator_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (udp_generator_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (udp_generator_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (udp_generator_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (udp_generator_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (udp_generator_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (udp_generator_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (udp_generator_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (udp_generator_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (udp_generator_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) udp_generator_csr_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                    //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (udp_generator_csr_agent_rf_source_data),             //        in.data
		.in_valid          (udp_generator_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (udp_generator_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (udp_generator_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (udp_generator_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (udp_generator_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (udp_generator_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (udp_generator_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (udp_generator_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (udp_generator_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sensor_interface_csr_agent (
		.clk                     (sys_clk_clk_clk),                                       //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (sensor_interface_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sensor_interface_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sensor_interface_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sensor_interface_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sensor_interface_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (sensor_interface_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sensor_interface_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sensor_interface_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (sensor_interface_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sensor_interface_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (sensor_interface_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (sensor_interface_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sensor_interface_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (sensor_interface_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (sensor_interface_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (sensor_interface_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                               //                .channel
		.rf_sink_ready           (sensor_interface_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sensor_interface_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sensor_interface_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sensor_interface_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sensor_interface_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sensor_interface_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sensor_interface_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sensor_interface_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sensor_interface_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sensor_interface_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (sensor_interface_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sensor_interface_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sensor_interface_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sensor_interface_csr_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                       //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (sensor_interface_csr_agent_rf_source_data),             //        in.data
		.in_valid          (sensor_interface_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (sensor_interface_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sensor_interface_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sensor_interface_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sensor_interface_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sensor_interface_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sensor_interface_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sensor_interface_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sensor_interface_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_flash_data_agent (
		.clk                     (sys_clk_clk_clk),                                    //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (onchip_flash_data_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_flash_data_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_flash_data_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_flash_data_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_flash_data_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_flash_data_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_flash_data_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_flash_data_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_flash_data_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_flash_data_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_flash_data_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_flash_data_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_flash_data_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_flash_data_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_flash_data_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_flash_data_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_010_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                            //                .channel
		.rf_sink_ready           (onchip_flash_data_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_flash_data_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_flash_data_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_flash_data_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_flash_data_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_flash_data_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_flash_data_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_flash_data_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_flash_data_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_flash_data_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (onchip_flash_data_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_flash_data_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_flash_data_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_flash_data_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                    //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (onchip_flash_data_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_flash_data_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_flash_data_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_flash_data_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_flash_data_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_flash_data_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_flash_data_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_flash_data_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_flash_data_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_flash_data_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_debug_mem_slave_agent (
		.clk                     (sys_clk_clk_clk),                                      //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                              //                .channel
		.rf_sink_ready           (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (cpu_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_debug_mem_slave_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) msgdma_tx_prefetcher_csr_agent (
		.clk                     (sys_clk_clk_clk),                                           //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (msgdma_tx_prefetcher_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (msgdma_tx_prefetcher_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (msgdma_tx_prefetcher_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (msgdma_tx_prefetcher_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (msgdma_tx_prefetcher_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (msgdma_tx_prefetcher_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (msgdma_tx_prefetcher_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (msgdma_tx_prefetcher_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (msgdma_tx_prefetcher_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (msgdma_tx_prefetcher_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (msgdma_tx_prefetcher_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (msgdma_tx_prefetcher_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (msgdma_tx_prefetcher_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (msgdma_tx_prefetcher_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (msgdma_tx_prefetcher_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (msgdma_tx_prefetcher_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                                   //                .channel
		.rf_sink_ready           (msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (msgdma_tx_prefetcher_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (msgdma_tx_prefetcher_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (msgdma_tx_prefetcher_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (msgdma_tx_prefetcher_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (msgdma_tx_prefetcher_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (msgdma_tx_prefetcher_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_tx_prefetcher_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (msgdma_tx_prefetcher_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_tx_prefetcher_csr_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                           //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (msgdma_tx_prefetcher_csr_agent_rf_source_data),             //        in.data
		.in_valid          (msgdma_tx_prefetcher_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (msgdma_tx_prefetcher_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (msgdma_tx_prefetcher_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (msgdma_tx_prefetcher_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (msgdma_tx_prefetcher_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) msgdma_rx_prefetcher_csr_agent (
		.clk                     (sys_clk_clk_clk),                                           //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (msgdma_rx_prefetcher_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (msgdma_rx_prefetcher_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (msgdma_rx_prefetcher_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (msgdma_rx_prefetcher_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (msgdma_rx_prefetcher_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (msgdma_rx_prefetcher_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (msgdma_rx_prefetcher_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (msgdma_rx_prefetcher_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (msgdma_rx_prefetcher_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (msgdma_rx_prefetcher_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (msgdma_rx_prefetcher_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (msgdma_rx_prefetcher_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (msgdma_rx_prefetcher_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (msgdma_rx_prefetcher_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (msgdma_rx_prefetcher_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (msgdma_rx_prefetcher_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                                   //                .channel
		.rf_sink_ready           (msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (msgdma_rx_prefetcher_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (msgdma_rx_prefetcher_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (msgdma_rx_prefetcher_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (msgdma_rx_prefetcher_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (msgdma_rx_prefetcher_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (msgdma_rx_prefetcher_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_rx_prefetcher_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (msgdma_rx_prefetcher_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_rx_prefetcher_csr_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                           //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (msgdma_rx_prefetcher_csr_agent_rf_source_data),             //        in.data
		.in_valid          (msgdma_rx_prefetcher_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (msgdma_rx_prefetcher_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (msgdma_rx_prefetcher_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (msgdma_rx_prefetcher_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (msgdma_rx_prefetcher_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) descriptor_memory_s1_agent (
		.clk                     (sys_clk_clk_clk),                                       //             clk.clk
		.reset                   (eth_tse_reset_connection_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (descriptor_memory_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (descriptor_memory_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (descriptor_memory_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (descriptor_memory_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (descriptor_memory_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (descriptor_memory_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (descriptor_memory_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (descriptor_memory_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (descriptor_memory_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (descriptor_memory_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (descriptor_memory_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (descriptor_memory_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (descriptor_memory_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (descriptor_memory_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (descriptor_memory_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (descriptor_memory_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                               //                .channel
		.rf_sink_ready           (descriptor_memory_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (descriptor_memory_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (descriptor_memory_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (descriptor_memory_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (descriptor_memory_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (descriptor_memory_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (descriptor_memory_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (descriptor_memory_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (descriptor_memory_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (descriptor_memory_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (descriptor_memory_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (descriptor_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (descriptor_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) descriptor_memory_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                       //       clk.clk
		.reset             (eth_tse_reset_connection_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (descriptor_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (descriptor_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (descriptor_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (descriptor_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (descriptor_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (descriptor_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (descriptor_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (descriptor_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (descriptor_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (descriptor_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_clk_timer_s1_agent (
		.clk                     (sys_clk_clk_clk),                                      //             clk.clk
		.reset                   (eth_tse_reset_connection_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sys_clk_timer_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sys_clk_timer_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sys_clk_timer_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sys_clk_timer_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sys_clk_timer_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sys_clk_timer_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sys_clk_timer_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sys_clk_timer_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sys_clk_timer_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sys_clk_timer_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sys_clk_timer_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sys_clk_timer_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sys_clk_timer_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sys_clk_timer_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sys_clk_timer_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sys_clk_timer_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_015_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                              //                .channel
		.rf_sink_ready           (sys_clk_timer_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sys_clk_timer_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sys_clk_timer_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sys_clk_timer_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sys_clk_timer_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sys_clk_timer_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sys_clk_timer_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sys_clk_timer_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sys_clk_timer_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sys_clk_timer_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sys_clk_timer_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_clk_timer_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sys_clk_timer_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_clk_timer_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sys_clk_timer_s1_agent_rf_source_data),                //        in.data
		.in_valid          (sys_clk_timer_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (sys_clk_timer_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (sys_clk_timer_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (sys_clk_timer_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (sys_clk_timer_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (sys_clk_timer_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (sys_clk_timer_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (sys_clk_timer_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (sys_clk_timer_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) output_pio_s1_agent (
		.clk                     (sys_clk_clk_clk),                                      //             clk.clk
		.reset                   (eth_tse_reset_connection_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (output_pio_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (output_pio_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (output_pio_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (output_pio_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (output_pio_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (output_pio_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (output_pio_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (output_pio_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (output_pio_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (output_pio_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (output_pio_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (output_pio_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (output_pio_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (output_pio_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (output_pio_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (output_pio_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                              //                .channel
		.rf_sink_ready           (output_pio_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (output_pio_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (output_pio_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (output_pio_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (output_pio_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (output_pio_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (output_pio_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (output_pio_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (output_pio_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (output_pio_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (output_pio_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (output_pio_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (output_pio_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) output_pio_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (output_pio_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (output_pio_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (output_pio_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (output_pio_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (output_pio_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (output_pio_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (output_pio_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (output_pio_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (output_pio_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (output_pio_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_pio_s1_agent (
		.clk                     (sys_clk_clk_clk),                                //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (button_pio_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (button_pio_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (button_pio_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (button_pio_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (button_pio_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (button_pio_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (button_pio_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (button_pio_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (button_pio_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (button_pio_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (button_pio_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (button_pio_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (button_pio_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (button_pio_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (button_pio_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (button_pio_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_017_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                        //                .channel
		.rf_sink_ready           (button_pio_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (button_pio_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (button_pio_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (button_pio_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (button_pio_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (button_pio_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (button_pio_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (button_pio_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (button_pio_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (button_pio_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),              //                .error
		.rdata_fifo_src_ready    (button_pio_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_pio_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (button_pio_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_pio_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (button_pio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (button_pio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (button_pio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (button_pio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (button_pio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (button_pio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (button_pio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (button_pio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (button_pio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (button_pio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) debug_uart_s1_agent (
		.clk                     (sys_clk_clk_clk),                                //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (debug_uart_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (debug_uart_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (debug_uart_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (debug_uart_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (debug_uart_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (debug_uart_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (debug_uart_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (debug_uart_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (debug_uart_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (debug_uart_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (debug_uart_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (debug_uart_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (debug_uart_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (debug_uart_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (debug_uart_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (debug_uart_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_018_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                        //                .channel
		.rf_sink_ready           (debug_uart_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (debug_uart_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (debug_uart_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (debug_uart_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (debug_uart_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (debug_uart_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (debug_uart_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (debug_uart_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (debug_uart_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (debug_uart_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),              //                .error
		.rdata_fifo_src_ready    (debug_uart_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (debug_uart_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (debug_uart_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) debug_uart_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (debug_uart_s1_agent_rf_source_data),             //        in.data
		.in_valid          (debug_uart_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (debug_uart_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (debug_uart_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (debug_uart_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (debug_uart_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (debug_uart_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (debug_uart_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (debug_uart_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (debug_uart_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) frame_timer_s1_agent (
		.clk                     (sys_clk_clk_clk),                                 //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (frame_timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (frame_timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (frame_timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (frame_timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (frame_timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (frame_timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (frame_timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (frame_timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (frame_timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (frame_timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (frame_timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (frame_timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (frame_timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (frame_timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (frame_timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (frame_timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_019_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                         //                .channel
		.rf_sink_ready           (frame_timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (frame_timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (frame_timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (frame_timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (frame_timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (frame_timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (frame_timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (frame_timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (frame_timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (frame_timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),               //                .error
		.rdata_fifo_src_ready    (frame_timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (frame_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (frame_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) frame_timer_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                 //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (frame_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (frame_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (frame_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (frame_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (frame_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (frame_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (frame_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (frame_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (frame_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (frame_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (102),
		.PKT_ORI_BURST_SIZE_L      (100),
		.PKT_RESPONSE_STATUS_H     (99),
		.PKT_RESPONSE_STATUS_L     (98),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (78),
		.PKT_PROTECTION_H          (93),
		.PKT_PROTECTION_L          (91),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (80),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (85),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (103),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) calibration_ram_s1_agent (
		.clk                     (sys_clk_clk_clk),                                        //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (calibration_ram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (calibration_ram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (calibration_ram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (calibration_ram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (calibration_ram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (calibration_ram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (calibration_ram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (calibration_ram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (calibration_ram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (calibration_ram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (calibration_ram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (calibration_ram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (calibration_ram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (calibration_ram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (calibration_ram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (calibration_ram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (calibration_ram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (calibration_ram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (calibration_ram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (calibration_ram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (calibration_ram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (calibration_ram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (calibration_ram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (calibration_ram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (calibration_ram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (calibration_ram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (calibration_ram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (calibration_ram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (calibration_ram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (calibration_ram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (calibration_ram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (calibration_ram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (calibration_ram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (calibration_ram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (calibration_ram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (104),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) calibration_ram_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                     //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (calibration_ram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (calibration_ram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (calibration_ram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (calibration_ram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (calibration_ram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (calibration_ram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (calibration_ram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (calibration_ram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (calibration_ram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (calibration_ram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	q_sys_mm_interconnect_1_router router (
		.sink_ready         (cpu_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                        //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                       //       src.ready
		.src_valid          (router_src_valid),                       //          .valid
		.src_data           (router_src_data),                        //          .data
		.src_channel        (router_src_channel),                     //          .channel
		.src_startofpacket  (router_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                  //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                               //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (msgdma_tx_mm_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (msgdma_tx_mm_read_agent_cp_valid),         //          .valid
		.sink_data          (msgdma_tx_mm_read_agent_cp_data),          //          .data
		.sink_startofpacket (msgdma_tx_mm_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_tx_mm_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                          //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_002_src_ready),                     //       src.ready
		.src_valid          (router_002_src_valid),                     //          .valid
		.src_data           (router_002_src_data),                      //          .data
		.src_channel        (router_002_src_channel),                   //          .channel
		.src_startofpacket  (router_002_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_002 router_003 (
		.sink_ready         (msgdma_rx_mm_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (msgdma_rx_mm_write_agent_cp_valid),         //          .valid
		.sink_data          (msgdma_rx_mm_write_agent_cp_data),          //          .data
		.sink_startofpacket (msgdma_rx_mm_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_rx_mm_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_003_src_ready),                      //       src.ready
		.src_valid          (router_003_src_valid),                      //          .valid
		.src_data           (router_003_src_data),                       //          .data
		.src_channel        (router_003_src_channel),                    //          .channel
		.src_startofpacket  (router_003_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                 //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_004 router_004 (
		.sink_ready         (msgdma_tx_descriptor_read_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (msgdma_tx_descriptor_read_master_agent_cp_valid),         //          .valid
		.sink_data          (msgdma_tx_descriptor_read_master_agent_cp_data),          //          .data
		.sink_startofpacket (msgdma_tx_descriptor_read_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_tx_descriptor_read_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready          (router_004_src_ready),                                    //       src.ready
		.src_valid          (router_004_src_valid),                                    //          .valid
		.src_data           (router_004_src_data),                                     //          .data
		.src_channel        (router_004_src_channel),                                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                               //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_004 router_005 (
		.sink_ready         (msgdma_rx_descriptor_read_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (msgdma_rx_descriptor_read_master_agent_cp_valid),         //          .valid
		.sink_data          (msgdma_rx_descriptor_read_master_agent_cp_data),          //          .data
		.sink_startofpacket (msgdma_rx_descriptor_read_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_rx_descriptor_read_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready          (router_005_src_ready),                                    //       src.ready
		.src_valid          (router_005_src_valid),                                    //          .valid
		.src_data           (router_005_src_data),                                     //          .data
		.src_channel        (router_005_src_channel),                                  //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                               //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_004 router_006 (
		.sink_ready         (msgdma_tx_descriptor_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (msgdma_tx_descriptor_write_master_agent_cp_valid),         //          .valid
		.sink_data          (msgdma_tx_descriptor_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (msgdma_tx_descriptor_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_tx_descriptor_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                          //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.src_ready          (router_006_src_ready),                                     //       src.ready
		.src_valid          (router_006_src_valid),                                     //          .valid
		.src_data           (router_006_src_data),                                      //          .data
		.src_channel        (router_006_src_channel),                                   //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_004 router_007 (
		.sink_ready         (msgdma_rx_descriptor_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (msgdma_rx_descriptor_write_master_agent_cp_valid),         //          .valid
		.sink_data          (msgdma_rx_descriptor_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (msgdma_rx_descriptor_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_rx_descriptor_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                          //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.src_ready          (router_007_src_ready),                                     //       src.ready
		.src_valid          (router_007_src_valid),                                     //          .valid
		.src_data           (router_007_src_data),                                      //          .data
		.src_channel        (router_007_src_channel),                                   //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_008 router_008 (
		.sink_ready         (ddr3_ram_avl_agent_rp_ready),                               //      sink.ready
		.sink_valid         (ddr3_ram_avl_agent_rp_valid),                               //          .valid
		.sink_data          (ddr3_ram_avl_agent_rp_data),                                //          .data
		.sink_startofpacket (ddr3_ram_avl_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (ddr3_ram_avl_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (ddr3_ram_afi_clk_clk),                                      //       clk.clk
		.reset              (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                      //       src.ready
		.src_valid          (router_008_src_valid),                                      //          .valid
		.src_data           (router_008_src_data),                                       //          .data
		.src_channel        (router_008_src_channel),                                    //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                 //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_009 (
		.sink_ready         (ext_flash_avl_csr_agent_rp_ready),            //      sink.ready
		.sink_valid         (ext_flash_avl_csr_agent_rp_valid),            //          .valid
		.sink_data          (ext_flash_avl_csr_agent_rp_data),             //          .data
		.sink_startofpacket (ext_flash_avl_csr_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (ext_flash_avl_csr_agent_rp_endofpacket),      //          .endofpacket
		.clk                (ext_flash_clock_bridge_out_clk_clk),          //       clk.clk
		.reset              (ext_flash_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                        //       src.ready
		.src_valid          (router_009_src_valid),                        //          .valid
		.src_data           (router_009_src_data),                         //          .data
		.src_channel        (router_009_src_channel),                      //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                   //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_010 router_010 (
		.sink_ready         (ext_flash_avl_mem_agent_rp_ready),            //      sink.ready
		.sink_valid         (ext_flash_avl_mem_agent_rp_valid),            //          .valid
		.sink_data          (ext_flash_avl_mem_agent_rp_data),             //          .data
		.sink_startofpacket (ext_flash_avl_mem_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (ext_flash_avl_mem_agent_rp_endofpacket),      //          .endofpacket
		.clk                (ext_flash_clock_bridge_out_clk_clk),          //       clk.clk
		.reset              (ext_flash_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                        //       src.ready
		.src_valid          (router_010_src_valid),                        //          .valid
		.src_data           (router_010_src_data),                         //          .data
		.src_channel        (router_010_src_channel),                      //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                   //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_011 (
		.sink_ready         (eth_tse_control_port_agent_rp_ready),                  //      sink.ready
		.sink_valid         (eth_tse_control_port_agent_rp_valid),                  //          .valid
		.sink_data          (eth_tse_control_port_agent_rp_data),                   //          .data
		.sink_startofpacket (eth_tse_control_port_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (eth_tse_control_port_agent_rp_endofpacket),            //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                 //       src.ready
		.src_valid          (router_011_src_valid),                                 //          .valid
		.src_data           (router_011_src_data),                                  //          .data
		.src_channel        (router_011_src_channel),                               //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                            //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_012 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),                   //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),                   //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),                    //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),             //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                 //       src.ready
		.src_valid          (router_012_src_valid),                                 //          .valid
		.src_data           (router_012_src_data),                                  //          .data
		.src_channel        (router_012_src_channel),                               //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                            //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_013 (
		.sink_ready         (msgdma_tx_csr_agent_rp_ready),          //      sink.ready
		.sink_valid         (msgdma_tx_csr_agent_rp_valid),          //          .valid
		.sink_data          (msgdma_tx_csr_agent_rp_data),           //          .data
		.sink_startofpacket (msgdma_tx_csr_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (msgdma_tx_csr_agent_rp_endofpacket),    //          .endofpacket
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                  //       src.ready
		.src_valid          (router_013_src_valid),                  //          .valid
		.src_data           (router_013_src_data),                   //          .data
		.src_channel        (router_013_src_channel),                //          .channel
		.src_startofpacket  (router_013_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)             //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_014 (
		.sink_ready         (msgdma_rx_csr_agent_rp_ready),          //      sink.ready
		.sink_valid         (msgdma_rx_csr_agent_rp_valid),          //          .valid
		.sink_data          (msgdma_rx_csr_agent_rp_data),           //          .data
		.sink_startofpacket (msgdma_rx_csr_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (msgdma_rx_csr_agent_rp_endofpacket),    //          .endofpacket
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                  //       src.ready
		.src_valid          (router_014_src_valid),                  //          .valid
		.src_data           (router_014_src_data),                   //          .data
		.src_channel        (router_014_src_channel),                //          .channel
		.src_startofpacket  (router_014_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)             //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_015 (
		.sink_ready         (onchip_flash_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_flash_csr_agent_rp_valid),         //          .valid
		.sink_data          (onchip_flash_csr_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_flash_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_flash_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_015_src_ready),                    //       src.ready
		.src_valid          (router_015_src_valid),                    //          .valid
		.src_data           (router_015_src_data),                     //          .data
		.src_channel        (router_015_src_channel),                  //          .channel
		.src_startofpacket  (router_015_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)               //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_016 (
		.sink_ready         (udp_generator_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (udp_generator_csr_agent_rp_valid),         //          .valid
		.sink_data          (udp_generator_csr_agent_rp_data),          //          .data
		.sink_startofpacket (udp_generator_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (udp_generator_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                          //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_016_src_ready),                     //       src.ready
		.src_valid          (router_016_src_valid),                     //          .valid
		.src_data           (router_016_src_data),                      //          .data
		.src_channel        (router_016_src_channel),                   //          .channel
		.src_startofpacket  (router_016_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_017 (
		.sink_ready         (sensor_interface_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (sensor_interface_csr_agent_rp_valid),         //          .valid
		.sink_data          (sensor_interface_csr_agent_rp_data),          //          .data
		.sink_startofpacket (sensor_interface_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sensor_interface_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                             //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_017_src_ready),                        //       src.ready
		.src_valid          (router_017_src_valid),                        //          .valid
		.src_data           (router_017_src_data),                         //          .data
		.src_channel        (router_017_src_channel),                      //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                   //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_010 router_018 (
		.sink_ready         (onchip_flash_data_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_flash_data_agent_rp_valid),         //          .valid
		.sink_data          (onchip_flash_data_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_flash_data_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_flash_data_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                          //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_018_src_ready),                     //       src.ready
		.src_valid          (router_018_src_valid),                     //          .valid
		.src_data           (router_018_src_data),                      //          .data
		.src_channel        (router_018_src_channel),                   //          .channel
		.src_startofpacket  (router_018_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_010 router_019 (
		.sink_ready         (cpu_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (cpu_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                            //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_019_src_ready),                       //       src.ready
		.src_valid          (router_019_src_valid),                       //          .valid
		.src_data           (router_019_src_data),                        //          .data
		.src_channel        (router_019_src_channel),                     //          .channel
		.src_startofpacket  (router_019_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                  //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_020 (
		.sink_ready         (msgdma_tx_prefetcher_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (msgdma_tx_prefetcher_csr_agent_rp_valid),         //          .valid
		.sink_data          (msgdma_tx_prefetcher_csr_agent_rp_data),          //          .data
		.sink_startofpacket (msgdma_tx_prefetcher_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_tx_prefetcher_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                 //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_020_src_ready),                            //       src.ready
		.src_valid          (router_020_src_valid),                            //          .valid
		.src_data           (router_020_src_data),                             //          .data
		.src_channel        (router_020_src_channel),                          //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                       //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_021 (
		.sink_ready         (msgdma_rx_prefetcher_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (msgdma_rx_prefetcher_csr_agent_rp_valid),         //          .valid
		.sink_data          (msgdma_rx_prefetcher_csr_agent_rp_data),          //          .data
		.sink_startofpacket (msgdma_rx_prefetcher_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_rx_prefetcher_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                 //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_021_src_ready),                            //       src.ready
		.src_valid          (router_021_src_valid),                            //          .valid
		.src_data           (router_021_src_data),                             //          .data
		.src_channel        (router_021_src_channel),                          //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                       //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_022 router_022 (
		.sink_ready         (descriptor_memory_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (descriptor_memory_s1_agent_rp_valid),                  //          .valid
		.sink_data          (descriptor_memory_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (descriptor_memory_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (descriptor_memory_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                                 //       src.ready
		.src_valid          (router_022_src_valid),                                 //          .valid
		.src_data           (router_022_src_data),                                  //          .data
		.src_channel        (router_022_src_channel),                               //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                            //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_023 (
		.sink_ready         (sys_clk_timer_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (sys_clk_timer_s1_agent_rp_valid),                      //          .valid
		.sink_data          (sys_clk_timer_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (sys_clk_timer_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (sys_clk_timer_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                                 //       src.ready
		.src_valid          (router_023_src_valid),                                 //          .valid
		.src_data           (router_023_src_data),                                  //          .data
		.src_channel        (router_023_src_channel),                               //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                            //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_024 (
		.sink_ready         (output_pio_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (output_pio_s1_agent_rp_valid),                         //          .valid
		.sink_data          (output_pio_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (output_pio_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (output_pio_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                                 //       src.ready
		.src_valid          (router_024_src_valid),                                 //          .valid
		.src_data           (router_024_src_data),                                  //          .data
		.src_channel        (router_024_src_channel),                               //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                            //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_025 (
		.sink_ready         (button_pio_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (button_pio_s1_agent_rp_valid),          //          .valid
		.sink_data          (button_pio_s1_agent_rp_data),           //          .data
		.sink_startofpacket (button_pio_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (button_pio_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                  //       src.ready
		.src_valid          (router_025_src_valid),                  //          .valid
		.src_data           (router_025_src_data),                   //          .data
		.src_channel        (router_025_src_channel),                //          .channel
		.src_startofpacket  (router_025_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)             //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_026 (
		.sink_ready         (debug_uart_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (debug_uart_s1_agent_rp_valid),          //          .valid
		.sink_data          (debug_uart_s1_agent_rp_data),           //          .data
		.sink_startofpacket (debug_uart_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (debug_uart_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                  //       src.ready
		.src_valid          (router_026_src_valid),                  //          .valid
		.src_data           (router_026_src_data),                   //          .data
		.src_channel        (router_026_src_channel),                //          .channel
		.src_startofpacket  (router_026_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)             //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_009 router_027 (
		.sink_ready         (frame_timer_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (frame_timer_s1_agent_rp_valid),         //          .valid
		.sink_data          (frame_timer_s1_agent_rp_data),          //          .data
		.sink_startofpacket (frame_timer_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (frame_timer_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                  //       src.ready
		.src_valid          (router_027_src_valid),                  //          .valid
		.src_data           (router_027_src_data),                   //          .data
		.src_channel        (router_027_src_channel),                //          .channel
		.src_startofpacket  (router_027_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)             //          .endofpacket
	);

	q_sys_mm_interconnect_1_router_028 router_028 (
		.sink_ready         (calibration_ram_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (calibration_ram_s1_agent_rp_valid),         //          .valid
		.sink_data          (calibration_ram_s1_agent_rp_data),          //          .data
		.sink_startofpacket (calibration_ram_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (calibration_ram_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_028_src_ready),                      //       src.ready
		.src_valid          (router_028_src_valid),                      //          .valid
		.src_data           (router_028_src_data),                       //          .data
		.src_channel        (router_028_src_channel),                    //          .channel
		.src_startofpacket  (router_028_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                 //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.MAX_OUTSTANDING_RESPONSES (36),
		.PIPELINED                 (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (21),
		.VALID_WIDTH               (21),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_data_master_limiter (
		.clk                    (sys_clk_clk_clk),                               //       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //          .valid
		.cmd_sink_data          (router_src_data),                               //          .data
		.cmd_sink_channel       (router_src_channel),                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.cmd_src_ready          (cpu_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                             //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                           //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                              //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                       //          .endofpacket
		.rsp_src_ready          (cpu_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (98),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.MAX_OUTSTANDING_RESPONSES (36),
		.PIPELINED                 (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (21),
		.VALID_WIDTH               (21),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_instruction_master_limiter (
		.clk                    (sys_clk_clk_clk),                                      //       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                 //          .valid
		.cmd_sink_data          (router_001_src_data),                                  //          .data
		.cmd_sink_channel       (router_001_src_channel),                               //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                         //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                           //          .endofpacket
		.cmd_src_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                              //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                          //          .endofpacket
		.rsp_src_ready          (cpu_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (96),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (71),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_BURST_TYPE_H          (93),
		.PKT_BURST_TYPE_L          (92),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (79),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) ext_flash_avl_mem_burst_adapter (
		.clk                   (ext_flash_clock_bridge_out_clk_clk),                    //       cr0.clk
		.reset                 (ext_flash_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                 //          .ready
		.source0_valid         (ext_flash_avl_mem_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ext_flash_avl_mem_burst_adapter_source0_data),          //          .data
		.source0_channel       (ext_flash_avl_mem_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ext_flash_avl_mem_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ext_flash_avl_mem_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ext_flash_avl_mem_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (78),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (53),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (73),
		.PKT_BURST_SIZE_L          (71),
		.PKT_BURST_TYPE_H          (75),
		.PKT_BURST_TYPE_L          (74),
		.PKT_BURSTWRAP_H           (70),
		.PKT_BURSTWRAP_L           (62),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (103),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (54),
		.OUT_BURSTWRAP_H           (70),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (511),
		.BURSTWRAP_CONST_VALUE     (511),
		.ADAPTER_VERSION           ("13.1")
	) calibration_ram_s1_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                        //       cr0.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (calibration_ram_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (calibration_ram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (calibration_ram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (calibration_ram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (calibration_ram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (calibration_ram_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (calibration_ram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (calibration_ram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (calibration_ram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (calibration_ram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (calibration_ram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (calibration_ram_s1_burst_adapter_source0_ready)          //          .ready
	);

	q_sys_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                 (sys_clk_clk_clk),                               //        clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready          (cpu_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (cpu_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (cpu_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (cpu_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                          //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                          //           .valid
		.src0_data           (cmd_demux_src0_data),                           //           .data
		.src0_channel        (cmd_demux_src0_channel),                        //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                  //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                    //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                          //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                          //           .valid
		.src1_data           (cmd_demux_src1_data),                           //           .data
		.src1_channel        (cmd_demux_src1_channel),                        //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                  //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                    //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                          //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                          //           .valid
		.src2_data           (cmd_demux_src2_data),                           //           .data
		.src2_channel        (cmd_demux_src2_channel),                        //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                  //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                    //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                          //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                          //           .valid
		.src3_data           (cmd_demux_src3_data),                           //           .data
		.src3_channel        (cmd_demux_src3_channel),                        //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                  //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                    //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                          //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                          //           .valid
		.src4_data           (cmd_demux_src4_data),                           //           .data
		.src4_channel        (cmd_demux_src4_channel),                        //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                  //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                    //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                          //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                          //           .valid
		.src5_data           (cmd_demux_src5_data),                           //           .data
		.src5_channel        (cmd_demux_src5_channel),                        //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                  //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                    //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                          //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                          //           .valid
		.src6_data           (cmd_demux_src6_data),                           //           .data
		.src6_channel        (cmd_demux_src6_channel),                        //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                  //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                    //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                          //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                          //           .valid
		.src7_data           (cmd_demux_src7_data),                           //           .data
		.src7_channel        (cmd_demux_src7_channel),                        //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                  //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                    //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                          //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                          //           .valid
		.src8_data           (cmd_demux_src8_data),                           //           .data
		.src8_channel        (cmd_demux_src8_channel),                        //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                  //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                    //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                          //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                          //           .valid
		.src9_data           (cmd_demux_src9_data),                           //           .data
		.src9_channel        (cmd_demux_src9_channel),                        //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                  //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                    //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                         //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                         //           .valid
		.src10_data          (cmd_demux_src10_data),                          //           .data
		.src10_channel       (cmd_demux_src10_channel),                       //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                 //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                   //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                         //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                         //           .valid
		.src11_data          (cmd_demux_src11_data),                          //           .data
		.src11_channel       (cmd_demux_src11_channel),                       //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                 //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                   //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                         //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                         //           .valid
		.src12_data          (cmd_demux_src12_data),                          //           .data
		.src12_channel       (cmd_demux_src12_channel),                       //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                 //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                   //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                         //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                         //           .valid
		.src13_data          (cmd_demux_src13_data),                          //           .data
		.src13_channel       (cmd_demux_src13_channel),                       //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                 //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                   //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                         //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                         //           .valid
		.src14_data          (cmd_demux_src14_data),                          //           .data
		.src14_channel       (cmd_demux_src14_channel),                       //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                 //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                   //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                         //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                         //           .valid
		.src15_data          (cmd_demux_src15_data),                          //           .data
		.src15_channel       (cmd_demux_src15_channel),                       //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                 //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                   //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                         //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                         //           .valid
		.src16_data          (cmd_demux_src16_data),                          //           .data
		.src16_channel       (cmd_demux_src16_channel),                       //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                 //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                   //           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                         //      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                         //           .valid
		.src17_data          (cmd_demux_src17_data),                          //           .data
		.src17_channel       (cmd_demux_src17_channel),                       //           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                 //           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                   //           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                         //      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                         //           .valid
		.src18_data          (cmd_demux_src18_data),                          //           .data
		.src18_channel       (cmd_demux_src18_channel),                       //           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                 //           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                   //           .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                         //      src19.ready
		.src19_valid         (cmd_demux_src19_valid),                         //           .valid
		.src19_data          (cmd_demux_src19_data),                          //           .data
		.src19_channel       (cmd_demux_src19_channel),                       //           .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                 //           .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                   //           .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                         //      src20.ready
		.src20_valid         (cmd_demux_src20_valid),                         //           .valid
		.src20_data          (cmd_demux_src20_data),                          //           .data
		.src20_channel       (cmd_demux_src20_channel),                       //           .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                 //           .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket)                    //           .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_001 cmd_demux_001 (
		.clk                (sys_clk_clk_clk),                                      //        clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (cpu_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                             //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                             //           .valid
		.src0_data          (cmd_demux_001_src0_data),                              //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                           //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                       //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                             //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                             //           .valid
		.src1_data          (cmd_demux_001_src1_data),                              //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                           //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                       //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                             //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                             //           .valid
		.src2_data          (cmd_demux_001_src2_data),                              //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                           //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                     //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                       //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                             //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                             //           .valid
		.src3_data          (cmd_demux_001_src3_data),                              //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                           //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                     //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)                        //           .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 cmd_demux_002 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                  //      sink.ready
		.sink_channel       (router_002_src_channel),                //          .channel
		.sink_data          (router_002_src_data),                   //          .data
		.sink_startofpacket (router_002_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_002_src_valid),                  //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),              //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),              //          .valid
		.src0_data          (cmd_demux_002_src0_data),               //          .data
		.src0_channel       (cmd_demux_002_src0_channel),            //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 cmd_demux_003 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                  //      sink.ready
		.sink_channel       (router_003_src_channel),                //          .channel
		.sink_data          (router_003_src_data),                   //          .data
		.sink_startofpacket (router_003_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_003_src_valid),                  //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),              //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),              //          .valid
		.src0_data          (cmd_demux_003_src0_data),               //          .data
		.src0_channel       (cmd_demux_003_src0_channel),            //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 cmd_demux_004 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                  //      sink.ready
		.sink_channel       (router_004_src_channel),                //          .channel
		.sink_data          (router_004_src_data),                   //          .data
		.sink_startofpacket (router_004_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_004_src_valid),                  //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),              //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),              //          .valid
		.src0_data          (cmd_demux_004_src0_data),               //          .data
		.src0_channel       (cmd_demux_004_src0_channel),            //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 cmd_demux_005 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                  //      sink.ready
		.sink_channel       (router_005_src_channel),                //          .channel
		.sink_data          (router_005_src_data),                   //          .data
		.sink_startofpacket (router_005_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_005_src_valid),                  //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),              //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),              //          .valid
		.src0_data          (cmd_demux_005_src0_data),               //          .data
		.src0_channel       (cmd_demux_005_src0_channel),            //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 cmd_demux_006 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                  //      sink.ready
		.sink_channel       (router_006_src_channel),                //          .channel
		.sink_data          (router_006_src_data),                   //          .data
		.sink_startofpacket (router_006_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_006_src_valid),                  //          .valid
		.src0_ready         (cmd_demux_006_src0_ready),              //      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),              //          .valid
		.src0_data          (cmd_demux_006_src0_data),               //          .data
		.src0_channel       (cmd_demux_006_src0_channel),            //          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 cmd_demux_007 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                  //      sink.ready
		.sink_channel       (router_007_src_channel),                //          .channel
		.sink_data          (router_007_src_data),                   //          .data
		.sink_startofpacket (router_007_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_007_src_valid),                  //          .valid
		.src0_ready         (cmd_demux_007_src0_ready),              //      src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),              //          .valid
		.src0_data          (cmd_demux_007_src0_data),               //          .data
		.src0_channel       (cmd_demux_007_src0_channel),            //          .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (ddr3_ram_afi_clk_clk),                                      //       clk.clk
		.reset               (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                                         //          .valid
		.src_data            (cmd_mux_src_data),                                          //          .data
		.src_channel         (cmd_mux_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                         //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                         //          .valid
		.sink0_channel       (crosser_out_channel),                                       //          .channel
		.sink0_data          (crosser_out_data),                                          //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                   //          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                                     //     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                                     //          .valid
		.sink1_channel       (crosser_003_out_channel),                                   //          .channel
		.sink1_data          (crosser_003_out_data),                                      //          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),                             //          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket),                               //          .endofpacket
		.sink2_ready         (crosser_005_out_ready),                                     //     sink2.ready
		.sink2_valid         (crosser_005_out_valid),                                     //          .valid
		.sink2_channel       (crosser_005_out_channel),                                   //          .channel
		.sink2_data          (crosser_005_out_data),                                      //          .data
		.sink2_startofpacket (crosser_005_out_startofpacket),                             //          .startofpacket
		.sink2_endofpacket   (crosser_005_out_endofpacket),                               //          .endofpacket
		.sink3_ready         (crosser_006_out_ready),                                     //     sink3.ready
		.sink3_valid         (crosser_006_out_valid),                                     //          .valid
		.sink3_channel       (crosser_006_out_channel),                                   //          .channel
		.sink3_data          (crosser_006_out_data),                                      //          .data
		.sink3_startofpacket (crosser_006_out_startofpacket),                             //          .startofpacket
		.sink3_endofpacket   (crosser_006_out_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_001 (
		.clk                 (ext_flash_clock_bridge_out_clk_clk),          //       clk.clk
		.reset               (ext_flash_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                       //          .valid
		.src_data            (cmd_mux_001_src_data),                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                       //          .valid
		.sink0_channel       (crosser_001_out_channel),                     //          .channel
		.sink0_data          (crosser_001_out_data),                        //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                  //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_002 cmd_mux_002 (
		.clk                 (ext_flash_clock_bridge_out_clk_clk),          //       clk.clk
		.reset               (ext_flash_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                       //          .valid
		.src_data            (cmd_mux_002_src_data),                        //          .data
		.src_channel         (cmd_mux_002_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                       //          .valid
		.sink0_channel       (crosser_002_out_channel),                     //          .channel
		.sink0_data          (crosser_002_out_data),                        //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket),                 //          .endofpacket
		.sink1_ready         (crosser_004_out_ready),                       //     sink1.ready
		.sink1_valid         (crosser_004_out_valid),                       //          .valid
		.sink1_channel       (crosser_004_out_channel),                     //          .channel
		.sink1_data          (crosser_004_out_data),                        //          .data
		.sink1_startofpacket (crosser_004_out_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (crosser_004_out_endofpacket)                  //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_003 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                //          .valid
		.src_data            (cmd_mux_003_src_data),                                 //          .data
		.src_channel         (cmd_mux_003_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                               //          .channel
		.sink0_data          (cmd_demux_src3_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                            //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_004 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                //          .valid
		.src_data            (cmd_mux_004_src_data),                                 //          .data
		.src_channel         (cmd_mux_004_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                               //          .channel
		.sink0_data          (cmd_demux_src4_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                            //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_005 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                 //          .valid
		.src_data            (cmd_mux_005_src_data),                  //          .data
		.src_channel         (cmd_mux_005_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                //          .channel
		.sink0_data          (cmd_demux_src5_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)             //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_006 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                 //          .valid
		.src_data            (cmd_mux_006_src_data),                  //          .data
		.src_channel         (cmd_mux_006_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                //          .channel
		.sink0_data          (cmd_demux_src6_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)             //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_007 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                 //          .valid
		.src_data            (cmd_mux_007_src_data),                  //          .data
		.src_channel         (cmd_mux_007_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                //          .channel
		.sink0_data          (cmd_demux_src7_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)             //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_008 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                 //          .valid
		.src_data            (cmd_mux_008_src_data),                  //          .data
		.src_channel         (cmd_mux_008_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                //          .channel
		.sink0_data          (cmd_demux_src8_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)             //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_009 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                 //          .valid
		.src_data            (cmd_mux_009_src_data),                  //          .data
		.src_channel         (cmd_mux_009_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                //          .channel
		.sink0_data          (cmd_demux_src9_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)             //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_002 cmd_mux_010 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                 //          .valid
		.src_data            (cmd_mux_010_src_data),                  //          .data
		.src_channel         (cmd_mux_010_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src10_channel),               //          .channel
		.sink0_data          (cmd_demux_src10_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src2_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_002 cmd_mux_011 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                 //          .valid
		.src_data            (cmd_mux_011_src_data),                  //          .data
		.src_channel         (cmd_mux_011_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src11_channel),               //          .channel
		.sink0_data          (cmd_demux_src11_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src3_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_012 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                 //          .valid
		.src_data            (cmd_mux_012_src_data),                  //          .data
		.src_channel         (cmd_mux_012_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src12_channel),               //          .channel
		.sink0_data          (cmd_demux_src12_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)            //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_013 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                 //          .valid
		.src_data            (cmd_mux_013_src_data),                  //          .data
		.src_channel         (cmd_mux_013_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src13_channel),               //          .channel
		.sink0_data          (cmd_demux_src13_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)            //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_014 cmd_mux_014 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                //          .valid
		.src_data            (cmd_mux_014_src_data),                                 //          .data
		.src_channel         (cmd_mux_014_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                              //          .channel
		.sink0_data          (cmd_demux_src14_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket),                          //          .endofpacket
		.sink1_ready         (cmd_demux_004_src0_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_004_src0_valid),                             //          .valid
		.sink1_channel       (cmd_demux_004_src0_channel),                           //          .channel
		.sink1_data          (cmd_demux_004_src0_data),                              //          .data
		.sink1_startofpacket (cmd_demux_004_src0_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src0_endofpacket),                       //          .endofpacket
		.sink2_ready         (cmd_demux_005_src0_ready),                             //     sink2.ready
		.sink2_valid         (cmd_demux_005_src0_valid),                             //          .valid
		.sink2_channel       (cmd_demux_005_src0_channel),                           //          .channel
		.sink2_data          (cmd_demux_005_src0_data),                              //          .data
		.sink2_startofpacket (cmd_demux_005_src0_startofpacket),                     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_005_src0_endofpacket),                       //          .endofpacket
		.sink3_ready         (cmd_demux_006_src0_ready),                             //     sink3.ready
		.sink3_valid         (cmd_demux_006_src0_valid),                             //          .valid
		.sink3_channel       (cmd_demux_006_src0_channel),                           //          .channel
		.sink3_data          (cmd_demux_006_src0_data),                              //          .data
		.sink3_startofpacket (cmd_demux_006_src0_startofpacket),                     //          .startofpacket
		.sink3_endofpacket   (cmd_demux_006_src0_endofpacket),                       //          .endofpacket
		.sink4_ready         (cmd_demux_007_src0_ready),                             //     sink4.ready
		.sink4_valid         (cmd_demux_007_src0_valid),                             //          .valid
		.sink4_channel       (cmd_demux_007_src0_channel),                           //          .channel
		.sink4_data          (cmd_demux_007_src0_data),                              //          .data
		.sink4_startofpacket (cmd_demux_007_src0_startofpacket),                     //          .startofpacket
		.sink4_endofpacket   (cmd_demux_007_src0_endofpacket)                        //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_015 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                //          .valid
		.src_data            (cmd_mux_015_src_data),                                 //          .data
		.src_channel         (cmd_mux_015_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                              //          .channel
		.sink0_data          (cmd_demux_src15_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                           //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_016 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                                //          .valid
		.src_data            (cmd_mux_016_src_data),                                 //          .data
		.src_channel         (cmd_mux_016_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                              //          .channel
		.sink0_data          (cmd_demux_src16_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                           //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_017 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                 //          .valid
		.src_data            (cmd_mux_017_src_data),                  //          .data
		.src_channel         (cmd_mux_017_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src17_channel),               //          .channel
		.sink0_data          (cmd_demux_src17_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)            //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_018 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                 //          .valid
		.src_data            (cmd_mux_018_src_data),                  //          .data
		.src_channel         (cmd_mux_018_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src18_channel),               //          .channel
		.sink0_data          (cmd_demux_src18_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket)            //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_019 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                 //          .valid
		.src_data            (cmd_mux_019_src_data),                  //          .data
		.src_channel         (cmd_mux_019_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src19_channel),               //          .channel
		.sink0_data          (cmd_demux_src19_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket)            //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_020 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                 //          .valid
		.src_data            (cmd_mux_020_src_data),                  //          .data
		.src_channel         (cmd_mux_020_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src20_channel),               //          .channel
		.sink0_data          (cmd_demux_src20_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket)            //          .endofpacket
	);

	q_sys_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (ddr3_ram_afi_clk_clk),                                      //       clk.clk
		.reset              (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                      //      sink.ready
		.sink_channel       (router_008_src_channel),                                    //          .channel
		.sink_data          (router_008_src_data),                                       //          .data
		.sink_startofpacket (router_008_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_008_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                      //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                      //          .valid
		.src1_data          (rsp_demux_src1_data),                                       //          .data
		.src1_channel       (rsp_demux_src1_channel),                                    //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                              //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                      //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                      //          .valid
		.src2_data          (rsp_demux_src2_data),                                       //          .data
		.src2_channel       (rsp_demux_src2_channel),                                    //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                              //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),                                //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                                      //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                                      //          .valid
		.src3_data          (rsp_demux_src3_data),                                       //          .data
		.src3_channel       (rsp_demux_src3_channel),                                    //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),                              //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket)                                 //          .endofpacket
	);

	q_sys_mm_interconnect_1_rsp_demux_001 rsp_demux_001 (
		.clk                (ext_flash_clock_bridge_out_clk_clk),          //       clk.clk
		.reset              (ext_flash_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                        //      sink.ready
		.sink_channel       (router_009_src_channel),                      //          .channel
		.sink_data          (router_009_src_data),                         //          .data
		.sink_startofpacket (router_009_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_009_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_001_src0_data),                     //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)               //          .endofpacket
	);

	q_sys_mm_interconnect_1_rsp_demux_002 rsp_demux_002 (
		.clk                (ext_flash_clock_bridge_out_clk_clk),          //       clk.clk
		.reset              (ext_flash_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                        //      sink.ready
		.sink_channel       (router_010_src_channel),                      //          .channel
		.sink_data          (router_010_src_data),                         //          .data
		.sink_startofpacket (router_010_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_010_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_002_src0_data),                     //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_002_src1_data),                     //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)               //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_003 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                 //      sink.ready
		.sink_channel       (router_011_src_channel),                               //          .channel
		.sink_data          (router_011_src_data),                                  //          .data
		.sink_startofpacket (router_011_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_011_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_003_src0_data),                              //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                        //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_004 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                 //      sink.ready
		.sink_channel       (router_012_src_channel),                               //          .channel
		.sink_data          (router_012_src_data),                                  //          .data
		.sink_startofpacket (router_012_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_012_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_004_src0_data),                              //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                        //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_005 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                  //      sink.ready
		.sink_channel       (router_013_src_channel),                //          .channel
		.sink_data          (router_013_src_data),                   //          .data
		.sink_startofpacket (router_013_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_013_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),              //          .valid
		.src0_data          (rsp_demux_005_src0_data),               //          .data
		.src0_channel       (rsp_demux_005_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_006 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                  //      sink.ready
		.sink_channel       (router_014_src_channel),                //          .channel
		.sink_data          (router_014_src_data),                   //          .data
		.sink_startofpacket (router_014_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_014_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),              //          .valid
		.src0_data          (rsp_demux_006_src0_data),               //          .data
		.src0_channel       (rsp_demux_006_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_007 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                  //      sink.ready
		.sink_channel       (router_015_src_channel),                //          .channel
		.sink_data          (router_015_src_data),                   //          .data
		.sink_startofpacket (router_015_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_015_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),              //          .valid
		.src0_data          (rsp_demux_007_src0_data),               //          .data
		.src0_channel       (rsp_demux_007_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_008 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                  //      sink.ready
		.sink_channel       (router_016_src_channel),                //          .channel
		.sink_data          (router_016_src_data),                   //          .data
		.sink_startofpacket (router_016_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_016_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),              //          .valid
		.src0_data          (rsp_demux_008_src0_data),               //          .data
		.src0_channel       (rsp_demux_008_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_009 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                  //      sink.ready
		.sink_channel       (router_017_src_channel),                //          .channel
		.sink_data          (router_017_src_data),                   //          .data
		.sink_startofpacket (router_017_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_017_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),              //          .valid
		.src0_data          (rsp_demux_009_src0_data),               //          .data
		.src0_channel       (rsp_demux_009_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_rsp_demux_010 rsp_demux_010 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                  //      sink.ready
		.sink_channel       (router_018_src_channel),                //          .channel
		.sink_data          (router_018_src_data),                   //          .data
		.sink_startofpacket (router_018_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_018_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),              //          .valid
		.src0_data          (rsp_demux_010_src0_data),               //          .data
		.src0_channel       (rsp_demux_010_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),              //          .valid
		.src1_data          (rsp_demux_010_src1_data),               //          .data
		.src1_channel       (rsp_demux_010_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_rsp_demux_010 rsp_demux_011 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                  //      sink.ready
		.sink_channel       (router_019_src_channel),                //          .channel
		.sink_data          (router_019_src_data),                   //          .data
		.sink_startofpacket (router_019_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_019_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),              //          .valid
		.src0_data          (rsp_demux_011_src0_data),               //          .data
		.src0_channel       (rsp_demux_011_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),              //          .valid
		.src1_data          (rsp_demux_011_src1_data),               //          .data
		.src1_channel       (rsp_demux_011_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_012 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                  //      sink.ready
		.sink_channel       (router_020_src_channel),                //          .channel
		.sink_data          (router_020_src_data),                   //          .data
		.sink_startofpacket (router_020_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_020_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),              //          .valid
		.src0_data          (rsp_demux_012_src0_data),               //          .data
		.src0_channel       (rsp_demux_012_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_013 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                  //      sink.ready
		.sink_channel       (router_021_src_channel),                //          .channel
		.sink_data          (router_021_src_data),                   //          .data
		.sink_startofpacket (router_021_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_021_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),              //          .valid
		.src0_data          (rsp_demux_013_src0_data),               //          .data
		.src0_channel       (rsp_demux_013_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_rsp_demux_014 rsp_demux_014 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                                 //      sink.ready
		.sink_channel       (router_022_src_channel),                               //          .channel
		.sink_data          (router_022_src_data),                                  //          .data
		.sink_startofpacket (router_022_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_022_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_014_src0_data),                              //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_014_src1_data),                              //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_014_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_014_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_014_src2_data),                              //          .data
		.src2_channel       (rsp_demux_014_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_014_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_014_src2_endofpacket),                       //          .endofpacket
		.src3_ready         (rsp_demux_014_src3_ready),                             //      src3.ready
		.src3_valid         (rsp_demux_014_src3_valid),                             //          .valid
		.src3_data          (rsp_demux_014_src3_data),                              //          .data
		.src3_channel       (rsp_demux_014_src3_channel),                           //          .channel
		.src3_startofpacket (rsp_demux_014_src3_startofpacket),                     //          .startofpacket
		.src3_endofpacket   (rsp_demux_014_src3_endofpacket),                       //          .endofpacket
		.src4_ready         (rsp_demux_014_src4_ready),                             //      src4.ready
		.src4_valid         (rsp_demux_014_src4_valid),                             //          .valid
		.src4_data          (rsp_demux_014_src4_data),                              //          .data
		.src4_channel       (rsp_demux_014_src4_channel),                           //          .channel
		.src4_startofpacket (rsp_demux_014_src4_startofpacket),                     //          .startofpacket
		.src4_endofpacket   (rsp_demux_014_src4_endofpacket)                        //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_015 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                                 //      sink.ready
		.sink_channel       (router_023_src_channel),                               //          .channel
		.sink_data          (router_023_src_data),                                  //          .data
		.sink_startofpacket (router_023_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_023_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_015_src0_data),                              //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                        //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_016 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (eth_tse_reset_connection_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                                 //      sink.ready
		.sink_channel       (router_024_src_channel),                               //          .channel
		.sink_data          (router_024_src_data),                                  //          .data
		.sink_startofpacket (router_024_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_024_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_016_src0_data),                              //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                        //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_017 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                  //      sink.ready
		.sink_channel       (router_025_src_channel),                //          .channel
		.sink_data          (router_025_src_data),                   //          .data
		.sink_startofpacket (router_025_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_025_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),              //          .valid
		.src0_data          (rsp_demux_017_src0_data),               //          .data
		.src0_channel       (rsp_demux_017_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_018 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                  //      sink.ready
		.sink_channel       (router_026_src_channel),                //          .channel
		.sink_data          (router_026_src_data),                   //          .data
		.sink_startofpacket (router_026_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_026_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),              //          .valid
		.src0_data          (rsp_demux_018_src0_data),               //          .data
		.src0_channel       (rsp_demux_018_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_019 (
		.clk                (sys_clk_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                  //      sink.ready
		.sink_channel       (router_027_src_channel),                //          .channel
		.sink_data          (router_027_src_data),                   //          .data
		.sink_startofpacket (router_027_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_027_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),              //          .valid
		.src0_data          (rsp_demux_019_src0_data),               //          .data
		.src0_channel       (rsp_demux_019_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_cmd_demux_002 rsp_demux_020 (
		.clk                (sys_clk_clk_clk),                                        //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (calibration_ram_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (calibration_ram_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (calibration_ram_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (calibration_ram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (calibration_ram_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (calibration_ram_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_020_src0_data),                                //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                  (sys_clk_clk_clk),                       //       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                     //       src.ready
		.src_valid            (rsp_mux_src_valid),                     //          .valid
		.src_data             (rsp_mux_src_data),                      //          .data
		.src_channel          (rsp_mux_src_channel),                   //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready          (crosser_007_out_ready),                 //     sink0.ready
		.sink0_valid          (crosser_007_out_valid),                 //          .valid
		.sink0_channel        (crosser_007_out_channel),               //          .channel
		.sink0_data           (crosser_007_out_data),                  //          .data
		.sink0_startofpacket  (crosser_007_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket    (crosser_007_out_endofpacket),           //          .endofpacket
		.sink1_ready          (crosser_011_out_ready),                 //     sink1.ready
		.sink1_valid          (crosser_011_out_valid),                 //          .valid
		.sink1_channel        (crosser_011_out_channel),               //          .channel
		.sink1_data           (crosser_011_out_data),                  //          .data
		.sink1_startofpacket  (crosser_011_out_startofpacket),         //          .startofpacket
		.sink1_endofpacket    (crosser_011_out_endofpacket),           //          .endofpacket
		.sink2_ready          (crosser_012_out_ready),                 //     sink2.ready
		.sink2_valid          (crosser_012_out_valid),                 //          .valid
		.sink2_channel        (crosser_012_out_channel),               //          .channel
		.sink2_data           (crosser_012_out_data),                  //          .data
		.sink2_startofpacket  (crosser_012_out_startofpacket),         //          .startofpacket
		.sink2_endofpacket    (crosser_012_out_endofpacket),           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),              //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),              //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),            //          .channel
		.sink3_data           (rsp_demux_003_src0_data),               //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),      //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),        //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),              //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),              //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),            //          .channel
		.sink4_data           (rsp_demux_004_src0_data),               //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),      //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),        //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),              //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),              //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),            //          .channel
		.sink5_data           (rsp_demux_005_src0_data),               //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),      //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),        //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),              //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),              //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),            //          .channel
		.sink6_data           (rsp_demux_006_src0_data),               //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),      //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),        //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),              //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),              //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),            //          .channel
		.sink7_data           (rsp_demux_007_src0_data),               //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),      //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),        //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),              //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),              //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),            //          .channel
		.sink8_data           (rsp_demux_008_src0_data),               //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),      //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),        //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),              //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),              //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),            //          .channel
		.sink9_data           (rsp_demux_009_src0_data),               //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),      //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),        //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),              //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),              //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),            //          .channel
		.sink10_data          (rsp_demux_010_src0_data),               //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),      //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),        //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),              //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),              //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),            //          .channel
		.sink11_data          (rsp_demux_011_src0_data),               //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),      //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),        //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),              //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),              //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),            //          .channel
		.sink12_data          (rsp_demux_012_src0_data),               //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),      //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),        //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),              //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),              //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),            //          .channel
		.sink13_data          (rsp_demux_013_src0_data),               //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),      //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),        //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),              //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),              //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),            //          .channel
		.sink14_data          (rsp_demux_014_src0_data),               //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),      //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),        //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),              //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),              //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),            //          .channel
		.sink15_data          (rsp_demux_015_src0_data),               //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),      //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),        //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),              //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),              //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),            //          .channel
		.sink16_data          (rsp_demux_016_src0_data),               //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),      //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),        //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),              //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),              //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),            //          .channel
		.sink17_data          (rsp_demux_017_src0_data),               //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),      //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),        //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),              //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),              //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),            //          .channel
		.sink18_data          (rsp_demux_018_src0_data),               //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),      //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),        //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),              //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),              //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),            //          .channel
		.sink19_data          (rsp_demux_019_src0_data),               //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),      //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),        //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),              //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),              //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),            //          .channel
		.sink20_data          (rsp_demux_020_src0_data),               //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),      //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_rsp_mux_001 rsp_mux_001 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                 //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                 //          .valid
		.src_data            (rsp_mux_001_src_data),                  //          .data
		.src_channel         (rsp_mux_001_src_channel),               //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_008_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_008_out_valid),                 //          .valid
		.sink0_channel       (crosser_008_out_channel),               //          .channel
		.sink0_data          (crosser_008_out_data),                  //          .data
		.sink0_startofpacket (crosser_008_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_008_out_endofpacket),           //          .endofpacket
		.sink1_ready         (crosser_013_out_ready),                 //     sink1.ready
		.sink1_valid         (crosser_013_out_valid),                 //          .valid
		.sink1_channel       (crosser_013_out_channel),               //          .channel
		.sink1_data          (crosser_013_out_data),                  //          .data
		.sink1_startofpacket (crosser_013_out_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (crosser_013_out_endofpacket),           //          .endofpacket
		.sink2_ready         (rsp_demux_010_src1_ready),              //     sink2.ready
		.sink2_valid         (rsp_demux_010_src1_valid),              //          .valid
		.sink2_channel       (rsp_demux_010_src1_channel),            //          .channel
		.sink2_data          (rsp_demux_010_src1_data),               //          .data
		.sink2_startofpacket (rsp_demux_010_src1_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (rsp_demux_010_src1_endofpacket),        //          .endofpacket
		.sink3_ready         (rsp_demux_011_src1_ready),              //     sink3.ready
		.sink3_valid         (rsp_demux_011_src1_valid),              //          .valid
		.sink3_channel       (rsp_demux_011_src1_channel),            //          .channel
		.sink3_data          (rsp_demux_011_src1_data),               //          .data
		.sink3_startofpacket (rsp_demux_011_src1_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (rsp_demux_011_src1_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_rsp_mux_002 rsp_mux_002 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                 //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                 //          .valid
		.src_data            (rsp_mux_002_src_data),                  //          .data
		.src_channel         (rsp_mux_002_src_channel),               //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_009_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_009_out_valid),                 //          .valid
		.sink0_channel       (crosser_009_out_channel),               //          .channel
		.sink0_data          (crosser_009_out_data),                  //          .data
		.sink0_startofpacket (crosser_009_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_009_out_endofpacket)            //          .endofpacket
	);

	q_sys_mm_interconnect_1_rsp_mux_002 rsp_mux_003 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                 //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                 //          .valid
		.src_data            (rsp_mux_003_src_data),                  //          .data
		.src_channel         (rsp_mux_003_src_channel),               //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_010_out_ready),                 //     sink0.ready
		.sink0_valid         (crosser_010_out_valid),                 //          .valid
		.sink0_channel       (crosser_010_out_channel),               //          .channel
		.sink0_data          (crosser_010_out_data),                  //          .data
		.sink0_startofpacket (crosser_010_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (crosser_010_out_endofpacket)            //          .endofpacket
	);

	q_sys_mm_interconnect_1_rsp_mux_002 rsp_mux_004 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                 //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                 //          .valid
		.src_data            (rsp_mux_004_src_data),                  //          .data
		.src_channel         (rsp_mux_004_src_channel),               //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),           //          .endofpacket
		.sink0_ready         (rsp_demux_014_src1_ready),              //     sink0.ready
		.sink0_valid         (rsp_demux_014_src1_valid),              //          .valid
		.sink0_channel       (rsp_demux_014_src1_channel),            //          .channel
		.sink0_data          (rsp_demux_014_src1_data),               //          .data
		.sink0_startofpacket (rsp_demux_014_src1_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_014_src1_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_rsp_mux_002 rsp_mux_005 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                 //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                 //          .valid
		.src_data            (rsp_mux_005_src_data),                  //          .data
		.src_channel         (rsp_mux_005_src_channel),               //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),           //          .endofpacket
		.sink0_ready         (rsp_demux_014_src2_ready),              //     sink0.ready
		.sink0_valid         (rsp_demux_014_src2_valid),              //          .valid
		.sink0_channel       (rsp_demux_014_src2_channel),            //          .channel
		.sink0_data          (rsp_demux_014_src2_data),               //          .data
		.sink0_startofpacket (rsp_demux_014_src2_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_014_src2_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_rsp_mux_002 rsp_mux_006 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                 //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                 //          .valid
		.src_data            (rsp_mux_006_src_data),                  //          .data
		.src_channel         (rsp_mux_006_src_channel),               //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),           //          .endofpacket
		.sink0_ready         (rsp_demux_014_src3_ready),              //     sink0.ready
		.sink0_valid         (rsp_demux_014_src3_valid),              //          .valid
		.sink0_channel       (rsp_demux_014_src3_channel),            //          .channel
		.sink0_data          (rsp_demux_014_src3_data),               //          .data
		.sink0_startofpacket (rsp_demux_014_src3_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_014_src3_endofpacket)         //          .endofpacket
	);

	q_sys_mm_interconnect_1_rsp_mux_002 rsp_mux_007 (
		.clk                 (sys_clk_clk_clk),                       //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                 //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                 //          .valid
		.src_data            (rsp_mux_007_src_data),                  //          .data
		.src_channel         (rsp_mux_007_src_channel),               //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),           //          .endofpacket
		.sink0_ready         (rsp_demux_014_src4_ready),              //     sink0.ready
		.sink0_valid         (rsp_demux_014_src4_valid),              //          .valid
		.sink0_channel       (rsp_demux_014_src4_channel),            //          .channel
		.sink0_data          (rsp_demux_014_src4_data),               //          .data
		.sink0_startofpacket (rsp_demux_014_src4_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_014_src4_endofpacket)         //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (46),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (61),
		.IN_PKT_BYTE_CNT_L             (53),
		.IN_PKT_TRANS_COMPRESSED_READ  (47),
		.IN_PKT_TRANS_WRITE            (49),
		.IN_PKT_BURSTWRAP_H            (70),
		.IN_PKT_BURSTWRAP_L            (62),
		.IN_PKT_BURST_SIZE_H           (73),
		.IN_PKT_BURST_SIZE_L           (71),
		.IN_PKT_RESPONSE_STATUS_H      (99),
		.IN_PKT_RESPONSE_STATUS_L      (98),
		.IN_PKT_TRANS_EXCLUSIVE        (52),
		.IN_PKT_BURST_TYPE_H           (75),
		.IN_PKT_BURST_TYPE_L           (74),
		.IN_PKT_ORI_BURST_SIZE_L       (100),
		.IN_PKT_ORI_BURST_SIZE_H       (102),
		.IN_ST_DATA_W                  (103),
		.OUT_PKT_ADDR_H                (64),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (71),
		.OUT_PKT_TRANS_COMPRESSED_READ (65),
		.OUT_PKT_BURST_SIZE_H          (91),
		.OUT_PKT_BURST_SIZE_L          (89),
		.OUT_PKT_RESPONSE_STATUS_H     (117),
		.OUT_PKT_RESPONSE_STATUS_L     (116),
		.OUT_PKT_TRANS_EXCLUSIVE       (70),
		.OUT_PKT_BURST_TYPE_H          (93),
		.OUT_PKT_BURST_TYPE_L          (92),
		.OUT_PKT_ORI_BURST_SIZE_L      (118),
		.OUT_PKT_ORI_BURST_SIZE_H      (120),
		.OUT_ST_DATA_W                 (121),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) calibration_ram_s1_rsp_width_adapter (
		.clk                  (sys_clk_clk_clk),                                        //       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_028_src_valid),                                   //      sink.valid
		.in_channel           (router_028_src_channel),                                 //          .channel
		.in_startofpacket     (router_028_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (router_028_src_endofpacket),                             //          .endofpacket
		.in_ready             (router_028_src_ready),                                   //          .ready
		.in_data              (router_028_src_data),                                    //          .data
		.out_endofpacket      (calibration_ram_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (calibration_ram_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (calibration_ram_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (calibration_ram_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (calibration_ram_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (calibration_ram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (64),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (71),
		.IN_PKT_TRANS_COMPRESSED_READ  (65),
		.IN_PKT_TRANS_WRITE            (67),
		.IN_PKT_BURSTWRAP_H            (88),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (91),
		.IN_PKT_BURST_SIZE_L           (89),
		.IN_PKT_RESPONSE_STATUS_H      (117),
		.IN_PKT_RESPONSE_STATUS_L      (116),
		.IN_PKT_TRANS_EXCLUSIVE        (70),
		.IN_PKT_BURST_TYPE_H           (93),
		.IN_PKT_BURST_TYPE_L           (92),
		.IN_PKT_ORI_BURST_SIZE_L       (118),
		.IN_PKT_ORI_BURST_SIZE_H       (120),
		.IN_ST_DATA_W                  (121),
		.OUT_PKT_ADDR_H                (46),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (61),
		.OUT_PKT_BYTE_CNT_L            (53),
		.OUT_PKT_TRANS_COMPRESSED_READ (47),
		.OUT_PKT_BURST_SIZE_H          (73),
		.OUT_PKT_BURST_SIZE_L          (71),
		.OUT_PKT_RESPONSE_STATUS_H     (99),
		.OUT_PKT_RESPONSE_STATUS_L     (98),
		.OUT_PKT_TRANS_EXCLUSIVE       (52),
		.OUT_PKT_BURST_TYPE_H          (75),
		.OUT_PKT_BURST_TYPE_L          (74),
		.OUT_PKT_ORI_BURST_SIZE_L      (100),
		.OUT_PKT_ORI_BURST_SIZE_H      (102),
		.OUT_ST_DATA_W                 (103),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) calibration_ram_s1_cmd_width_adapter (
		.clk                  (sys_clk_clk_clk),                                        //       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_020_src_valid),                                  //      sink.valid
		.in_channel           (cmd_mux_020_src_channel),                                //          .channel
		.in_startofpacket     (cmd_mux_020_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (cmd_mux_020_src_endofpacket),                            //          .endofpacket
		.in_ready             (cmd_mux_020_src_ready),                                  //          .ready
		.in_data              (cmd_mux_020_src_data),                                   //          .data
		.out_endofpacket      (calibration_ram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (calibration_ram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (calibration_ram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (calibration_ram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (calibration_ram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (calibration_ram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                  // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (sys_clk_clk_clk),                                           //        in_clk.clk
		.in_reset          (cpu_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (ddr3_ram_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                      //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                    //              .channel
		.in_data           (cmd_demux_src0_data),                                       //              .data
		.out_ready         (crosser_out_ready),                                         //           out.ready
		.out_valid         (crosser_out_valid),                                         //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                 //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                   //              .endofpacket
		.out_channel       (crosser_out_channel),                                       //              .channel
		.out_data          (crosser_out_data),                                          //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (sys_clk_clk_clk),                             //        in_clk.clk
		.in_reset          (cpu_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (ext_flash_clock_bridge_out_clk_clk),          //       out_clk.clk
		.out_reset         (ext_flash_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                        //            in.ready
		.in_valid          (cmd_demux_src1_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                      //              .channel
		.in_data           (cmd_demux_src1_data),                         //              .data
		.out_ready         (crosser_001_out_ready),                       //           out.ready
		.out_valid         (crosser_001_out_valid),                       //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_001_out_channel),                     //              .channel
		.out_data          (crosser_001_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (sys_clk_clk_clk),                             //        in_clk.clk
		.in_reset          (cpu_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (ext_flash_clock_bridge_out_clk_clk),          //       out_clk.clk
		.out_reset         (ext_flash_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                        //            in.ready
		.in_valid          (cmd_demux_src2_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                      //              .channel
		.in_data           (cmd_demux_src2_data),                         //              .data
		.out_ready         (crosser_002_out_ready),                       //           out.ready
		.out_valid         (crosser_002_out_valid),                       //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_002_out_channel),                     //              .channel
		.out_data          (crosser_002_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (sys_clk_clk_clk),                                           //        in_clk.clk
		.in_reset          (cpu_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (ddr3_ram_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                  //            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                //              .channel
		.in_data           (cmd_demux_001_src0_data),                                   //              .data
		.out_ready         (crosser_003_out_ready),                                     //           out.ready
		.out_valid         (crosser_003_out_valid),                                     //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                   //              .channel
		.out_data          (crosser_003_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (sys_clk_clk_clk),                             //        in_clk.clk
		.in_reset          (cpu_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (ext_flash_clock_bridge_out_clk_clk),          //       out_clk.clk
		.out_reset         (ext_flash_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                    //            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                  //              .channel
		.in_data           (cmd_demux_001_src1_data),                     //              .data
		.out_ready         (crosser_004_out_ready),                       //           out.ready
		.out_valid         (crosser_004_out_valid),                       //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_004_out_channel),                     //              .channel
		.out_data          (crosser_004_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (sys_clk_clk_clk),                                           //        in_clk.clk
		.in_reset          (cpu_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (ddr3_ram_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                                  //            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                                //              .channel
		.in_data           (cmd_demux_002_src0_data),                                   //              .data
		.out_ready         (crosser_005_out_ready),                                     //           out.ready
		.out_valid         (crosser_005_out_valid),                                     //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                   //              .channel
		.out_data          (crosser_005_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (sys_clk_clk_clk),                                           //        in_clk.clk
		.in_reset          (cpu_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (ddr3_ram_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src0_ready),                                  //            in.ready
		.in_valid          (cmd_demux_003_src0_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_003_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src0_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_003_src0_channel),                                //              .channel
		.in_data           (cmd_demux_003_src0_data),                                   //              .data
		.out_ready         (crosser_006_out_ready),                                     //           out.ready
		.out_valid         (crosser_006_out_valid),                                     //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                   //              .channel
		.out_data          (crosser_006_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (ddr3_ram_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_clk_clk_clk),                                           //       out_clk.clk
		.out_reset         (cpu_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                      //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                      //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                              //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                    //              .channel
		.in_data           (rsp_demux_src0_data),                                       //              .data
		.out_ready         (crosser_007_out_ready),                                     //           out.ready
		.out_valid         (crosser_007_out_valid),                                     //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                   //              .channel
		.out_data          (crosser_007_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (ddr3_ram_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_clk_clk_clk),                                           //       out_clk.clk
		.out_reset         (cpu_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                      //            in.ready
		.in_valid          (rsp_demux_src1_valid),                                      //              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                              //              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                //              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                    //              .channel
		.in_data           (rsp_demux_src1_data),                                       //              .data
		.out_ready         (crosser_008_out_ready),                                     //           out.ready
		.out_valid         (crosser_008_out_valid),                                     //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                   //              .channel
		.out_data          (crosser_008_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (ddr3_ram_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_clk_clk_clk),                                           //       out_clk.clk
		.out_reset         (cpu_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (rsp_demux_src2_ready),                                      //            in.ready
		.in_valid          (rsp_demux_src2_valid),                                      //              .valid
		.in_startofpacket  (rsp_demux_src2_startofpacket),                              //              .startofpacket
		.in_endofpacket    (rsp_demux_src2_endofpacket),                                //              .endofpacket
		.in_channel        (rsp_demux_src2_channel),                                    //              .channel
		.in_data           (rsp_demux_src2_data),                                       //              .data
		.out_ready         (crosser_009_out_ready),                                     //           out.ready
		.out_valid         (crosser_009_out_valid),                                     //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_009_out_channel),                                   //              .channel
		.out_data          (crosser_009_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (ddr3_ram_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_clk_clk_clk),                                           //       out_clk.clk
		.out_reset         (cpu_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (rsp_demux_src3_ready),                                      //            in.ready
		.in_valid          (rsp_demux_src3_valid),                                      //              .valid
		.in_startofpacket  (rsp_demux_src3_startofpacket),                              //              .startofpacket
		.in_endofpacket    (rsp_demux_src3_endofpacket),                                //              .endofpacket
		.in_channel        (rsp_demux_src3_channel),                                    //              .channel
		.in_data           (rsp_demux_src3_data),                                       //              .data
		.out_ready         (crosser_010_out_ready),                                     //           out.ready
		.out_valid         (crosser_010_out_valid),                                     //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_010_out_channel),                                   //              .channel
		.out_data          (crosser_010_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (ext_flash_clock_bridge_out_clk_clk),          //        in_clk.clk
		.in_reset          (ext_flash_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_clk_clk_clk),                             //       out_clk.clk
		.out_reset         (cpu_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                    //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                  //              .channel
		.in_data           (rsp_demux_001_src0_data),                     //              .data
		.out_ready         (crosser_011_out_ready),                       //           out.ready
		.out_valid         (crosser_011_out_valid),                       //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_011_out_channel),                     //              .channel
		.out_data          (crosser_011_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (ext_flash_clock_bridge_out_clk_clk),          //        in_clk.clk
		.in_reset          (ext_flash_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_clk_clk_clk),                             //       out_clk.clk
		.out_reset         (cpu_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                    //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                  //              .channel
		.in_data           (rsp_demux_002_src0_data),                     //              .data
		.out_ready         (crosser_012_out_ready),                       //           out.ready
		.out_valid         (crosser_012_out_valid),                       //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_012_out_channel),                     //              .channel
		.out_data          (crosser_012_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (121),
		.BITS_PER_SYMBOL     (121),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (21),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (ext_flash_clock_bridge_out_clk_clk),          //        in_clk.clk
		.in_reset          (ext_flash_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_clk_clk_clk),                             //       out_clk.clk
		.out_reset         (cpu_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                    //            in.ready
		.in_valid          (rsp_demux_002_src1_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_002_src1_channel),                  //              .channel
		.in_data           (rsp_demux_002_src1_data),                     //              .data
		.out_ready         (crosser_013_out_ready),                       //           out.ready
		.out_valid         (crosser_013_out_valid),                       //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_013_out_channel),                     //              .channel
		.out_data          (crosser_013_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (ddr3_ram_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (ddr3_ram_avl_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ddr3_ram_avl_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (ddr3_ram_avl_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (ddr3_ram_avl_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                              //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (ext_flash_clock_bridge_out_clk_clk),           // in_clk_0.clk
		.in_rst_0_reset (ext_flash_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (ext_flash_avl_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (ext_flash_avl_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (ext_flash_avl_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)             //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (ext_flash_clock_bridge_out_clk_clk),           // in_clk_0.clk
		.in_rst_0_reset (ext_flash_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (ext_flash_avl_mem_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (ext_flash_avl_mem_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (ext_flash_avl_mem_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)             //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (eth_tse_reset_connection_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (eth_tse_control_port_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (eth_tse_control_port_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (eth_tse_control_port_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                     //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (eth_tse_reset_connection_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                     //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (sys_clk_clk_clk),                          // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (msgdma_tx_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (msgdma_tx_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (msgdma_tx_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)         //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (sys_clk_clk_clk),                          // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (msgdma_rx_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (msgdma_rx_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (msgdma_rx_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)         //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (sys_clk_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (onchip_flash_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_flash_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_flash_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)            //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (sys_clk_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (udp_generator_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (udp_generator_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (udp_generator_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)             //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (sensor_interface_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sensor_interface_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sensor_interface_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (sys_clk_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (onchip_flash_data_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_flash_data_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_flash_data_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)             //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpu_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpu_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)               //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (msgdma_tx_prefetcher_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (msgdma_tx_prefetcher_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (msgdma_tx_prefetcher_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                    //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (msgdma_rx_prefetcher_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (msgdma_rx_prefetcher_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (msgdma_rx_prefetcher_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                    //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (eth_tse_reset_connection_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (descriptor_memory_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (descriptor_memory_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (descriptor_memory_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                     //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (eth_tse_reset_connection_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sys_clk_timer_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (sys_clk_timer_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (sys_clk_timer_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                     //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (eth_tse_reset_connection_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (output_pio_s1_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (output_pio_s1_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (output_pio_s1_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                     //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (sys_clk_clk_clk),                          // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (button_pio_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (button_pio_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (button_pio_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)         //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (sys_clk_clk_clk),                          // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (debug_uart_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (debug_uart_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (debug_uart_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)         //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (sys_clk_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (frame_timer_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (frame_timer_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (frame_timer_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)          //         .error
	);

	q_sys_mm_interconnect_1_avalon_st_adapter_020 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (sys_clk_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (calibration_ram_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (calibration_ram_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (calibration_ram_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)              //         .error
	);

endmodule
